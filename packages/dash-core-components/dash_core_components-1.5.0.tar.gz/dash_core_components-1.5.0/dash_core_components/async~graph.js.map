{"version":3,"sources":["webpack://dash_core_components/./src/fragments/Graph.react.js","webpack://dash_core_components/./node_modules/core-js/modules/es.array.from.js","webpack://dash_core_components/./node_modules/core-js/internals/array-from.js"],"names":["filterEventData","gd","eventData","event","filteredEventData","includes","points","isNil","data","i","length","fullPoint","pointData","filter","o","type","has","curveNumber","customdata","pointNumber","pointNumbers","range","lassoPoints","PlotlyGraph","props","React","createRef","bindEvents","bind","_hasPlotted","_prevGd","graphResize","figure","animate","animation_options","config","this","current","Plotly","react","layout","clone","frames","then","removeAllListeners","purge","Plots","resize","clearExtendData","extendData","forEach","updateData","traceIndices","maxPoints","Array","isArray","from","Object","keys","getFirstProp","extendTraces","setProps","clear_on_unhover","relayoutData","restyleData","hoverData","selectedData","on","clickData","clickAnnotationData","omit","hover","equals","selected","relayout","restyle","plot","window","addEventListener","extend","removeEventListener","nextProps","id","JSON","stringify","style","prevProps","className","loading_state","key","ref","data-dash-is-loading","is_loading","undefined","Component","propTypes","graphPropTypes","PropTypes","arrayOf","oneOfType","array","object","func","isRequired","defaultProps","graphDefaultProps","$","target","stat","forced","checkCorrectnessOfIteration","iterable","toObject","callWithSafeIterationClosing","isArrayIteratorMethod","toLength","createProperty","getIteratorMethod","module","exports","arrayLike","result","step","iterator","O","C","argumentsLength","arguments","mapfn","mapping","index","iteratorMethod","call","next","done","value"],"mappings":"i7DAMA,IAAMA,EAAkB,SAACC,EAAIC,EAAWC,GACpC,IAAIC,EACJ,GAAIC,YAASF,EAAO,CAAC,QAAS,QAAS,aAAc,CACjD,IAAMG,EAAS,GAEf,GAAIC,YAAML,GACN,OAAO,KAaX,IAFA,IAAMM,EAAOP,EAAGO,KAEPC,EAAI,EAAGA,EAAIP,EAAUI,OAAOI,OAAQD,IAAK,CAC9C,IAAME,EAAYT,EAAUI,OAAOG,GAC7BG,EAAYC,aAAO,SAASC,GAC9B,OAAQT,YAASU,YAAKD,GAAI,CAAC,SAAU,YACtCH,GAECK,YAAI,cAAeL,IACnBK,YAAI,cAAeL,IACnBK,YAAI,aAAcR,EAAKI,EAAUK,gBAEjCL,EAAUM,WACNV,EAAKI,EAAUK,aAAaC,WACxBP,EAAUQ,cAKlBH,YAAI,eAAgBL,KACpBC,EAAUQ,aAAeT,EAAUS,cAGvCd,EAAOG,GAAKG,EAEhBR,EAAoB,CAACE,cACJ,aAAVH,GAAkC,YAAVA,IAO/BC,EAAoBF,GAQxB,OANIc,YAAI,QAASd,KACbE,EAAkBiB,MAAQnB,EAAUmB,OAEpCL,YAAI,cAAed,KACnBE,EAAkBkB,YAAcpB,EAAUoB,aAEvClB,GASLmB,E,YACF,WAAYC,GAAO,M,IAAA,O,4FAAA,S,EACf,U,EAAA,eAAMA,K,8CACDvB,GAAKwB,IAAMC,YAChB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,MAClB,EAAKC,aAAc,EACnB,EAAKC,QAAU,KACf,EAAKC,YAAc,EAAKA,YAAYH,KAAjB,MANJ,E,4RASdJ,GAAO,WACDQ,EAA8CR,EAA9CQ,OAAQC,EAAsCT,EAAtCS,QAASC,EAA6BV,EAA7BU,kBAAmBC,EAAUX,EAAVW,OACrClC,EAAKmC,KAAKnC,GAAGoC,QAEnB,OACIJ,GACAG,KAAKP,aACLG,EAAOxB,KAAKE,SAAWT,EAAGO,KAAKE,OAExB4B,OAAOL,QAAQhC,EAAI+B,EAAQE,GAE/BI,OAAOC,MAAMtC,EAAI,CACpBO,KAAMwB,EAAOxB,KACbgC,OAAQC,YAAMT,EAAOQ,QACrBE,OAAQV,EAAOU,OACfP,OAAQA,IACTQ,MAAK,WACJ,IAAM1C,EAAK,EAAKA,GAAGoC,QAGdpC,IAKD,EAAK4B,aAAe5B,IAAO,EAAK6B,UAC5B,EAAKA,SAAW,EAAKA,QAAQc,qBAC7B,EAAKd,QAAQc,qBACbN,OAAOO,MAAM,EAAKf,UAEtB,EAAKD,aAAc,GAGlB,EAAKA,cACN,EAAKF,aACLW,OAAOQ,MAAMC,OAAO9C,GACpB,EAAK4B,aAAc,EACnB,EAAKC,QAAU7B,S,6BAKpBuB,GAAO,WACHwB,EAAgDxB,EAAhDwB,gBAAgDxB,EAA/ByB,WAERC,SAAQ,SAAAD,GACpB,IAAIE,EAAYC,EAAcC,EAeD7C,EAd7B,GACI8C,MAAMC,QAAQN,IACW,WAAzB,EAAOA,EAAW,IACpB,SAC0CA,EAD1C,GACGE,EADH,KACeC,EADf,KAC6BC,EAD7B,UAGEF,EAAaF,EAGZG,IAKwB5C,EAGM2C,EAA/BC,EAFWE,MAAME,KAAKF,MALtB,SAAsB9C,GAClB,OAAOA,EAAKiD,OAAOC,KAAKlD,GAAM,IAINmD,CAAanD,GAAME,QAAQgD,SAK3D,IAAMzD,EAAK,EAAKA,GAAGoC,QACnB,OAAOC,OAAOsB,aAAa3D,EAAIkD,EAAYC,EAAcC,MAE7DL,M,oCAIA,IAAM/C,EAAKmC,KAAKnC,GAAGoC,QACfpC,GACAqC,OAAOQ,MAAMC,OAAO9C,K,mCAIf,MAQLmC,KAAKZ,MANLqC,EAFK,EAELA,SACAC,EAHK,EAGLA,iBACAC,EAJK,EAILA,aACAC,EALK,EAKLA,YACAC,EANK,EAMLA,UACAC,EAPK,EAOLA,aAGEjE,EAAKmC,KAAKnC,GAAGoC,QAEnBpC,EAAGkE,GAAG,gBAAgB,SAAAjE,GAClB,IAAMkE,EAAYpE,EAAgBC,EAAIC,EAAW,SAC5CK,YAAM6D,IACPP,EAAS,CAACO,iBAGlBnE,EAAGkE,GAAG,0BAA0B,SAAAjE,GAC5B,IAAMmE,EAAsBC,YACxB,CAAC,QAAS,kBACVpE,GAEJ2D,EAAS,CAACQ,2BAEdpE,EAAGkE,GAAG,gBAAgB,SAAAjE,GAClB,IAAMqE,EAAQvE,EAAgBC,EAAIC,EAAW,SACxCK,YAAMgE,IAAWC,YAAOD,EAAON,IAChCJ,EAAS,CAACI,UAAWM,OAG7BtE,EAAGkE,GAAG,mBAAmB,SAAAjE,GACrB,IAAMuE,EAAWzE,EAAgBC,EAAIC,EAAW,YAC3CK,YAAMkE,IAAcD,YAAOC,EAAUP,IACtCL,EAAS,CAACK,aAAcO,OAGhCxE,EAAGkE,GAAG,mBAAmB,WACrBN,EAAS,CAACK,aAAc,UAE5BjE,EAAGkE,GAAG,mBAAmB,SAAAjE,GACrB,IAAMwE,EAAW1E,EAAgBC,EAAIC,EAAW,YAC3CK,YAAMmE,IAAcF,YAAOE,EAAUX,IACtCF,EAAS,CAACE,aAAcW,OAGhCzE,EAAGkE,GAAG,kBAAkB,SAAAjE,GACpB,IAAMyE,EAAU3E,EAAgBC,EAAIC,EAAW,WAC1CK,YAAMoE,IAAaH,YAAOG,EAASX,IACpCH,EAAS,CAACG,YAAaW,OAG/B1E,EAAGkE,GAAG,kBAAkB,WAChBL,GACAD,EAAS,CAACI,UAAW,Y,0CAKb,WAChB7B,KAAKwC,KAAKxC,KAAKZ,OAAOmB,MAAK,WACvBkC,OAAOC,iBAAiB,SAAU,EAAK/C,gBAGvCK,KAAKZ,MAAMyB,YACXb,KAAK2C,OAAO3C,KAAKZ,S,6CAKrB,IAAMvB,EAAKmC,KAAKnC,GAAGoC,QACfpC,GAAMA,EAAG2C,qBACT3C,EAAG2C,qBACCR,KAAKP,aACLS,OAAOO,MAAM5C,IAGrB4E,OAAOG,oBAAoB,SAAU5C,KAAKL,e,4CAGxBkD,GAClB,OACI7C,KAAKZ,MAAM0D,KAAOD,EAAUC,IAC5BC,KAAKC,UAAUhD,KAAKZ,MAAM6D,SAAWF,KAAKC,UAAUH,EAAUI,S,gDAI5CJ,GACJ7C,KAAKZ,MAAM0D,KAAOD,EAAUC,KAQ1C9C,KAAKZ,MAAMQ,SAAWiD,EAAUjD,QAChCI,KAAKwC,KAAKK,GAGV7C,KAAKZ,MAAMyB,aAAegC,EAAUhC,YACpCb,KAAK2C,OAAOE,M,yCAIDK,GACXA,EAAUJ,KAAO9C,KAAKZ,MAAM0D,IAC5B9C,KAAKwC,KAAKxC,KAAKZ,S,+BAId,MACyCY,KAAKZ,MAA5C+D,EADF,EACEA,UAAWL,EADb,EACaA,GAAIG,EADjB,EACiBA,MAAOG,EADxB,EACwBA,cAE7B,OACI,yBACIC,IAAKP,EACLA,GAAIA,EACJQ,IAAKtD,KAAKnC,GACV0F,uBACKH,GAAiBA,EAAcI,iBAAeC,EAEnDR,MAAOA,EACPE,UAAWA,S,8BArNDO,aA2N1BvE,EAAYwE,UAAZ,KACOC,IADP,CAEI/C,WAAYgD,IAAUC,QAClBD,IAAUE,UAAU,CAACF,IAAUG,MAAOH,IAAUI,UAEpDrD,gBAAiBiD,IAAUK,KAAKC,aAGpChF,EAAYiF,aAAZ,KACOC,IADP,CAEIxD,WAAY,KAGD1B,a,oBCjTf,IAAImF,EAAI,EAAQ,GACZlD,EAAO,EAAQ,KASnBkD,EAAE,CAAEC,OAAQ,QAASC,MAAM,EAAMC,QARC,EAAQ,IAEfC,EAA4B,SAAUC,GAC/DzD,MAAME,KAAKuD,OAKmD,CAC9DvD,KAAMA,K,iCCVR,IAAI5B,EAAO,EAAQ,KACfoF,EAAW,EAAQ,IACnBC,EAA+B,EAAQ,KACvCC,EAAwB,EAAQ,KAChCC,EAAW,EAAQ,IACnBC,EAAiB,EAAQ,KACzBC,EAAoB,EAAQ,KAIhCC,EAAOC,QAAU,SAAcC,GAC7B,IAOI9G,EAAQ+G,EAAQC,EAAMC,EAPtBC,EAAIZ,EAASQ,GACbK,EAAmB,mBAARzF,KAAqBA,KAAOkB,MACvCwE,EAAkBC,UAAUrH,OAC5BsH,EAAQF,EAAkB,EAAIC,UAAU,QAAKlC,EAC7CoC,OAAoBpC,IAAVmC,EACVE,EAAQ,EACRC,EAAiBd,EAAkBO,GAIvC,GAFIK,IAASD,EAAQpG,EAAKoG,EAAOF,EAAkB,EAAIC,UAAU,QAAKlC,EAAW,IAE3DA,MAAlBsC,GAAiCN,GAAKvE,OAAS4D,EAAsBiB,GAYvE,IADAV,EAAS,IAAII,EADbnH,EAASyG,EAASS,EAAElH,SAEdA,EAASwH,EAAOA,IACpBd,EAAeK,EAAQS,EAAOD,EAAUD,EAAMJ,EAAEM,GAAQA,GAASN,EAAEM,SAVrE,IAFAP,EAAWQ,EAAeC,KAAKR,GAC/BH,EAAS,IAAII,IACLH,EAAOC,EAASU,QAAQC,KAAMJ,IACpCd,EAAeK,EAAQS,EAAOD,EAC1BhB,EAA6BU,EAAUK,EAAO,CAACN,EAAKa,MAAOL,IAAQ,GACnER,EAAKa,OAWb,OADAd,EAAO/G,OAASwH,EACTT","file":"async~graph.js","sourcesContent":["import React, {Component} from 'react';\nimport {clone, equals, filter, has, includes, isNil, omit, type} from 'ramda';\nimport PropTypes from 'prop-types';\nimport {graphPropTypes, graphDefaultProps} from '../components/Graph.react';\n/* global Plotly:true */\n\nconst filterEventData = (gd, eventData, event) => {\n    let filteredEventData;\n    if (includes(event, ['click', 'hover', 'selected'])) {\n        const points = [];\n\n        if (isNil(eventData)) {\n            return null;\n        }\n\n        /*\n         * remove `data`, `layout`, `xaxis`, etc\n         * objects from the event data since they're so big\n         * and cause JSON stringify ciricular structure errors.\n         *\n         * also, pull down the `customdata` point from the data array\n         * into the event object\n         */\n        const data = gd.data;\n\n        for (let i = 0; i < eventData.points.length; i++) {\n            const fullPoint = eventData.points[i];\n            const pointData = filter(function(o) {\n                return !includes(type(o), ['Object', 'Array']);\n            }, fullPoint);\n            if (\n                has('curveNumber', fullPoint) &&\n                has('pointNumber', fullPoint) &&\n                has('customdata', data[pointData.curveNumber])\n            ) {\n                pointData.customdata =\n                    data[pointData.curveNumber].customdata[\n                        fullPoint.pointNumber\n                    ];\n            }\n\n            // specific to histogram. see https://github.com/plotly/plotly.js/pull/2113/\n            if (has('pointNumbers', fullPoint)) {\n                pointData.pointNumbers = fullPoint.pointNumbers;\n            }\n\n            points[i] = pointData;\n        }\n        filteredEventData = {points};\n    } else if (event === 'relayout' || event === 'restyle') {\n        /*\n         * relayout shouldn't include any big objects\n         * it will usually just contain the ranges of the axes like\n         * \"xaxis.range[0]\": 0.7715822247381828,\n         * \"xaxis.range[1]\": 3.0095292008680063`\n         */\n        filteredEventData = eventData;\n    }\n    if (has('range', eventData)) {\n        filteredEventData.range = eventData.range;\n    }\n    if (has('lassoPoints', eventData)) {\n        filteredEventData.lassoPoints = eventData.lassoPoints;\n    }\n    return filteredEventData;\n};\n\n/**\n * Graph can be used to render any plotly.js-powered data visualization.\n *\n * You can define callbacks based on user interaction with Graphs such as\n * hovering, clicking or selecting\n */\nclass PlotlyGraph extends Component {\n    constructor(props) {\n        super(props);\n        this.gd = React.createRef();\n        this.bindEvents = this.bindEvents.bind(this);\n        this._hasPlotted = false;\n        this._prevGd = null;\n        this.graphResize = this.graphResize.bind(this);\n    }\n\n    plot(props) {\n        const {figure, animate, animation_options, config} = props;\n        const gd = this.gd.current;\n\n        if (\n            animate &&\n            this._hasPlotted &&\n            figure.data.length === gd.data.length\n        ) {\n            return Plotly.animate(gd, figure, animation_options);\n        }\n        return Plotly.react(gd, {\n            data: figure.data,\n            layout: clone(figure.layout),\n            frames: figure.frames,\n            config: config,\n        }).then(() => {\n            const gd = this.gd.current;\n\n            // double-check gd hasn't been unmounted\n            if (!gd) {\n                return;\n            }\n\n            // in case we've made a new DOM element, transfer events\n            if (this._hasPlotted && gd !== this._prevGd) {\n                if (this._prevGd && this._prevGd.removeAllListeners) {\n                    this._prevGd.removeAllListeners();\n                    Plotly.purge(this._prevGd);\n                }\n                this._hasPlotted = false;\n            }\n\n            if (!this._hasPlotted) {\n                this.bindEvents();\n                Plotly.Plots.resize(gd);\n                this._hasPlotted = true;\n                this._prevGd = gd;\n            }\n        });\n    }\n\n    extend(props) {\n        const {clearExtendData, extendData: extendDataArray} = props;\n\n        extendDataArray.forEach(extendData => {\n            let updateData, traceIndices, maxPoints;\n            if (\n                Array.isArray(extendData) &&\n                typeof extendData[0] === 'object'\n            ) {\n                [updateData, traceIndices, maxPoints] = extendData;\n            } else {\n                updateData = extendData;\n            }\n\n            if (!traceIndices) {\n                function getFirstProp(data) {\n                    return data[Object.keys(data)[0]];\n                }\n\n                function generateIndices(data) {\n                    return Array.from(Array(getFirstProp(data).length).keys());\n                }\n                traceIndices = generateIndices(updateData);\n            }\n\n            const gd = this.gd.current;\n            return Plotly.extendTraces(gd, updateData, traceIndices, maxPoints);\n        });\n        clearExtendData();\n    }\n\n    graphResize() {\n        const gd = this.gd.current;\n        if (gd) {\n            Plotly.Plots.resize(gd);\n        }\n    }\n\n    bindEvents() {\n        const {\n            setProps,\n            clear_on_unhover,\n            relayoutData,\n            restyleData,\n            hoverData,\n            selectedData,\n        } = this.props;\n\n        const gd = this.gd.current;\n\n        gd.on('plotly_click', eventData => {\n            const clickData = filterEventData(gd, eventData, 'click');\n            if (!isNil(clickData)) {\n                setProps({clickData});\n            }\n        });\n        gd.on('plotly_clickannotation', eventData => {\n            const clickAnnotationData = omit(\n                ['event', 'fullAnnotation'],\n                eventData\n            );\n            setProps({clickAnnotationData});\n        });\n        gd.on('plotly_hover', eventData => {\n            const hover = filterEventData(gd, eventData, 'hover');\n            if (!isNil(hover) && !equals(hover, hoverData)) {\n                setProps({hoverData: hover});\n            }\n        });\n        gd.on('plotly_selected', eventData => {\n            const selected = filterEventData(gd, eventData, 'selected');\n            if (!isNil(selected) && !equals(selected, selectedData)) {\n                setProps({selectedData: selected});\n            }\n        });\n        gd.on('plotly_deselect', () => {\n            setProps({selectedData: null});\n        });\n        gd.on('plotly_relayout', eventData => {\n            const relayout = filterEventData(gd, eventData, 'relayout');\n            if (!isNil(relayout) && !equals(relayout, relayoutData)) {\n                setProps({relayoutData: relayout});\n            }\n        });\n        gd.on('plotly_restyle', eventData => {\n            const restyle = filterEventData(gd, eventData, 'restyle');\n            if (!isNil(restyle) && !equals(restyle, restyleData)) {\n                setProps({restyleData: restyle});\n            }\n        });\n        gd.on('plotly_unhover', () => {\n            if (clear_on_unhover) {\n                setProps({hoverData: null});\n            }\n        });\n    }\n\n    componentDidMount() {\n        this.plot(this.props).then(() => {\n            window.addEventListener('resize', this.graphResize);\n        });\n\n        if (this.props.extendData) {\n            this.extend(this.props);\n        }\n    }\n\n    componentWillUnmount() {\n        const gd = this.gd.current;\n        if (gd && gd.removeAllListeners) {\n            gd.removeAllListeners();\n            if (this._hasPlotted) {\n                Plotly.purge(gd);\n            }\n        }\n        window.removeEventListener('resize', this.graphResize);\n    }\n\n    shouldComponentUpdate(nextProps) {\n        return (\n            this.props.id !== nextProps.id ||\n            JSON.stringify(this.props.style) !== JSON.stringify(nextProps.style)\n        );\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const idChanged = this.props.id !== nextProps.id;\n        if (idChanged) {\n            /*\n             * then the dom needs to get re-rendered with a new ID.\n             * the graph will get updated in componentDidUpdate\n             */\n            return;\n        }\n        if (this.props.figure !== nextProps.figure) {\n            this.plot(nextProps);\n        }\n\n        if (this.props.extendData !== nextProps.extendData) {\n            this.extend(nextProps);\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.id !== this.props.id) {\n            this.plot(this.props);\n        }\n    }\n\n    render() {\n        const {className, id, style, loading_state} = this.props;\n\n        return (\n            <div\n                key={id}\n                id={id}\n                ref={this.gd}\n                data-dash-is-loading={\n                    (loading_state && loading_state.is_loading) || undefined\n                }\n                style={style}\n                className={className}\n            />\n        );\n    }\n}\n\nPlotlyGraph.propTypes = {\n    ...graphPropTypes,\n    extendData: PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.array, PropTypes.object])\n    ),\n    clearExtendData: PropTypes.func.isRequired,\n};\n\nPlotlyGraph.defaultProps = {\n    ...graphDefaultProps,\n    extendData: [],\n};\n\nexport default PlotlyGraph;\n","var $ = require('../internals/export');\nvar from = require('../internals/array-from');\nvar checkCorrectnessOfIteration = require('../internals/check-correctness-of-iteration');\n\nvar INCORRECT_ITERATION = !checkCorrectnessOfIteration(function (iterable) {\n  Array.from(iterable);\n});\n\n// `Array.from` method\n// https://tc39.github.io/ecma262/#sec-array.from\n$({ target: 'Array', stat: true, forced: INCORRECT_ITERATION }, {\n  from: from\n});\n","'use strict';\nvar bind = require('../internals/bind-context');\nvar toObject = require('../internals/to-object');\nvar callWithSafeIterationClosing = require('../internals/call-with-safe-iteration-closing');\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\nvar toLength = require('../internals/to-length');\nvar createProperty = require('../internals/create-property');\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\n// `Array.from` method implementation\n// https://tc39.github.io/ecma262/#sec-array.from\nmodule.exports = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n  var O = toObject(arrayLike);\n  var C = typeof this == 'function' ? this : Array;\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var index = 0;\n  var iteratorMethod = getIteratorMethod(O);\n  var length, result, step, iterator;\n  if (mapping) mapfn = bind(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);\n  // if the target is not iterable or it's an array with the default iterator - use a simple case\n  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {\n    iterator = iteratorMethod.call(O);\n    result = new C();\n    for (;!(step = iterator.next()).done; index++) {\n      createProperty(result, index, mapping\n        ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true)\n        : step.value\n      );\n    }\n  } else {\n    length = toLength(O.length);\n    result = new C(length);\n    for (;length > index; index++) {\n      createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n    }\n  }\n  result.length = index;\n  return result;\n};\n"],"sourceRoot":""}
# -*- coding: utf-8 -*-

"""
bandwidth

This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""
import bandwidth.voice.models.temporal_unit


class Duration(object):

    """Implementation of the 'Duration' model.

    TODO: type model description here.

    Attributes:
        seconds (long|int): TODO: type description here.
        nano (int): TODO: type description here.
        negative (bool): TODO: type description here.
        zero (bool): TODO: type description here.
        units (list of TemporalUnit): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "seconds": 'seconds',
        "nano": 'nano',
        "negative": 'negative',
        "zero": 'zero',
        "units": 'units'
    }

    def __init__(self,
                 seconds=None,
                 nano=None,
                 negative=None,
                 zero=None,
                 units=None):
        """Constructor for the Duration class"""

        # Initialize members of the class
        self.seconds = seconds
        self.nano = nano
        self.negative = negative
        self.zero = zero
        self.units = units

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        seconds = dictionary.get('seconds')
        nano = dictionary.get('nano')
        negative = dictionary.get('negative')
        zero = dictionary.get('zero')
        units = None
        if dictionary.get('units') is not None:
            units = [bandwidth.voice.models.temporal_unit.TemporalUnit.from_dictionary(x) for x in dictionary.get('units')]

        # Return an object of this model
        return cls(seconds,
                   nano,
                   negative,
                   zero,
                   units)

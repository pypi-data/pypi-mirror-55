
from setuptools import setup
setup(**{'author': 'KPN DE Platform',
 'author_email': 'de-platform@kpn.com',
 'classifiers': ['Development Status :: 5 - Production/Stable',
                 'Environment :: Web Environment',
                 'Intended Audience :: Developers',
                 'Operating System :: OS Independent',
                 'License :: OSI Approved :: Apache Software License',
                 'Programming Language :: Python',
                 'Programming Language :: Python :: 2',
                 'Programming Language :: Python :: 2.7',
                 'Programming Language :: Python :: 3',
                 'Programming Language :: Python :: 3.5',
                 'Programming Language :: Python :: 3.6',
                 'Topic :: Internet :: WWW/HTTP',
                 'Topic :: Software Development :: Libraries :: Python '
                 'Modules'],
 'description': 'Python project',
 'extras_require': {'all': ['kafka-python>=1.4.3',
                            'elasticsearch<7.0.0,>=5',
                            'influxdb>=2.11'],
                    'elasticsearch': ['elasticsearch<7.0.0,>=5'],
                    'influxdb': ['influxdb>=2.11'],
                    'kafka': ['kafka-python>=1.4.3']},
 'include_package_data': True,
 'install_requires': ['pkgsettings>=0.9.2',
                      'six<2.0.0,>=1.10.0',
                      'fqn-decorators<2.0.0,>=1.2.5'],
 'long_description': 'Time Execution\n'
                     '==============\n'
                     '\n'
                     '.. image:: '
                     'https://secure.travis-ci.org/kpn-digital/py-timeexecution.svg?branch=master\n'
                     '    :target:  '
                     'http://travis-ci.org/kpn-digital/py-timeexecution?branch=master\n'
                     '\n'
                     '.. image:: '
                     'https://img.shields.io/codecov/c/github/kpn-digital/py-timeexecution/master.svg\n'
                     '    :target: '
                     'http://codecov.io/github/kpn-digital/py-timeexecution?branch=master\n'
                     '\n'
                     '.. image:: '
                     'https://img.shields.io/pypi/v/timeexecution.svg\n'
                     '    :target: https://pypi.org/project/timeexecution\n'
                     '\n'
                     '.. image:: '
                     'https://img.shields.io/pypi/pyversions/timeexecution.svg\n'
                     '    :target: https://pypi.org/project/timeexecution\n'
                     '\n'
                     '.. image:: '
                     'https://readthedocs.org/projects/py-timeexecution/badge/?version=latest\n'
                     '    :target: '
                     'http://py-timeexecution.readthedocs.org/en/latest/?badge=latest\n'
                     '\n'
                     '.. image:: '
                     'https://img.shields.io/pypi/l/timeexecution.svg\n'
                     '    :target: https://pypi.org/project/timeexecution\n'
                     '\n'
                     '.. image:: '
                     'https://img.shields.io/badge/code%20style-black-000000.svg\n'
                     '\n'
                     'This package is designed to record application metrics '
                     'into specific backends.\n'
                     'With the help of Grafana_ or Kibana_ you can easily use '
                     'these metrics to create meaningful monitoring '
                     'dashboards.\n'
                     '\n'
                     '\n'
                     'Features\n'
                     '--------\n'
                     '\n'
                     '- Sending data to multiple backends (e.g. '
                     'ElasticSearch)\n'
                     '- Custom backends\n'
                     '- Hooks to include additional data per metric.\n'
                     '\n'
                     'Available backends\n'
                     '------------------\n'
                     '\n'
                     '- InfluxDB 0.8\n'
                     '- Elasticsearch >=5,<7\n'
                     '- Kafka\n'
                     '\n'
                     '\n'
                     'Installation\n'
                     '------------\n'
                     '\n'
                     'If you want to use it with the '
                     '``ElasticSearchBackend``:\n'
                     '\n'
                     '.. code-block:: bash\n'
                     '\n'
                     '    $ pip install timeexecution[elasticsearch]\n'
                     '\n'
                     'with ``InfluxBackend``:\n'
                     '\n'
                     '.. code-block:: bash\n'
                     '\n'
                     '    $ pip install timeexecution[influxdb]\n'
                     '\n'
                     'with ``KafkaBackend``:\n'
                     '\n'
                     '.. code-block:: bash\n'
                     '\n'
                     '    $ pip install timeexecution[kafka]\n'
                     '\n'
                     'or if you prefer to have all backends available and '
                     'easily switch between them:\n'
                     '\n'
                     '.. code-block:: bash\n'
                     '\n'
                     '    $ pip install timeexecution[all]\n'
                     '\n'
                     '\n'
                     'Usage\n'
                     '-----\n'
                     '\n'
                     'To use this package you decorate the functions you want '
                     'to time its execution.\n'
                     'Every wrapped function will create a metric consisting '
                     'of 3 default values:\n'
                     '\n'
                     '- ``name`` - The name of the series the metric will be '
                     'stored in. Byt default, timeexecution will use the fully '
                     'qualified name of the decorated method or function (e.g. '
                     ').\n'
                     '- ``value`` - The time it took in ms for the wrapped '
                     'function to complete\n'
                     '- ``hostname`` - The hostname of the machine the code is '
                     'running on\n'
                     '\n'
                     'See the following example\n'
                     '\n'
                     '.. code-block:: python\n'
                     '\n'
                     '    from time_execution import settings, time_execution\n'
                     '    from time_execution.backends.influxdb import '
                     'InfluxBackend\n'
                     '    from time_execution.backends.elasticsearch import '
                     'ElasticsearchBackend\n'
                     '\n'
                     '    # Setup the desired backend\n'
                     "    influx = InfluxBackend(host='influx', "
                     "database='metrics', use_udp=False)\n"
                     '    elasticsearch = '
                     "ElasticsearchBackend('elasticsearch', index='metrics')\n"
                     '\n'
                     '    # Configure the time_execution decorator\n'
                     '    settings.configure(backends=[influx, '
                     'elasticsearch])\n'
                     '\n'
                     '    # Wrap the methods where u want the metrics\n'
                     '    @time_execution\n'
                     '    def hello():\n'
                     "        return 'World'\n"
                     '\n'
                     '    # Now when we call hello() and we will get metrics '
                     'in our backends\n'
                     '    hello()\n'
                     '\n'
                     'This will result in an entry in the influxdb\n'
                     '\n'
                     '.. code-block:: json\n'
                     '\n'
                     '    [\n'
                     '        {\n'
                     '            "name": "__main__.hello",\n'
                     '            "columns": [\n'
                     '                "time",\n'
                     '                "sequence_number",\n'
                     '                "value",\n'
                     '                "hostname",\n'
                     '            ],\n'
                     '            "points": [\n'
                     '                [\n'
                     '                    1449739813939,\n'
                     '                    1111950001,\n'
                     '                    312,\n'
                     '                    "machine.name",\n'
                     '                ]\n'
                     '            ]\n'
                     '        }\n'
                     '    ]\n'
                     '\n'
                     'And the following in Elasticsearch\n'
                     '\n'
                     '.. code-block:: json\n'
                     '\n'
                     '    [\n'
                     '        {\n'
                     '            "_index": "metrics-2016.01.28",\n'
                     '            "_type": "metric",\n'
                     '            "_id": "AVKIp9DpnPWamvqEzFB3",\n'
                     '            "_score": null,\n'
                     '            "_source": {\n'
                     '                "timestamp": '
                     '"2016-01-28T14:34:05.416968",\n'
                     '                "hostname": "dfaa4928109f",\n'
                     '                "name": "__main__.hello",\n'
                     '                "value": 312\n'
                     '            },\n'
                     '            "sort": [\n'
                     '                1453991645416\n'
                     '            ]\n'
                     '        }\n'
                     '    ]\n'
                     '\n'
                     "It's also possible to run backend in different thread "
                     'with logic behind it, to send metrics in bulk mode.\n'
                     '\n'
                     'For example:\n'
                     '\n'
                     '.. code-block:: python\n'
                     '\n'
                     '    from time_execution import settings, time_execution\n'
                     '    from time_execution.backends.threaded import '
                     'ThreadedBackend\n'
                     '\n'
                     '    # Setup threaded backend which will be run on '
                     'separate thread\n'
                     '    threaded_backend = ThreadedBackend(\n'
                     '        backend=ElasticsearchBackend,\n'
                     '        backend_kwargs={\n'
                     '            "host" : "elasticsearch",\n'
                     '            "index": "metrics",\n'
                     '        }\n'
                     '    )\n'
                     '\n'
                     '    # there is also possibility to configure backend by '
                     'import path, like:\n'
                     '    threaded_backend = ThreadedBackend(\n'
                     '        '
                     'backend="time_execution.backends.kafka.KafkaBackend",\n'
                     '        #: any other configuration belongs to backend\n'
                     '        backend_kwargs={\n'
                     '            "hosts" : "kafka",\n'
                     '            "topic": "metrics"\n'
                     '        }\n'
                     '    )\n'
                     '\n'
                     '    # Configure the time_execution decorator\n'
                     '    settings.configure(backends=[threaded_backend])\n'
                     '\n'
                     '    # Wrap the methods where u want the metrics\n'
                     '    @time_execution\n'
                     '    def hello():\n'
                     "        return 'World'\n"
                     '\n'
                     '    # Now when we call hello() we put metrics in queue '
                     'to send it either in some configurable time later\n'
                     '    # or when queue will reach configurable limit.\n'
                     '    hello()\n'
                     '\n'
                     "It's also possible to decorate coroutines or awaitables "
                     'in Python >=3.5.\n'
                     '\n'
                     'For example:\n'
                     '\n'
                     '.. code-block:: python\n'
                     '\n'
                     '    import asyncio\n'
                     '    from time_execution import time_execution_async\n'
                     '\n'
                     '    # ... Setup the desired backend(s) as described '
                     'above ...\n'
                     '\n'
                     '    # Wrap the methods where you want the metrics\n'
                     '    @time_execution_async\n'
                     '    async def hello():\n'
                     '        await asyncio.sleep(1)\n'
                     "        return 'World'\n"
                     '\n'
                     '    # Now when we schedule hello() we will get metrics '
                     'in our backends\n'
                     '    loop = asyncio.get_event_loop()\n'
                     '    loop.run_until_complete(hello())\n'
                     '\n'
                     '\n'
                     '.. _usage-hooks: \n'
                     '\n'
                     'Hooks\n'
                     '-----\n'
                     '\n'
                     '``time_execution`` supports hooks where you can change '
                     'the metric before its\n'
                     'being sent to the backend.\n'
                     '\n'
                     'With a hook you can add additional and change existing '
                     'fields. This can be\n'
                     'useful for cases where you would like to add a column to '
                     'the metric based on\n'
                     'the response of the wrapped function.\n'
                     '\n'
                     'A hook will always get 3 arguments:\n'
                     '\n'
                     '- ``response`` - The returned value of the wrapped '
                     'function\n'
                     '- ``exception`` - The raised exception of the wrapped '
                     'function\n'
                     '- ``metric`` - A dict containing the data to be send to '
                     'the backend\n'
                     '- ``func_args`` - Original args received by the wrapped '
                     'function.\n'
                     '- ``func_kwargs`` - Original kwargs received by the '
                     'wrapped function.\n'
                     '\n'
                     'From within a hook you can change the `name` if you want '
                     'the metrics to be split\n'
                     'into multiple series.\n'
                     '\n'
                     'See the following example how to setup hooks.\n'
                     '\n'
                     '.. code-block:: python\n'
                     '\n'
                     '    # Now lets create a hook\n'
                     '    def my_hook(response, exception, metric, func, '
                     'func_args, func_kwargs):\n'
                     "        status_code = getattr(response, 'status_code', "
                     'None)\n'
                     '        if status_code:\n'
                     '            return dict(\n'
                     "                name='{}.{}'.format(metric['name'], "
                     'status_code),\n'
                     "                extra_field='foo bar'\n"
                     '            )\n'
                     '\n'
                     '    # Configure the time_execution decorator, but now '
                     'with hooks\n'
                     '    settings.configure(backends=[backend], '
                     'hooks=[my_hook])\n'
                     '\n'
                     '\n'
                     'There is also possibility to create decorator with '
                     'custom set of hooks. It is needed for example to track '
                     '`celery` tasks.\n'
                     '\n'
                     '.. code-block:: python\n'
                     '\n'
                     '    from multiprocessing import current_process\n'
                     '    # Hook for celery tasks\n'
                     '    def celery_hook(response, exception, metric, func, '
                     'func_args, func_kwargs):\n'
                     '        """\n'
                     '        Add celery worker-specific details into '
                     'response.\n'
                     '        """\n'
                     '        p = current_process()\n'
                     '        hook = {\n'
                     "            'name': metric.get('name'),\n"
                     "            'value': metric.get('value'),\n"
                     "            'success': exception is None,\n"
                     "            'process_name': p.name,\n"
                     "            'process_pid': p.pid,\n"
                     '        }\n'
                     '        return hook\n'
                     '\n'
                     '    # Create time_execution decorator with extra hooks\n'
                     '    time_execution_celery = '
                     'time_execution(extra_hooks=[celery_hook])\n'
                     '\n'
                     '    @celery.task\n'
                     '    @time_execution_celery\n'
                     '    def celery_task(self, **kwargs):\n'
                     '        return True\n'
                     '\n'
                     '    # Or do it in place where it is needed\n'
                     '    @celery.task\n'
                     '    @time_execution(extra_hooks=[celery_hook])\n'
                     '    def celery_task(self, **kwargs):\n'
                     '        return True\n'
                     '\n'
                     '    # Or override default hooks by custom ones. Just '
                     'setup `disable_default_hooks` flag\n'
                     '    @celery.task\n'
                     '    @time_execution(extra_hooks=[celery_hook], '
                     'disable_default_hooks=True)\n'
                     '    def celery_task(self, **kwargs):\n'
                     '        return True\n'
                     '\n'
                     '\n'
                     '\n'
                     'Manually sending metrics\n'
                     '------------------------\n'
                     '\n'
                     'You can also send any metric you have manually to the '
                     'backend. These will not\n'
                     'add the default values and will not hit the hooks.\n'
                     '\n'
                     'See the following example.\n'
                     '\n'
                     '.. code-block:: python\n'
                     '\n'
                     '    from time_execution import write_metric\n'
                     '\n'
                     '    loadavg = os.getloadavg()\n'
                     "    write_metric('cpu.load.1m', value=loadavg[0])\n"
                     "    write_metric('cpu.load.5m', value=loadavg[1])\n"
                     "    write_metric('cpu.load.15m', value=loadavg[2])\n"
                     '\n'
                     '\n'
                     'Custom Backend\n'
                     '--------------\n'
                     '\n'
                     'Writing a custom backend is very simple, all you need to '
                     'do is create a class\n'
                     'with a `write` method. It is not required to extend '
                     '`BaseMetricsBackend`\n'
                     'but, in order to easily upgrade, we recommend you do.\n'
                     '\n'
                     '.. code-block:: python\n'
                     '\n'
                     '    from time_execution.backends.base import '
                     'BaseMetricsBackend\n'
                     '\n'
                     '\n'
                     '    class MetricsPrinter(BaseMetricsBackend):\n'
                     '        def write(self, name, **data):\n'
                     '            print(name, data)\n'
                     '\n'
                     '\n'
                     'Example scenario\n'
                     '----------------\n'
                     '\n'
                     'In order to read the metrics, e.g. using ElasticSearch '
                     'as a backend, the following lucene query could be used:\n'
                     '\n'
                     '.. code-block::\n'
                     '\n'
                     '    name:"__main__.hello" AND hostname:dfaa4928109f\n'
                     '\n'
                     'For more advanced query syntax, please have a look at '
                     'the `Lucene documentation`_ and the `ElasticSearch Query '
                     'DSL`_ reference.\n'
                     '\n'
                     '\n'
                     'Contribute\n'
                     '----------\n'
                     '\n'
                     'You have something to contribute? Great! There are a few '
                     'things that may come in handy.\n'
                     '\n'
                     'Testing in this project is done via docker. There is a '
                     'docker-compose to easily\n'
                     'get all the required containers up and running.\n'
                     '\n'
                     'There is a Makefile with a few targets that we use '
                     'often:\n'
                     '\n'
                     '- ``make test``\n'
                     '- ``make isort``\n'
                     '- ``make lint``\n'
                     '- ``make build``\n'
                     '- ``make setup.py``\n'
                     '\n'
                     'All of these make targets can be prefixed by '
                     '``docker/``. This will execute\n'
                     'the target inside the docker container instead of on '
                     'your local machine.\n'
                     'For example ``make docker/build``.\n'
                     '\n'
                     '\n'
                     '.. _Grafana: http://grafana.org/\n'
                     '.. _Kibana: https://www.elastic.co/products/kibana\n'
                     '.. _Lucene Documentation: '
                     'https://lucene.apache.org/core/documentation.html\n'
                     '.. _ElasticSearch Query DSL: '
                     'https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html\n',
 'name': 'timeexecution',
 'packages': ['time_execution', 'time_execution.backends'],
 'tests_require': ['tox'],
 'url': 'https://github.com/kpn-digital/py-timeexecution',
 'version': '4.1.2',
 'zip_safe': False})

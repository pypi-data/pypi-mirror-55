{"ast":null,"code":"import _slicedToArray from \"/home/gabe/src/point-label-sharing/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gabe/src/point-label-sharing/frontend/src/components/tool_dialogs/SimpleTable.js\";\nimport React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto'\n  }\n}));\nconst StyledToggleButtonGroup = withStyles(theme => ({\n  grouped: {\n    margin: theme.spacing(0.5),\n    border: 'none',\n    padding: theme.spacing(0, 1),\n    '&:not(:first-child)': {\n      borderRadius: theme.shape.borderRadius\n    },\n    '&:first-child': {\n      borderRadius: theme.shape.borderRadius\n    }\n  }\n}))(ToggleButtonGroup);\nexport default function SimpleTable(props) {\n  const previewData = props.previewData,\n        trimRange = props.trimRange,\n        findAndReplaceWords = props.findAndReplaceWords,\n        delimeterAndSections = props.delimeterAndSections,\n        onSectionsClicked = props.onSectionsClicked,\n        wordToFind = props.wordToFind;\n\n  const _React$useState = React.useState(() => []),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        sections = _React$useState2[0],\n        setSections = _React$useState2[1];\n\n  const classes = useStyles();\n\n  const handleSectionsClicked = (event, newSections) => {\n    setSections(newSections);\n    onSectionsClicked(newSections);\n  };\n\n  const columnNames = previewData[0];\n  let rows = [];\n\n  if (trimRange) {\n    rows = previewData.slice(1).map(row => {\n      return row.map(value => {\n        return value.substring(trimRange[0], trimRange[1]);\n      });\n    });\n  } else if (findAndReplaceWords) {\n    rows = previewData.slice(1).map(row => {\n      return row.map(value => {\n        const re = new RegExp(escapeRegExp(findAndReplaceWords[0]), 'g');\n        return value.replace(re, findAndReplaceWords[1]);\n      });\n    });\n  } else if (delimeterAndSections) {\n    rows = previewData.slice(1, 2).map(row => {\n      return row.map(value => {\n        if (delimeterAndSections[0]) {\n          return value.split(delimeterAndSections[0]).join(\" | \");\n        } else {\n          return value;\n        }\n      });\n    });\n  } else if (wordToFind) {\n    rows = previewData.slice(1).map(row => {\n      return row.map(value => {\n        const re = new RegExp(escapeRegExp(wordToFind), 'g');\n        return value.replace(re, \"\");\n      });\n    });\n  } else {\n    rows = previewData.slice(1);\n  }\n\n  function escapeRegExp(str) {\n    return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n  }\n\n  return React.createElement(Paper, {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Table, {\n    className: classes.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(TableHead, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, columnNames.map((columnName, index) => {\n    return React.createElement(TableCell, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, columnName);\n  }))), React.createElement(TableBody, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, rows.map((row, index) => {\n    return React.createElement(TableRow, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, row.map((value, colIdx) => {\n      if (delimeterAndSections && delimeterAndSections[0]) {\n        return React.createElement(TableCell, {\n          key: colIdx,\n          component: \"th\",\n          scope: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(StyledToggleButtonGroup, {\n          size: \"small\",\n          value: sections,\n          onChange: handleSectionsClicked,\n          \"arial-label\": \"split text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, value.split(\" | \").map((sectionValue, sectionIdx) => {\n          return React.createElement(ToggleButton, {\n            value: sectionIdx + 1,\n            key: sectionIdx,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 111\n            },\n            __self: this\n          }, sectionValue);\n        })));\n      } else {\n        return React.createElement(TableCell, {\n          key: colIdx,\n          component: \"th\",\n          scope: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, value);\n      }\n    }));\n  }), React.createElement(TableRow, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"...\")))));\n}","map":{"version":3,"sources":["/home/gabe/src/point-label-sharing/frontend/src/components/tool_dialogs/SimpleTable.js"],"names":["React","makeStyles","withStyles","Table","TableBody","TableCell","TableHead","TableRow","Paper","ToggleButton","ToggleButtonGroup","useStyles","theme","root","width","marginTop","spacing","overflowX","StyledToggleButtonGroup","grouped","margin","border","padding","borderRadius","shape","SimpleTable","props","previewData","trimRange","findAndReplaceWords","delimeterAndSections","onSectionsClicked","wordToFind","useState","sections","setSections","classes","handleSectionsClicked","event","newSections","columnNames","rows","slice","map","row","value","substring","re","RegExp","escapeRegExp","replace","split","join","str","table","columnName","index","colIdx","sectionValue","sectionIdx"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    marginTop: theme.spacing(3),\n    overflowX: 'auto',\n  }\n}));\n\nconst StyledToggleButtonGroup = withStyles(theme => ({\n  grouped: {\n    margin: theme.spacing(0.5),\n    border: 'none',\n    padding: theme.spacing(0, 1),\n    '&:not(:first-child)': {\n      borderRadius: theme.shape.borderRadius,\n    },\n    '&:first-child': {\n      borderRadius: theme.shape.borderRadius,\n    },\n  },\n}))(ToggleButtonGroup);\n\nexport default function SimpleTable(props) {\n  const { previewData, trimRange, findAndReplaceWords, delimeterAndSections, onSectionsClicked, wordToFind } = props;\n  const [sections, setSections] = React.useState(() => []);\n\n  const classes = useStyles();\n\n  const handleSectionsClicked = (event, newSections) => {\n    setSections(newSections);\n    onSectionsClicked(newSections);\n  };\n  \n  const columnNames = previewData[0];\n  let rows = [];\n\n  if (trimRange) {\n    rows = previewData.slice(1).map(row => {\n        return row.map(value => {\n            return value.substring(trimRange[0], trimRange[1]);\n        });\n      });\n  } else if (findAndReplaceWords) {\n    rows = previewData.slice(1).map(row => {\n      return row.map(value => {\n          const re = new RegExp(escapeRegExp(findAndReplaceWords[0]), 'g');\n          return value.replace(re, findAndReplaceWords[1]);\n      });\n    });\n  } else if (delimeterAndSections) {\n    rows = previewData.slice(1, 2).map(row => {\n      return row.map(value => {\n        if (delimeterAndSections[0]) {\n          return value.split(delimeterAndSections[0]).join(\" | \");\n        } else {\n          return value;\n        }\n      });\n    });\n  } else if (wordToFind) {\n    rows = previewData.slice(1).map(row => {\n      return row.map(value => {\n          const re = new RegExp(escapeRegExp(wordToFind), 'g');\n          return value.replace(re, \"\");\n      });\n    });\n  } else {\n    rows = previewData.slice(1);\n  }\n\n  function escapeRegExp(str) {\n    return str.replace(/([.*+?^=!:${}()|[\\]/\\\\])/g, \"\\\\$1\");\n  }\n  \n  return (\n    <Paper className={classes.root}>\n      <Table className={classes.table}>\n        <TableHead>\n          <TableRow>\n            {columnNames.map((columnName, index) => {\n                return <TableCell key={index}>{columnName}</TableCell>;\n            })}\n            </TableRow>\n        </TableHead>\n        <TableBody>\n            {rows.map((row, index) => {\n                return (\n                <TableRow key={index}>\n                    {row.map((value,colIdx) => {\n                      if (delimeterAndSections && delimeterAndSections[0]) {\n                        return (\n                          <TableCell key={colIdx} component=\"th\" scope=\"row\">\n      \n                            <StyledToggleButtonGroup\n                            size=\"small\"\n                            value={sections}\n                            onChange={handleSectionsClicked}\n                            arial-label=\"split text\">\n                              {value.split(\" | \").map((sectionValue, sectionIdx) => {\n                                return <ToggleButton value={sectionIdx + 1} key={sectionIdx}>{sectionValue}</ToggleButton>;\n                              })}\n                            </StyledToggleButtonGroup>\n                          </TableCell>);\n                      } else {\n                        return(\n                            <TableCell key={colIdx} component=\"th\" scope=\"row\">\n                              {value}\n                            </TableCell>\n                        );\n                      }\n                    })}\n                </TableRow>);\n            })}\n            <TableRow>\n                <TableCell component=\"th\" scope=\"row\">...</TableCell>\n            </TableRow>\n        </TableBody>\n      </Table>\n    </Paper>\n  );\n}"]},"metadata":{},"sourceType":"module"}
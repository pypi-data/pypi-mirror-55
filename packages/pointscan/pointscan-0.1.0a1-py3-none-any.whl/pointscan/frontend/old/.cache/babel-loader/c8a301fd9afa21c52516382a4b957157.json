{"ast":null,"code":"const convertCSVTo2DArray = csv => {\n  let data = [];\n  data[0] = Object.keys(csv[0]);\n  let i = 0;\n\n  for (const row of csv) {\n    data[i] = [];\n    let j = 0;\n\n    for (const key of Object.keys(csv[0])) {\n      data[i][j] = row[key];\n      j++;\n    }\n\n    i++;\n  }\n\n  return data;\n};\n\nconst importAll = r => {\n  let images = {};\n  r.keys().map((item, index) => images[item.replace('./', '')] = r(item));\n  return images;\n};\n\nconst sliceData = (data, rows, cols) => {\n  let result = [];\n  let header = [];\n  const headerlessData = data.slice(1);\n  rows.forEach(rowIdx => {\n    let row = [];\n    cols.forEach(colIdx => {\n      if (rowIdx === rows[0]) {\n        header.push(data[0][colIdx]);\n      }\n\n      row.push(headerlessData[rowIdx][colIdx]);\n    });\n    result.push(row);\n  });\n  result.unshift(header);\n  return result;\n};\n\nconst removeMultipleIndices = (rows, indices) => {\n  return rows.filter((value, index) => !indices.includes(index));\n};\n\nconst desc = (a, b, orderBy) => {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n\n  return 0;\n};\n\nconst stableSort = (array, cmp) => {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = cmp(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n};\n\nconst getSorting = (order, orderBy) => {\n  return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n};\n\nexport { convertCSVTo2DArray, importAll, sliceData, removeMultipleIndices, desc, stableSort, getSorting };","map":{"version":3,"sources":["/home/gabe/src/point-label-sharing/frontend/src/helper.js"],"names":["convertCSVTo2DArray","csv","data","Object","keys","i","row","j","key","importAll","r","images","map","item","index","replace","sliceData","rows","cols","result","header","headerlessData","slice","forEach","rowIdx","colIdx","push","unshift","removeMultipleIndices","indices","filter","value","includes","desc","a","b","orderBy","stableSort","array","cmp","stabilizedThis","el","sort","order","getSorting"],"mappings":"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","sourcesContent":["const convertCSVTo2DArray = (csv) => {\n\n    let data = [];\n\n    data[0] = Object.keys(csv[0]);\n\n    let i = 0;\n    for (const row of csv) {\n        data[i] = [];\n        let j = 0;\n        for (const key of Object.keys(csv[0])) {\n            data[i][j] = row[key];\n            j++;\n        }\n        i++;\n    }\n\n    return data;\n};\n\nconst importAll = (r) => {\n    let images = {};\n    r.keys().map((item, index) => images[item.replace('./', '')] = r(item));\n    return images;\n};\n\nconst sliceData = (data, rows, cols) => {\n    let result = [];\n    let header = [];\n    const headerlessData = data.slice(1);\n    rows.forEach(rowIdx => {\n        let row = [];\n        cols.forEach(colIdx => {\n            if (rowIdx === rows[0]) {\n                header.push(data[0][colIdx]);\n            }\n            row.push(headerlessData[rowIdx][colIdx]);\n        });\n        result.push(row);\n    });\n    result.unshift(header);\n    return result;\n};\n\nconst removeMultipleIndices = (rows, indices) => {\n    return rows.filter((value, index) => !indices.includes(index));\n};\n\nconst desc = (a, b, orderBy) => {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n};\n\nconst stableSort = (array, cmp) => {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a, b) => {\n        const order = cmp(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map(el => el[0]);\n};\n\nconst getSorting = (order, orderBy) => {\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\n};\n\nexport {\n    convertCSVTo2DArray,\n    importAll,\n    sliceData,\n    removeMultipleIndices,\n    desc,\n    stableSort,\n    getSorting\n};"]},"metadata":{},"sourceType":"module"}
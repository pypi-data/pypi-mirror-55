{"ast":null,"code":"import axios from 'axios';\nimport { GET_FILE, GET_ALL_FILE_IDS, GET_ALL_FILES, CREATE_FILE, UPDATE_FILE } from './types';\nconst ROOT_URL = \"http://localhost:5000\";\nexport const getAllFileIds = () => async (dispatch, getState) => {\n  const res = await axios.get(\" \".concat(ROOT_URL, \"/file\"));\n  dispatch({\n    type: GET_ALL_FILE_IDS,\n    payload: {\n      fileIds: res.data,\n      response: res.statusText\n    }\n  });\n  return Promise.resolve(getState());\n};\nexport const getAllFiles = ({\n  appliedRules\n}) => async (dispatch, getState) => {\n  const res = await axios.get(\" \".concat(ROOT_URL, \"/file?appliedRules=\").concat(appliedRules));\n  let files = {};\n\n  if (res.data) {\n    for (const id of res.data) {\n      const file = await axios.get(\"\".concat(ROOT_URL, \"/file/\").concat(id));\n      files[id] = file.data;\n    }\n  }\n\n  dispatch({\n    type: GET_ALL_FILES,\n    payload: {\n      files,\n      response: res.statusText\n    }\n  });\n  return Promise.resolve(getState());\n};\nexport const getFile = ({\n  fileId\n}) => async (dispatch, getState) => {\n  const res = await axios.get(\"\".concat(ROOT_URL, \"/file/\").concat(fileId));\n  dispatch({\n    type: GET_FILE,\n    payload: {\n      file: res.data,\n      response: res.statusText\n    }\n  });\n  return Promise.resolve(getState());\n};\nexport const createFile = ({\n  fileContents\n}) => async (dispatch, getState) => {\n  const res = await axios.post(\"\".concat(ROOT_URL, \"/file\"), fileContents);\n  dispatch({\n    type: CREATE_FILE,\n    payload: {\n      response: res.data\n    }\n  });\n  return Promise.resolve(getState());\n};\nexport const updateFile = ({\n  fileId,\n  contents\n}) => async (dispatch, getState) => {\n  const res = await axios.put(\"\".concat(ROOT_URL, \"/file/\").concat(fileId), {\n    contents\n  });\n  dispatch({\n    type: UPDATE_FILE,\n    payload: {\n      file: res.data,\n      response: res.statusText\n    }\n  });\n  return Promise.resolve(getState());\n};","map":{"version":3,"sources":["/home/gabe/src/point-label-sharing/frontend/src/actions/filesActions.js"],"names":["axios","GET_FILE","GET_ALL_FILE_IDS","GET_ALL_FILES","CREATE_FILE","UPDATE_FILE","ROOT_URL","getAllFileIds","dispatch","getState","res","get","type","payload","fileIds","data","response","statusText","Promise","resolve","getAllFiles","appliedRules","files","id","file","getFile","fileId","createFile","fileContents","post","updateFile","contents","put"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    GET_FILE,\n    GET_ALL_FILE_IDS,\n    GET_ALL_FILES,\n    CREATE_FILE,\n    UPDATE_FILE\n} from './types';\n\nconst ROOT_URL = \"http://localhost:5000\";\n\nexport const getAllFileIds = () => async (dispatch, getState) => {\n    const res = await axios.get(` ${ROOT_URL}/file`);\n\n    dispatch({\n        type: GET_ALL_FILE_IDS,\n        payload: {\n            fileIds: res.data,\n            response: res.statusText\n        }\n    });\n\n    return Promise.resolve(getState());\n};\n\nexport const getAllFiles = ({ appliedRules }) => async (dispatch, getState) => {\n    const res = await axios.get(` ${ROOT_URL}/file?appliedRules=${appliedRules}`);\n\n    let files = {};\n\n    if (res.data) {\n        for (const id of res.data) {\n            const file = await axios.get(`${ROOT_URL}/file/${id}`);\n            \n            files[id] = file.data;\n        }\n    }\n\n    dispatch({\n        type: GET_ALL_FILES,\n        payload: {\n            files,\n            response: res.statusText\n        }\n    });\n\n    return Promise.resolve(getState());\n}\n\nexport const getFile = ({ fileId }) => async (dispatch, getState) => {\n    const res = await axios.get(`${ROOT_URL}/file/${fileId}`);\n\n    dispatch({\n        type: GET_FILE,\n        payload: {\n            file: res.data,\n            response: res.statusText\n        }\n    });\n\n    return Promise.resolve(getState());\n};\n\nexport const createFile = ({ fileContents }) => async (dispatch, getState) => {\n\n    const res = await axios.post(`${ROOT_URL}/file`, fileContents);\n\n    dispatch({\n        type: CREATE_FILE,\n        payload: {\n            response: res.data\n        }\n    });\n\n    return Promise.resolve(getState());\n};\n\nexport const updateFile = ({ fileId, contents }) => async (dispatch, getState) => {\n    const res = await axios.put(`${ROOT_URL}/file/${fileId}`, {\n        contents\n    });\n\n    dispatch({\n        type: UPDATE_FILE,\n        payload: {\n            file: res.data,\n            response: res.statusText\n        }\n    });\n\n    return Promise.resolve(getState());\n\n};"]},"metadata":{},"sourceType":"module"}
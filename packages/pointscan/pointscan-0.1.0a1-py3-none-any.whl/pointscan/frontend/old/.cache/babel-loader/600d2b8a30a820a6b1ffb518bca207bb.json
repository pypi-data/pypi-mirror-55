{"ast":null,"code":"import _slicedToArray from \"/home/gabe/src/point-label-sharing/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gabe/src/point-label-sharing/frontend/src/components/tool_dialogs/TrimDialogContent.js\";\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport RangeSlider from './RangeSlider';\nimport SimpleTable from './SimpleTable';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nconst TrimDialogContent = props => {\n  const previewData = props.previewData,\n        selectedCols = props.selectedCols,\n        open = props.open,\n        handleClose = props.handleClose,\n        title = props.title,\n        handleAddRule = props.handleAddRule,\n        createRule = props.createRule,\n        updateRule = props.updateRule,\n        applyMultipleRules = props.applyMultipleRules,\n        applyRule = props.applyRule,\n        fileId = props.fileId,\n        importFileFromDB = props.importFileFromDB,\n        existingData = props.existingData;\n  let lengths = [];\n  previewData.slice(1).forEach(row => {\n    row.forEach(val => {\n      lengths.push(val.length);\n    });\n  });\n  const maxSliderValue = previewData.length > 0 ? Math.max(...lengths) : 50;\n  let existingTrimRange = 0;\n\n  if (existingData) {\n    existingTrimRange = [existingData[0], existingData[1]];\n  }\n\n  const _React$useState = React.useState(existingTrimRange),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        trimRange = _React$useState2[0],\n        setTrimRange = _React$useState2[1];\n\n  function onSliderChange(range) {\n    setTrimRange(range);\n  }\n\n  function handleApplyRule(e) {\n    if (existingData) {\n      updateRule({\n        'templateId': \"trim\",\n        'ruleId': existingData.ruleId,\n        'fileId': fileId,\n        'data': {\n          'cols': selectedCols,\n          'args': [trimRange[0], maxSliderValue - trimRange[1]]\n        }\n      }).then(res => {\n        applyMultipleRules({\n          ruleIds: res.rules.ruleIds,\n          fileId: res.rules.originalFile\n        }).then(({\n          rules\n        }) => {\n          importFileFromDB(rules.response.fileId);\n        });\n      });\n    } else {\n      createRule({\n        templateId: \"trim\",\n        data: {\n          'cols': selectedCols,\n          'args': [trimRange[0], maxSliderValue - trimRange[1]]\n        }\n      }).then(res => {\n        const ruleData = {\n          ruleid: res.rules.response.ruleid,\n          template: \"trim\"\n        };\n        handleAddRule(ruleData);\n        applyRule({\n          ruleId: res.rules.response.ruleid,\n          fileId\n        }).then(res => {\n          importFileFromDB(res.rules.response.fileid);\n        });\n      });\n    }\n\n    handleClose();\n  }\n\n  function renderPreview() {\n    if (!existingData) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        color: \"textPrimary\",\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"PREVIEW:\"), selectedCols.length > 0 ? React.createElement(SimpleTable, {\n        trimRange: trimRange,\n        previewData: previewData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }) : \"First, choose the columns you would like to trim characters.\");\n    }\n\n    return \"\";\n  }\n\n  return React.createElement(Dialog, {\n    fullWidth: true,\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, title), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    color: \"textPrimary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Trim the first n characters from the left and right using the slider.\"), React.createElement(RangeSlider, {\n    minValue: 0,\n    maxValue: maxSliderValue,\n    defaultValue: trimRange,\n    onSliderChange: onSliderChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }), renderPreview()), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    onClick: handleApplyRule,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, existingData ? \"Update Rule\" : \"Apply Rule\")));\n};\n\nconst mapStateToProps = ({\n  rules\n}) => {\n  return {\n    rules\n  };\n};\n\nexport default connect(mapStateToProps, actions)(TrimDialogContent);","map":{"version":3,"sources":["/home/gabe/src/point-label-sharing/frontend/src/components/tool_dialogs/TrimDialogContent.js"],"names":["React","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","RangeSlider","SimpleTable","connect","actions","TrimDialogContent","props","previewData","selectedCols","open","handleClose","title","handleAddRule","createRule","updateRule","applyMultipleRules","applyRule","fileId","importFileFromDB","existingData","lengths","slice","forEach","row","val","push","length","maxSliderValue","Math","max","existingTrimRange","useState","trimRange","setTrimRange","onSliderChange","range","handleApplyRule","e","ruleId","then","res","ruleIds","rules","originalFile","response","templateId","data","ruleData","ruleid","template","fileid","renderPreview","mapStateToProps"],"mappings":";;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,eAAzB;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAAA,QACzBC,WADyB,GAC6ID,KAD7I,CACzBC,WADyB;AAAA,QACZC,YADY,GAC6IF,KAD7I,CACZE,YADY;AAAA,QACEC,IADF,GAC6IH,KAD7I,CACEG,IADF;AAAA,QACQC,WADR,GAC6IJ,KAD7I,CACQI,WADR;AAAA,QACqBC,KADrB,GAC6IL,KAD7I,CACqBK,KADrB;AAAA,QAC4BC,aAD5B,GAC6IN,KAD7I,CAC4BM,aAD5B;AAAA,QAC2CC,UAD3C,GAC6IP,KAD7I,CAC2CO,UAD3C;AAAA,QACuDC,UADvD,GAC6IR,KAD7I,CACuDQ,UADvD;AAAA,QACmEC,kBADnE,GAC6IT,KAD7I,CACmES,kBADnE;AAAA,QACuFC,SADvF,GAC6IV,KAD7I,CACuFU,SADvF;AAAA,QACkGC,MADlG,GAC6IX,KAD7I,CACkGW,MADlG;AAAA,QAC0GC,gBAD1G,GAC6IZ,KAD7I,CAC0GY,gBAD1G;AAAA,QAC4HC,YAD5H,GAC6Ib,KAD7I,CAC4Ha,YAD5H;AAGjC,MAAIC,OAAO,GAAG,EAAd;AAEAb,EAAAA,WAAW,CAACc,KAAZ,CAAkB,CAAlB,EAAqBC,OAArB,CAA6BC,GAAG,IAAI;AAChCA,IAAAA,GAAG,CAACD,OAAJ,CAAYE,GAAG,IAAI;AACfJ,MAAAA,OAAO,CAACK,IAAR,CAAaD,GAAG,CAACE,MAAjB;AACH,KAFD;AAGH,GAJD;AAMA,QAAMC,cAAc,GAAGpB,WAAW,CAACmB,MAAZ,GAAqB,CAArB,GAAyBE,IAAI,CAACC,GAAL,CAAS,GAAGT,OAAZ,CAAzB,GAAgD,EAAvE;AAEA,MAAIU,iBAAiB,GAAG,CAAxB;;AAEA,MAAIX,YAAJ,EAAkB;AACdW,IAAAA,iBAAiB,GAAG,CAACX,YAAY,CAAC,CAAD,CAAb,EAAkBA,YAAY,CAAC,CAAD,CAA9B,CAApB;AACH;;AAjBgC,0BAkBCzB,KAAK,CAACqC,QAAN,CAAeD,iBAAf,CAlBD;AAAA;AAAA,QAkB1BE,SAlB0B;AAAA,QAkBfC,YAlBe;;AAoBjC,WAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3BF,IAAAA,YAAY,CAACE,KAAD,CAAZ;AACH;;AAED,WAASC,eAAT,CAAyBC,CAAzB,EAA4B;AACxB,QAAIlB,YAAJ,EAAkB;AACdL,MAAAA,UAAU,CAAC;AACP,sBAAc,MADP;AAEP,kBAAUK,YAAY,CAACmB,MAFhB;AAGP,kBAAUrB,MAHH;AAIP,gBAAQ;AACJ,kBAAQT,YADJ;AAEJ,kBAAQ,CAACwB,SAAS,CAAC,CAAD,CAAV,EAAeL,cAAc,GAAGK,SAAS,CAAC,CAAD,CAAzC;AAFJ;AAJD,OAAD,CAAV,CAQGO,IARH,CAQQC,GAAG,IAAI;AACXzB,QAAAA,kBAAkB,CAAC;AACf0B,UAAAA,OAAO,EAAED,GAAG,CAACE,KAAJ,CAAUD,OADJ;AAEfxB,UAAAA,MAAM,EAAEuB,GAAG,CAACE,KAAJ,CAAUC;AAFH,SAAD,CAAlB,CAGGJ,IAHH,CAGQ,CAAC;AAAEG,UAAAA;AAAF,SAAD,KAAe;AACnBxB,UAAAA,gBAAgB,CAACwB,KAAK,CAACE,QAAN,CAAe3B,MAAhB,CAAhB;AACH,SALD;AAMH,OAfD;AAgBH,KAjBD,MAiBO;AACHJ,MAAAA,UAAU,CAAC;AACPgC,QAAAA,UAAU,EAAE,MADL;AAEPC,QAAAA,IAAI,EAAE;AACF,kBAAQtC,YADN;AAEF,kBAAQ,CAACwB,SAAS,CAAC,CAAD,CAAV,EAAeL,cAAc,GAAGK,SAAS,CAAC,CAAD,CAAzC;AAFN;AAFC,OAAD,CAAV,CAMGO,IANH,CAMQC,GAAG,IAAI;AACX,cAAMO,QAAQ,GAAG;AACbC,UAAAA,MAAM,EAAER,GAAG,CAACE,KAAJ,CAAUE,QAAV,CAAmBI,MADd;AAEbC,UAAAA,QAAQ,EAAE;AAFG,SAAjB;AAKArC,QAAAA,aAAa,CAACmC,QAAD,CAAb;AAEA/B,QAAAA,SAAS,CAAC;AACNsB,UAAAA,MAAM,EAAEE,GAAG,CAACE,KAAJ,CAAUE,QAAV,CAAmBI,MADrB;AAEN/B,UAAAA;AAFM,SAAD,CAAT,CAGGsB,IAHH,CAGQC,GAAG,IAAI;AACXtB,UAAAA,gBAAgB,CAACsB,GAAG,CAACE,KAAJ,CAAUE,QAAV,CAAmBM,MAApB,CAAhB;AACH,SALD;AAMH,OApBD;AAqBH;;AAEDxC,IAAAA,WAAW;AACd;;AAED,WAASyC,aAAT,GAAyB;AACrB,QAAI,CAAChC,YAAL,EAAmB;AACf,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,iBAAD;AAAmB,QAAA,KAAK,EAAC,aAAzB;AAAuC,QAAA,OAAO,EAAC,IAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,EAKMX,YAAY,CAACkB,MAAb,GAAsB,CAAtB,GAA0B,oBAAC,WAAD;AAAa,QAAA,SAAS,EAAEM,SAAxB;AAAmC,QAAA,WAAW,EAAEzB,WAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA1B,GAA4F,8DALlG,CADJ;AASH;;AAED,WAAO,EAAP;AACH;;AAED,SAEI,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAE,IAAnB;AAAyB,IAAA,IAAI,EAAEE,IAA/B;AAAqC,IAAA,OAAO,EAAEC,WAA9C;AAA2D,uBAAgB,mBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,WAAD;AAAa,IAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqCC,KAArC,CADF,EAEI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,aAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EADJ,EAII,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAE,CAAvB;AAA0B,IAAA,QAAQ,EAAEgB,cAApC;AAAoD,IAAA,YAAY,EAAEK,SAAlE;AAA6E,IAAA,cAAc,EAAEE,cAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKKiB,aAAa,EALlB,CAFJ,EASI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEzC,WAAjB;AAA8B,IAAA,KAAK,EAAC,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAII,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE0B,eAAjB;AAAkC,IAAA,KAAK,EAAC,SAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMjB,YAAY,GAAG,aAAH,GAAmB,YADrC,CAJJ,CATJ,CAFJ;AAqBH,CA1GD;;AA4GA,MAAMiC,eAAe,GAAG,CAAC;AAAEV,EAAAA;AAAF,CAAD,KAAe;AACnC,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH,CAFD;;AAIA,eAAevC,OAAO,CAACiD,eAAD,EAAkBhD,OAAlB,CAAP,CAAkCC,iBAAlC,CAAf","sourcesContent":["\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport RangeSlider from './RangeSlider';\nimport SimpleTable from './SimpleTable';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nconst TrimDialogContent = (props) => {\n    const { previewData, selectedCols, open, handleClose, title, handleAddRule, createRule, updateRule, applyMultipleRules, applyRule, fileId, importFileFromDB, existingData } = props;\n\n    let lengths = [];\n\n    previewData.slice(1).forEach(row => {\n        row.forEach(val => {\n            lengths.push(val.length);\n        });\n    });\n\n    const maxSliderValue = previewData.length > 0 ? Math.max(...lengths) : 50;\n\n    let existingTrimRange = 0;\n\n    if (existingData) {\n        existingTrimRange = [existingData[0], existingData[1]];\n    }\n    const [trimRange, setTrimRange] = React.useState(existingTrimRange);\n\n    function onSliderChange(range) {\n        setTrimRange(range);\n    }\n\n    function handleApplyRule(e) {\n        if (existingData) {\n            updateRule({\n                'templateId': \"trim\",\n                'ruleId': existingData.ruleId,\n                'fileId': fileId,\n                'data': {\n                    'cols': selectedCols,\n                    'args': [trimRange[0], maxSliderValue - trimRange[1]]\n                }\n            }).then(res => {\n                applyMultipleRules({\n                    ruleIds: res.rules.ruleIds,\n                    fileId: res.rules.originalFile\n                }).then(({ rules }) => {\n                    importFileFromDB(rules.response.fileId);\n                });\n            });\n        } else {\n            createRule({\n                templateId: \"trim\",\n                data: {\n                    'cols': selectedCols,\n                    'args': [trimRange[0], maxSliderValue - trimRange[1]]\n                }\n            }).then(res => {\n                const ruleData = {\n                    ruleid: res.rules.response.ruleid,\n                    template: \"trim\"\n                };\n                \n                handleAddRule(ruleData);\n\n                applyRule({\n                    ruleId: res.rules.response.ruleid,\n                    fileId\n                }).then(res => {\n                    importFileFromDB(res.rules.response.fileid);\n                });\n            });\n        }\n\n        handleClose();\n    }\n\n    function renderPreview() {\n        if (!existingData) {\n            return (\n                <div>\n                    <DialogContentText color=\"textPrimary\" variant=\"h6\">\n                    PREVIEW:\n\n                    </DialogContentText>\n                    { selectedCols.length > 0 ? <SimpleTable trimRange={trimRange} previewData={previewData} /> : \"First, choose the columns you would like to trim characters.\"} \n                </div>\n            );\n        }\n\n        return \"\";\n    }\n\n    return (\n\n        <Dialog fullWidth={true} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n                <DialogContentText color=\"textPrimary\">\n                Trim the first n characters from the left and right using the slider.\n                </DialogContentText>\n                <RangeSlider minValue={0} maxValue={maxSliderValue} defaultValue={trimRange} onSliderChange={onSliderChange} />\n                {renderPreview()}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={handleApplyRule} color=\"primary\">\n                    { existingData ? \"Update Rule\" : \"Apply Rule\" }\n                </Button>\n            </DialogActions>\n        </Dialog>        \n    );\n}\n\nconst mapStateToProps = ({ rules }) => {\n    return { rules };\n}\n  \nexport default connect(mapStateToProps, actions)(TrimDialogContent);"]},"metadata":{},"sourceType":"module"}
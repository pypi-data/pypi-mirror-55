{"ast":null,"code":"import _slicedToArray from \"/home/gabe/src/point-label-sharing/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gabe/src/point-label-sharing/frontend/src/components/tool_dialogs/RemoveDialogContent.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport SimpleTable from './SimpleTable';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap'\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    marginBottom: theme.spacing(2)\n  },\n  dense: {\n    marginTop: theme.spacing(1)\n  },\n  menu: {\n    width: 200\n  },\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\n\nconst RemoveDialogContent = props => {\n  const previewData = props.previewData,\n        selectedCols = props.selectedCols,\n        open = props.open,\n        handleClose = props.handleClose,\n        title = props.title,\n        createRule = props.createRule,\n        handleAddRule = props.handleAddRule,\n        applyRule = props.applyRule,\n        applyMultipleRules = props.applyMultipleRules,\n        updateRule = props.updateRule,\n        fileId = props.fileId,\n        importFileFromDB = props.importFileFromDB,\n        existingData = props.existingData;\n  const classes = useStyles();\n  let existingWordToFind = \"\";\n\n  if (existingData) {\n    existingWordToFind = existingData[0];\n  }\n\n  const _React$useState = React.useState(existingWordToFind),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        wordToFind = _React$useState2[0],\n        setWordToFind = _React$useState2[1];\n\n  function handleApplyRule(e) {\n    if (existingData) {\n      updateRule({\n        'templateId': \"remove\",\n        'ruleId': existingData.ruleId,\n        'fileId': fileId,\n        'data': {\n          'cols': selectedCols,\n          'args': [wordToFind]\n        }\n      }).then(res => {\n        applyMultipleRules({\n          ruleIds: res.rules.ruleIds,\n          fileId: res.rules.originalFile\n        }).then(({\n          rules\n        }) => {\n          importFileFromDB(rules.response.fileId);\n        });\n      });\n    } else {\n      createRule({\n        templateId: \"remove\",\n        data: {\n          'cols': selectedCols,\n          'args': [wordToFind]\n        }\n      }).then(res => {\n        const ruleData = {\n          ruleid: res.rules.response.ruleid,\n          template: \"remove\"\n        };\n        handleAddRule(ruleData);\n        applyRule({\n          ruleId: res.rules.response.ruleid,\n          fileId\n        }).then(res => {\n          importFileFromDB(res.rules.response.fileid);\n        });\n      });\n    }\n\n    handleClose();\n  }\n\n  function renderPreview() {\n    if (!existingData) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(DialogContentText, {\n        color: \"textPrimary\",\n        variant: \"h6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"PREVIEW:\"), selectedCols.length > 0 ? React.createElement(SimpleTable, {\n        wordToFind: wordToFind,\n        previewData: previewData,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }) : \"First, choose the columns you would like to remove characters.\");\n    }\n\n    return \"\";\n  }\n\n  return React.createElement(Dialog, {\n    fullWidth: true,\n    open: open,\n    onClose: handleClose,\n    \"aria-labelledby\": \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    id: \"form-dialog-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, title), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(DialogContentText, {\n    color: \"textPrimary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Remove all occurrences of the specified phrases.\"), React.createElement(\"form\", {\n    className: classes.container,\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"outlined-dense\",\n    label: \"Find\",\n    className: clsx(classes.textField, classes.dense),\n    margin: \"dense\",\n    variant: \"outlined\",\n    value: wordToFind,\n    onChange: e => setWordToFind(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }))), renderPreview()), React.createElement(DialogActions, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: handleClose,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(Button, {\n    onClick: handleApplyRule,\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, existingData ? \"Update Rule\" : \"Apply Rule\")));\n};\n\nexport default connect(null, actions)(RemoveDialogContent);","map":{"version":3,"sources":["/home/gabe/src/point-label-sharing/frontend/src/components/tool_dialogs/RemoveDialogContent.js"],"names":["React","clsx","makeStyles","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","SimpleTable","connect","actions","useStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","marginBottom","dense","marginTop","menu","width","margin","RemoveDialogContent","props","previewData","selectedCols","open","handleClose","title","createRule","handleAddRule","applyRule","applyMultipleRules","updateRule","fileId","importFileFromDB","existingData","classes","existingWordToFind","useState","wordToFind","setWordToFind","handleApplyRule","e","ruleId","then","res","ruleIds","rules","originalFile","response","templateId","data","ruleData","ruleid","template","fileid","renderPreview","length","target","value"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport SimpleTable from './SimpleTable';\nimport { connect } from 'react-redux';\nimport * as actions from '../../actions';\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      marginBottom: theme.spacing(2)\n    },\n    dense: {\n      marginTop: theme.spacing(1),\n    },\n    menu: {\n      width: 200,\n    },\n    margin: {\n        margin: theme.spacing(1),\n    }\n  }));\n\nconst RemoveDialogContent = (props) => {\n    const { previewData, selectedCols, open, handleClose, title, createRule,  handleAddRule, applyRule, applyMultipleRules, updateRule, fileId, importFileFromDB, existingData  } = props;\n    const classes = useStyles();\n\n    let existingWordToFind = \"\";\n\n    if (existingData) {\n        existingWordToFind = existingData[0];\n    }\n\n    const [wordToFind, setWordToFind] = React.useState(existingWordToFind);\n\n    function handleApplyRule(e) {\n        if (existingData) {\n            updateRule({\n                'templateId': \"remove\",\n                'ruleId': existingData.ruleId,\n                'fileId': fileId,\n                'data': {\n                    'cols': selectedCols,\n                    'args': [wordToFind]\n                }\n            }).then(res => {\n                applyMultipleRules({\n                    ruleIds: res.rules.ruleIds,\n                    fileId: res.rules.originalFile\n                }).then(({ rules }) => {\n                    importFileFromDB(rules.response.fileId);\n                });\n            });\n        } else {\n            createRule({\n                templateId: \"remove\",\n                data: {\n                    'cols': selectedCols,\n                    'args': [wordToFind]\n                }\n            }).then(res => {\n                const ruleData = {\n                    ruleid: res.rules.response.ruleid,\n                    template: \"remove\"\n                };\n\n                handleAddRule(ruleData);\n\n                applyRule({\n                    ruleId: res.rules.response.ruleid,\n                    fileId\n                }).then(res => {\n                    importFileFromDB(res.rules.response.fileid);\n                });\n            });\n        }\n\n        handleClose();\n\n    }\n\n    function renderPreview() {\n        if (!existingData) {\n            return (\n                <div>\n                    <DialogContentText color=\"textPrimary\" variant=\"h6\">\n                    PREVIEW:\n\n                    </DialogContentText>\n                    { selectedCols.length > 0 ? <SimpleTable wordToFind={wordToFind} previewData={previewData} /> : \"First, choose the columns you would like to remove characters.\"} \n                </div>\n            );\n        }\n\n        return \"\";\n    }\n   \n    return (\n\n        <Dialog fullWidth={true} open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">{title}</DialogTitle>\n            <DialogContent>\n                <DialogContentText color=\"textPrimary\">\n                Remove all occurrences of the specified phrases.\n                </DialogContentText>\n                <form className={classes.container} noValidate autoComplete=\"off\">\n                    <div>\n                        <TextField\n                            id=\"outlined-dense\"\n                            label=\"Find\"\n                            className={clsx(classes.textField, classes.dense)}\n                            margin=\"dense\"\n                            variant=\"outlined\"\n                            value={wordToFind}\n                            onChange={(e) => setWordToFind(e.target.value)}\n                        />\n                    </div>\n                </form>\n                {renderPreview()}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={handleClose} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={handleApplyRule} color=\"primary\">\n                    { existingData ? \"Update Rule\" : \"Apply Rule\" }\n                </Button>\n            </DialogActions>\n        </Dialog>        \n    );\n}\n\nexport default connect(null, actions)(RemoveDialogContent);"]},"metadata":{},"sourceType":"module"}
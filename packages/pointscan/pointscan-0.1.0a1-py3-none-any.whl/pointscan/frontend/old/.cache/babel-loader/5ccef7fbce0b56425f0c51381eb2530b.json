{"ast":null,"code":"var _jsxFileName = \"/home/gabe/src/point-label-sharing/frontend/src/components/Dashboard.js\";\nimport React, { Component } from 'react';\nimport MiniDrawer from './MiniDrawer';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport Papa from 'papaparse';\nimport { convertCSVTo2DArray } from '../helper'; //const datasets = importAll(require.context('../datasets/davis'));\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      fileId: \"\",\n      appliedRules: null\n    };\n    this.importFileFromDB = this.importFileFromDB.bind(this);\n  }\n\n  render() {\n    const files = this.props.files;\n    const csvData = files.file ? files.file.contents : [];\n    const csvName = files.file ? files.file.name : [];\n    return React.createElement(MiniDrawer, {\n      fileId: this.state.fileId,\n      csvData: csvData,\n      csvName: csvName,\n      uploadFile: file => this.uploadFile(file),\n      importFileFromDB: this.importFileFromDB,\n      appliedRules: this.state.appliedRules || [],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29\n      },\n      __self: this\n    });\n  }\n\n  uploadFile(file) {\n    this.getCSVData(file, csvData => {\n      this.props.createFile({\n        fileContents: {\n          name: file.name,\n          contents: convertCSVTo2DArray(csvData)\n        }\n      }).then(res => {\n        this.importFileFromDB(res.files.response.fileid);\n      });\n    }); // for(const dsName of Object.keys(datasets).slice(1, 6)) {\n    //     if (dsName) {\n    //         this.getCSVData(datasets[dsName], (csvData) => {\n    //             this.props.createFile({\n    //                 fileContents: {\n    //                     name: dsName,\n    //                     contents: convertCSVTo2DArray(csvData)\n    //                 }\n    //             });\n    //         });\n    //     }\n    // }\n  }\n\n  getCSVData(file, callback) {\n    Papa.parse(file, {\n      download: true,\n      complete: results => {\n        if (results && results.data) {\n          callback(results.data);\n        }\n      }\n    });\n  }\n\n  importFileFromDB(fileId) {\n    this.props.getRulesByFile({\n      fileId\n    }).then(res => {\n      this.props.getFile({\n        fileId\n      }).then(fileRes => {\n        this.props.getAllFiles({\n          appliedRules: true\n        }).then(res2 => {\n          this.setState({\n            fileId,\n            appliedRules: res.rules.rules\n          });\n        });\n      });\n    });\n  }\n\n}\n\nconst mapStateToProps = ({\n  rules,\n  files\n}) => {\n  return {\n    rules,\n    files\n  };\n};\n\nexport default connect(mapStateToProps, actions)(Dashboard);","map":{"version":3,"sources":["/home/gabe/src/point-label-sharing/frontend/src/components/Dashboard.js"],"names":["React","Component","MiniDrawer","connect","actions","Papa","convertCSVTo2DArray","Dashboard","constructor","props","state","fileId","appliedRules","importFileFromDB","bind","render","files","csvData","file","contents","csvName","name","uploadFile","getCSVData","createFile","fileContents","then","res","response","fileid","callback","parse","download","complete","results","data","getRulesByFile","getFile","fileRes","getAllFiles","res2","setState","rules","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,YAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SACIC,mBADJ,QAEO,WAFP,C,CAGA;;AAEA,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AAC9BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,EADC;AAETC,MAAAA,YAAY,EAAE;AAFL,KAAb;AAKA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAxB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AAAA,UACGC,KADH,GACa,KAAKP,KADlB,CACGO,KADH;AAGL,UAAMC,OAAO,GAAGD,KAAK,CAACE,IAAN,GAAaF,KAAK,CAACE,IAAN,CAAWC,QAAxB,GAAmC,EAAnD;AACA,UAAMC,OAAO,GAAGJ,KAAK,CAACE,IAAN,GAAaF,KAAK,CAACE,IAAN,CAAWG,IAAxB,GAA+B,EAA/C;AAEA,WAAO,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAE,KAAKX,KAAL,CAAWC,MAA/B;AAAuC,MAAA,OAAO,EAAEM,OAAhD;AAAyD,MAAA,OAAO,EAAEG,OAAlE;AAA2E,MAAA,UAAU,EAAGF,IAAD,IAAU,KAAKI,UAAL,CAAgBJ,IAAhB,CAAjG;AAAwH,MAAA,gBAAgB,EAAE,KAAKL,gBAA/I;AAAiK,MAAA,YAAY,EAAE,KAAKH,KAAL,CAAWE,YAAX,IAA2B,EAA1M;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACH;;AAEDU,EAAAA,UAAU,CAACJ,IAAD,EAAO;AAEb,SAAKK,UAAL,CAAgBL,IAAhB,EAAuBD,OAAD,IAAa;AAC/B,WAAKR,KAAL,CAAWe,UAAX,CAAsB;AAClBC,QAAAA,YAAY,EAAE;AACVJ,UAAAA,IAAI,EAAEH,IAAI,CAACG,IADD;AAEVF,UAAAA,QAAQ,EAAEb,mBAAmB,CAACW,OAAD;AAFnB;AADI,OAAtB,EAKGS,IALH,CAKQC,GAAG,IAAI;AACX,aAAKd,gBAAL,CAAsBc,GAAG,CAACX,KAAJ,CAAUY,QAAV,CAAmBC,MAAzC;AACH,OAPD;AAQH,KATD,EAFa,CAYb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDN,EAAAA,UAAU,CAACL,IAAD,EAAOY,QAAP,EAAiB;AAEvBzB,IAAAA,IAAI,CAAC0B,KAAL,CAAWb,IAAX,EAAiB;AACbc,MAAAA,QAAQ,EAAE,IADG;AAEbC,MAAAA,QAAQ,EAAEC,OAAO,IAAI;AACjB,YAAIA,OAAO,IAAIA,OAAO,CAACC,IAAvB,EAA6B;AACzBL,UAAAA,QAAQ,CAACI,OAAO,CAACC,IAAT,CAAR;AACH;AACJ;AANY,KAAjB;AAQH;;AAEDtB,EAAAA,gBAAgB,CAACF,MAAD,EAAS;AACrB,SAAKF,KAAL,CAAW2B,cAAX,CAA0B;AAAEzB,MAAAA;AAAF,KAA1B,EAAsCe,IAAtC,CAA2CC,GAAG,IAAI;AAC9C,WAAKlB,KAAL,CAAW4B,OAAX,CAAmB;AAAE1B,QAAAA;AAAF,OAAnB,EAA+Be,IAA/B,CAAoCY,OAAO,IAAI;AAC3C,aAAK7B,KAAL,CAAW8B,WAAX,CAAuB;AAAE3B,UAAAA,YAAY,EAAE;AAAhB,SAAvB,EAA+Cc,IAA/C,CAAoDc,IAAI,IAAI;AACxD,eAAKC,QAAL,CAAc;AAAE9B,YAAAA,MAAF;AAAUC,YAAAA,YAAY,EAAEe,GAAG,CAACe,KAAJ,CAAUA;AAAlC,WAAd;AACH,SAFD;AAGH,OAJD;AAKH,KAND;AAOH;;AAnE6B;;AAuElC,MAAMC,eAAe,GAAG,CAAC;AAAED,EAAAA,KAAF;AAAS1B,EAAAA;AAAT,CAAD,KAAsB;AAC1C,SAAO;AAAE0B,IAAAA,KAAF;AAAS1B,IAAAA;AAAT,GAAP;AACH,CAFD;;AAIA,eAAeb,OAAO,CAACwC,eAAD,EAAkBvC,OAAlB,CAAP,CAAkCG,SAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport MiniDrawer from './MiniDrawer';\nimport { connect } from 'react-redux';\nimport * as actions from '../actions';\nimport Papa from 'papaparse';\nimport {\n    convertCSVTo2DArray\n} from '../helper';\n//const datasets = importAll(require.context('../datasets/davis'));\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fileId: \"\",\n            appliedRules: null\n        };\n      \n        this.importFileFromDB = this.importFileFromDB.bind(this);\n    }\n\n    render() {\n        const { files } = this.props;\n\n        const csvData = files.file ? files.file.contents : [];\n        const csvName = files.file ? files.file.name : [];\n\n        return <MiniDrawer fileId={this.state.fileId} csvData={csvData} csvName={csvName} uploadFile={(file) => this.uploadFile(file)} importFileFromDB={this.importFileFromDB} appliedRules={this.state.appliedRules || []} />;\n    }\n\n    uploadFile(file) {\n        \n        this.getCSVData(file, (csvData) => {\n            this.props.createFile({\n                fileContents: {\n                    name: file.name,\n                    contents: convertCSVTo2DArray(csvData)\n                }\n            }).then(res => {\n                this.importFileFromDB(res.files.response.fileid)\n            });\n        });\n        // for(const dsName of Object.keys(datasets).slice(1, 6)) {\n        //     if (dsName) {\n        //         this.getCSVData(datasets[dsName], (csvData) => {\n        //             this.props.createFile({\n        //                 fileContents: {\n        //                     name: dsName,\n        //                     contents: convertCSVTo2DArray(csvData)\n        //                 }\n        //             });\n        //         });\n        //     }\n        // }\n    }\n    \n    getCSVData(file, callback) {\n    \n        Papa.parse(file, {\n            download: true,\n            complete: results => {\n                if (results && results.data) {\n                    callback(results.data);\n                }\n            }\n        });\n    }    \n\n    importFileFromDB(fileId) {\n        this.props.getRulesByFile({ fileId }).then(res => {\n            this.props.getFile({ fileId }).then(fileRes => {\n                this.props.getAllFiles({ appliedRules: true }).then(res2 => {\n                    this.setState({ fileId, appliedRules: res.rules.rules });\n                });\n            });\n        });\n    }\n\n}\n\nconst mapStateToProps = ({ rules, files }) => {\n    return { rules, files };\n}\n\nexport default connect(mapStateToProps, actions)(Dashboard);"]},"metadata":{},"sourceType":"module"}
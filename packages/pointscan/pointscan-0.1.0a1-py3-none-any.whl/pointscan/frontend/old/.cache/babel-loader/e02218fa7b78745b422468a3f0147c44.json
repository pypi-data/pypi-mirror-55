{"ast":null,"code":"import _defineProperty from \"/home/gabe/src/point-label-sharing/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nimport { GET_RULE, GET_ALL_RULE_IDS, GET_ALL_RULES, GET_RULES_BY_FILE, CREATE_RULE, APPLY_RULE, DELETE_RULE, UPDATE_RULE } from './types';\nconst ROOT_URL = \"http://localhost:5000\";\nexport const getAllRuleIds = () => async dispatch => {\n  const res = await axios.get(\" \".concat(ROOT_URL, \"/rule\"));\n  dispatch({\n    type: GET_ALL_RULE_IDS,\n    payload: {\n      ruleIds: res.data,\n      response: res.statusText\n    }\n  });\n};\nexport const getAllRules = () => async dispatch => {\n  const res = await axios.get(\" \".concat(ROOT_URL, \"/rule\"));\n  let rules = [];\n\n  if (res.data) {\n    for (const id of res.data) {\n      const rule = await axios.get(\" \".concat(ROOT_URL, \"/rule/\").concat(id));\n      rules.push(_objectSpread({}, rule.data, {\n        \"ruleid\": id\n      }));\n      console.log(_objectSpread({}, rule.data, {\n        \"ruleid\": id\n      }));\n    }\n  }\n\n  dispatch({\n    type: GET_ALL_RULES,\n    payload: {\n      rules,\n      response: res.statusText\n    }\n  });\n};\nexport const getRulesByFile = ({\n  fileId\n}) => async (dispatch, getState) => {\n  const res = await axios.get(\" \".concat(ROOT_URL, \"/file/\").concat(fileId));\n  let rules = [];\n\n  if (res.data) {\n    if (res.data.applied && res.data.applied.length > 0) {\n      for (const id of res.data.applied) {\n        const rule = await axios.get(\" \".concat(ROOT_URL, \"/rule/\").concat(id));\n        rules.push(_objectSpread({}, rule.data, {\n          \"ruleid\": id\n        }));\n        console.log(_objectSpread({}, rule.data, {\n          \"ruleid\": id\n        }));\n      }\n    }\n  }\n\n  dispatch({\n    type: GET_RULES_BY_FILE,\n    payload: {\n      rules,\n      response: res.statusText\n    }\n  });\n  return Promise.resolve(getState());\n};\nexport const updateRule = ({\n  templateId,\n  fileId,\n  ruleId,\n  data\n}) => async (dispatch, getState) => {\n  const res = await axios.put(\"\".concat(ROOT_URL, \"/rule/\").concat(ruleId), _objectSpread({}, data, {\n    template: templateId,\n    fileId\n  }));\n  let payload = {};\n\n  if (res.data) {\n    payload[\"fileId\"] = res.data.fileid;\n    payload[\"ruleIds\"] = res.data.ruleids;\n    payload[\"originalFile\"] = res.data.originalFile;\n  }\n\n  dispatch({\n    type: UPDATE_RULE,\n    payload,\n    response: res.statusText\n  });\n  return Promise.resolve(getState());\n};\nexport const getRule = ({\n  ruleId\n}) => async (dispatch, getState) => {\n  const res = await axios.get(\"\".concat(ROOT_URL, \"/rule/\").concat(ruleId));\n  dispatch({\n    type: GET_RULE,\n    payload: {\n      rule: res.data,\n      response: \"\"\n    }\n  });\n  return Promise.resolve(getState());\n};\nexport const createRule = ({\n  templateId,\n  data\n}) => async (dispatch, getState) => {\n  const res = await axios.post(\"\".concat(ROOT_URL, \"/rule/\").concat(templateId), data);\n  dispatch({\n    type: CREATE_RULE,\n    payload: {\n      response: res.data\n    }\n  });\n  return Promise.resolve(getState());\n};\nexport const applyRule = ({\n  fileId,\n  ruleId\n}) => async (dispatch, getState) => {\n  const res = await axios.post(\"\".concat(ROOT_URL, \"/apply/\").concat(fileId, \"/\").concat(ruleId));\n  dispatch({\n    type: APPLY_RULE,\n    payload: {\n      response: res.data\n    }\n  });\n  return Promise.resolve(getState());\n};\nexport const applyMultipleRules = ({\n  fileId,\n  ruleIds\n}) => async (dispatch, getState) => {\n  let newFileId = fileId;\n\n  if (ruleIds && ruleIds.length > 0) {\n    const res = await axios.post(\"\".concat(ROOT_URL, \"/apply/\").concat(fileId, \"/\").concat(ruleIds[0]));\n\n    if (res.data) {\n      newFileId = res.data.fileid;\n\n      for (const ruleId of ruleIds.slice(1)) {\n        await axios.post(\"\".concat(ROOT_URL, \"/apply/\").concat(newFileId, \"/\").concat(ruleId));\n      }\n    }\n  }\n\n  dispatch({\n    type: APPLY_RULE,\n    payload: {\n      response: {\n        fileId: newFileId\n      }\n    }\n  });\n  return Promise.resolve(getState());\n};\nexport const deleteRule = ({\n  fileId,\n  ruleId\n}) => async (dispatch, getState) => {\n  const res = await axios.delete(\"\".concat(ROOT_URL, \"/delete/\").concat(fileId, \"/\").concat(ruleId));\n  let payload = {};\n\n  if (res.data) {\n    payload[\"fileId\"] = res.data.fileid;\n    payload[\"ruleIds\"] = res.data.ruleids;\n    payload[\"originalFile\"] = res.data.originalFile;\n  }\n\n  dispatch({\n    type: DELETE_RULE,\n    payload,\n    response: res.statusText\n  });\n  return Promise.resolve(getState());\n};","map":{"version":3,"sources":["/home/gabe/src/point-label-sharing/frontend/src/actions/rulesActions.js"],"names":["axios","GET_RULE","GET_ALL_RULE_IDS","GET_ALL_RULES","GET_RULES_BY_FILE","CREATE_RULE","APPLY_RULE","DELETE_RULE","UPDATE_RULE","ROOT_URL","getAllRuleIds","dispatch","res","get","type","payload","ruleIds","data","response","statusText","getAllRules","rules","id","rule","push","console","log","getRulesByFile","fileId","getState","applied","length","Promise","resolve","updateRule","templateId","ruleId","put","template","fileid","ruleids","originalFile","getRule","createRule","post","applyRule","applyMultipleRules","newFileId","slice","deleteRule","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n    GET_RULE,\n    GET_ALL_RULE_IDS,\n    GET_ALL_RULES,\n    GET_RULES_BY_FILE,\n    CREATE_RULE,\n    APPLY_RULE,\n    DELETE_RULE,\n    UPDATE_RULE\n} from './types';\n\nconst ROOT_URL = \"http://localhost:5000\";\n\nexport const getAllRuleIds = () => async (dispatch) => {\n    const res = await axios.get(` ${ROOT_URL}/rule`);\n\n    dispatch({\n        type: GET_ALL_RULE_IDS,\n        payload: {\n            ruleIds: res.data,\n            response: res.statusText\n        }\n    });\n};\n\nexport const getAllRules = () => async (dispatch) => {\n    const res = await axios.get(` ${ROOT_URL}/rule`);\n\n    let rules = [];\n\n    if (res.data) {\n        for (const id of res.data) {\n            const rule = await axios.get(` ${ROOT_URL}/rule/${id}`);\n            \n            rules.push({...rule.data, \"ruleid\": id });\n\n            console.log({...rule.data, \"ruleid\": id });\n        }\n    }\n\n    dispatch({\n        type: GET_ALL_RULES,\n        payload: {\n            rules,\n            response: res.statusText\n        }\n    });\n};\n\nexport const getRulesByFile = ({ fileId }) => async (dispatch, getState) => {\n    const res = await axios.get(` ${ROOT_URL}/file/${fileId}`);\n\n    let rules = [];\n\n    if (res.data) {\n        if (res.data.applied && res.data.applied.length > 0) {\n            for (const id of res.data.applied) {\n                const rule = await axios.get(` ${ROOT_URL}/rule/${id}`);\n                \n                rules.push({...rule.data, \"ruleid\": id });\n    \n                console.log({...rule.data, \"ruleid\": id });\n            }\n        } \n    }\n\n    dispatch({\n        type: GET_RULES_BY_FILE,\n        payload: {\n            rules,\n            response: res.statusText\n        }\n    });\n\n    return Promise.resolve(getState());\n};\n\nexport const updateRule = ({ templateId, fileId, ruleId, data }) => async (dispatch, getState) => {\n    const res = await axios.put(`${ROOT_URL}/rule/${ruleId}`, {\n        ...data, template: templateId, fileId\n    });\n\n    let payload = {};\n\n    if (res.data) {\n        payload[\"fileId\"] = res.data.fileid;\n        payload[\"ruleIds\"] = res.data.ruleids;\n        payload[\"originalFile\"] = res.data.originalFile;\n    }\n\n    dispatch({\n        type: UPDATE_RULE,\n        payload,\n        response: res.statusText\n    });\n\n    return Promise.resolve(getState());\n\n};\n\nexport const getRule = ({ ruleId }) => async (dispatch, getState) => {\n    const res = await axios.get(`${ROOT_URL}/rule/${ruleId}`);\n\n    dispatch({\n        type: GET_RULE,\n        payload: {\n            rule: res.data,\n            response: \"\"\n        }\n    });\n\n    return Promise.resolve(getState());\n\n};\n\nexport const createRule = ({ templateId, data }) => async (dispatch, getState) => {\n    const res = await axios.post(`${ROOT_URL}/rule/${templateId}`, data);\n\n    dispatch({\n        type: CREATE_RULE,\n        payload: {\n            response: res.data\n        }\n    });\n\n    return Promise.resolve(getState());\n};\n\nexport const applyRule = ({ fileId, ruleId }) => async (dispatch, getState) => {\n    const res = await axios.post(`${ROOT_URL}/apply/${fileId}/${ruleId}`);\n\n    dispatch({\n        type: APPLY_RULE,\n        payload: {\n            response: res.data\n        }\n    });\n\n    return Promise.resolve(getState());\n};\n\nexport const applyMultipleRules = ({ fileId, ruleIds }) => async (dispatch, getState) => {\n    let newFileId = fileId;\n\n    if (ruleIds && ruleIds.length > 0) {\n        const res = await axios.post(`${ROOT_URL}/apply/${fileId}/${ruleIds[0]}`);\n\n        if (res.data) {\n            newFileId = res.data.fileid;\n    \n            for (const ruleId of ruleIds.slice(1)) {\n                await axios.post(`${ROOT_URL}/apply/${newFileId}/${ruleId}`);\n            }\n    \n        }    \n    }\n    \n    dispatch({\n        type: APPLY_RULE,\n        payload: {\n            response: {\n                fileId: newFileId\n            }\n        }\n    });\n\n    return Promise.resolve(getState());\n};\n\nexport const deleteRule = ({ fileId, ruleId }) => async (dispatch, getState) => {\n    const res = await axios.delete(`${ROOT_URL}/delete/${fileId}/${ruleId}`);\n\n    let payload = {};\n\n    if (res.data) {\n        payload[\"fileId\"] = res.data.fileid;\n        payload[\"ruleIds\"] = res.data.ruleids;\n        payload[\"originalFile\"] = res.data.originalFile;\n    }\n\n    dispatch({\n        type: DELETE_RULE,\n        payload,\n        response: res.statusText\n    });\n\n    return Promise.resolve(getState());\n};"]},"metadata":{},"sourceType":"module"}
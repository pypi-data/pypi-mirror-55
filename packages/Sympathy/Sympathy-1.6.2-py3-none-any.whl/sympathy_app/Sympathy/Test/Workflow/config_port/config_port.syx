<?xml version='1.0' encoding='US-ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" id="" is_locked="False" uuid="{fefbc137-40ad-47d9-9698-90a3c727d33e}" width="50.0" x="0.0" y="0.0">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <min_version></min_version>
  <icon/>
  <aggregation type="json">null</aggregation>
  <libraries type="json">[]</libraries>
  <pythonpaths type="json">[]</pythonpaths>
  <environment type="json">{}</environment>
  <parameters type="json">{"environment": {}}</parameters>
  <ports/>
  <flow cls="Flow" height="50.0" id="" is_locked="False" uuid="{92a8cebd-b5b3-46e2-af4c-570bdb059c01}" width="50.0" x="1900.0" y="2425.0">
    <label>Select rows in Table *</label>
    <description></description>
    <author></author>
    <copyright></copyright>
    <version></version>
    <min_version></min_version>
    <icon/>
    <aggregation type="json">{"selected_uuids": ["{28e10677-abab-47a8-91c6-f688d2df99ea}"], "override": true, "conf_view": "WizardBuilder"}</aggregation>
    <libraries type="json">[]</libraries>
    <pythonpaths type="json">[]</pythonpaths>
    <environment type="json">{}</environment>
    <parameters type="json">{"environment": {}}</parameters>
    <ports>
      <input index="0" key="Port" optional="False" parent="True" scheme="hdf5" type="table" uuid="{102e0782-4276-40f9-b6ae-4ee7492391c4}" x="1800.0" y="1775.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <output index="0" key="Port" optional="False" parent="True" scheme="hdf5" type="table" uuid="{3db2eed2-44f7-4968-bf4a-93c1176c728e}" x="2225.0" y="1850.0">
        <label>Port</label>
        <description>Port</description>
      </output>
    </ports>
    <node id="org.sysess.sympathy.examples.helloworld" port_format="1.1" uuid="{28e10677-abab-47a8-91c6-f688d2df99ea}" x="1800.0" y="1850.0">
      <label>Choose minimum value</label>
      <description>Node demonstrating the basics of node creation.</description>
      <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
      <copyright>(c) 2014 Combine Control Systems AB</copyright>
      <version>1.0</version>
      <parameters type="json">{"type": "group", "greeting": {"description": "Your preferred greeting.", "editor": null, "label": "Greeting:", "order": 0, "type": "string", "value": "2"}}</parameters>
      <ports>
        <output key="__sy_out__" scheme="hdf5" type="text" type_base="text" uuid="{2c533ef8-30a0-4f64-b8f5-4c96e04e8bd4}">
          <label>Output Text</label>
          <description>Output Text</description>
        </output>
        <output key="__sy_conf__" scheme="hdf5" type="json" type_base="json" uuid="{080315cb-0ac6-4215-aca3-e6652143d253}">
          <label>Configuration port</label>
          <description>Configuration port</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.create.createjson" port_format="1.1" uuid="{33ed20da-3752-4384-966b-14ba9abea680}" x="1950.0" y="1850.0">
      <label>Manually Create JSON</label>
      <description></description>
      <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "code": {"description": "Python expression that evaluates to a dictionary.", "label": "", "order": 0, "type": "string", "value": "{'use_custom_predicate': {'value': True},\n 'predicate': {'value': 'lambda x: x &gt; {}'.format(float(arg.get()['greeting']['value']))}\n}", "editor": {"language": "python", "type": "code"}}}</parameters>
      <ports>
        <input key="arg" scheme="hdf5" type="json" type_base="&lt;a&gt;" uuid="{5b04e8dd-f0bc-4c90-850d-7f98c4f608c8}">
          <label>Input</label>
          <description>Input</description>
        </input>
        <output key="output" scheme="hdf5" type="json" type_base="json" uuid="{20451951-fe4b-4687-8764-719a96838041}">
          <label>Output</label>
          <description>Output</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.selecttablerows" port_format="1.1" uuid="{3569c7cb-5f65-425b-a763-5e5231063921}" x="2100.0" y="1850.0">
      <label>Select rows in Table (Hello world Example)</label>
      <description>Reduction of rows in Table according to specified filter.</description>
      <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
      <copyright>(C) 2014 Combine Control Systems AB</copyright>
      <version>1.1</version>
      <parameters type="json">{"type": "group", "columns": {"description": "Select columns for comparison relation", "label": "Columns to filter", "mode": "unselected", "order": 0, "passthrough": false, "type": "list", "list": ["values"], "value": [], "value_names": [], "editor": {"filter": true, "mode": true, "selection": "multi", "type": "listview"}}, "relation": {"description": "Select comparison operator for relation", "label": "Relation", "mode": "selected", "order": 1, "passthrough": false, "type": "list", "list": ["equal", "less than", "less than or equal", "greater than", "greater than or equal", "not equal"], "value": [0], "value_names": [], "editor": {"include_empty": false, "type": "combobox", "options": []}}, "constraint": {"description": "Specify constraint value for comparison relation", "editor": null, "label": "Filter constraint", "order": 2, "type": "string", "value": "x"}, "use_custom_predicate": {"description": "Select to use custom filter", "editor": null, "label": "Use custom filter", "order": 3, "type": "boolean", "value": false}, "predicate": {"description": "Write a custom filter as a Python lambda function", "editor": null, "label": "Custom filter", "order": 4, "type": "string", "value": "lambda x: x == x"}, "limit": {"description": "Rows to display", "editor": null, "label": "Preview rows", "order": 5, "type": "integer", "value": 100}}</parameters>
      <ports>
        <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{41f6ef16-d22d-4ccd-a7ce-2f71da946b81}">
          <label>Input</label>
          <description>Input</description>
        </input>
        <input key="__sy_conf__" scheme="hdf5" type="json" type_base="json" uuid="{45b71e3a-e835-4b2b-a6ba-8f2fc38c65b3}">
          <label>Configuration port</label>
          <description>Configuration port</description>
        </input>
        <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{32d3578c-0b8b-4871-988f-b9040504191e}">
          <label>Output</label>
          <description>Output</description>
        </output>
      </ports>
    </node>
    <connection type="table" uuid="{ccfb78bc-aa0a-4b7b-97a4-370fd1d65cf6}">
      <source node="{3569c7cb-5f65-425b-a763-5e5231063921}" port="{32d3578c-0b8b-4871-988f-b9040504191e}"/>
      <destination node="{92a8cebd-b5b3-46e2-af4c-570bdb059c01}" port="{3db2eed2-44f7-4968-bf4a-93c1176c728e}"/>
    </connection>
    <connection type="json" uuid="{d158b12a-ab00-494b-861d-b25bc6d1ed91}">
      <source node="{33ed20da-3752-4384-966b-14ba9abea680}" port="{20451951-fe4b-4687-8764-719a96838041}"/>
      <destination node="{3569c7cb-5f65-425b-a763-5e5231063921}" port="{45b71e3a-e835-4b2b-a6ba-8f2fc38c65b3}"/>
    </connection>
    <connection type="table" uuid="{dff43098-35a6-4a7d-b992-63190cbdf6a1}">
      <source node="{92a8cebd-b5b3-46e2-af4c-570bdb059c01}" port="{102e0782-4276-40f9-b6ae-4ee7492391c4}"/>
      <destination node="{3569c7cb-5f65-425b-a763-5e5231063921}" port="{41f6ef16-d22d-4ccd-a7ce-2f71da946b81}"/>
    </connection>
    <connection type="json" uuid="{fc2404c1-69e1-4bd3-8d88-42e5702fea1e}">
      <source node="{28e10677-abab-47a8-91c6-f688d2df99ea}" port="{080315cb-0ac6-4215-aca3-e6652143d253}"/>
      <destination node="{33ed20da-3752-4384-966b-14ba9abea680}" port="{5b04e8dd-f0bc-4c90-850d-7f98c4f608c8}"/>
    </connection>
  </flow>
  <flow cls="Lambda" height="50.0" id="" is_locked="False" uuid="{d657bc4d-213a-48f0-85c2-30ec2328d580}" width="50.0" x="1900.0" y="2700.0">
    <label>New Lambda 0</label>
    <description></description>
    <author></author>
    <copyright></copyright>
    <version></version>
    <min_version></min_version>
    <icon/>
    <aggregation type="json">null</aggregation>
    <libraries type="json">[]</libraries>
    <pythonpaths type="json">[]</pythonpaths>
    <environment type="json">{}</environment>
    <parameters type="json">{"environment": {}}</parameters>
    <ports>
      <input index="0" key="Port" optional="False" parent="False" scheme="hdf5" type="table" uuid="{59a28ee3-71d5-4f28-a240-14e030e29f93}" x="1750.0" y="1875.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <output index="0" key="Port" optional="False" parent="False" scheme="hdf5" type="json" uuid="{768189b4-9adc-46a7-8dab-fb1ca31eb292}" x="2275.0" y="1875.0">
        <label>Port</label>
        <description>Port</description>
      </output>
    </ports>
    <basic_ports>
      <output key="Function" scheme="hdf5" type="table -&gt; json" type_base="&lt;a&gt;" uuid="{31d4bdab-3a4d-4681-acbb-c100d02e3742}">
        <label>Lambda function</label>
        <description>Lambda function</description>
      </output>
    </basic_ports>
    <node id="org.sysess.sympathy.examples.helloworld" port_format="1.1" uuid="{3b141df4-37ae-4eb4-8746-689758038c43}" x="2150.0" y="1875.0">
      <label>Hello world example</label>
      <description>Node demonstrating the basics of node creation.</description>
      <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
      <copyright>(c) 2014 Combine Control Systems AB</copyright>
      <version>1.0</version>
      <parameters type="json">{"type": "group", "greeting": {"description": "Your preferred greeting.", "editor": null, "label": "Greeting:", "order": 0, "type": "string", "value": "Hello world!"}}</parameters>
      <ports>
        <input key="__sy_conf__" scheme="hdf5" type="json" type_base="json" uuid="{65a05755-e4f6-44ca-9839-d6ca5e215513}">
          <label>Configuration port</label>
          <description>Configuration port</description>
        </input>
        <output key="__sy_conf__" scheme="hdf5" type="json" type_base="json" uuid="{0bd72db0-7cca-4b27-befa-63e69b14a28f}">
          <label>Configuration port</label>
          <description>Configuration port</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.convert.texttojson" uuid="{78797dcf-1d46-469d-99f8-3d2823c44a70}" x="2000.0" y="1875.0">
      <label>Text to JSON</label>
      <description></description>
      <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>1.0</version>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="input" scheme="hdf5" type="text" type_base="text" uuid="{80979c48-c395-480f-9630-54ffa17359b9}">
          <label>Input</label>
          <description>Input</description>
        </input>
        <output key="output" scheme="hdf5" type="json" type_base="json" uuid="{5adb87c9-53f7-4f24-af4f-bd3d4bb9ea4c}">
          <label>Output</label>
          <description>Output</description>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.text.table2text" uuid="{c88f9bb0-8005-4585-8585-2808ddab62dd}" x="1875.0" y="1875.0">
      <label>Table to Text</label>
      <description>Convert Table to Text</description>
      <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
      <copyright>(C) 2017 Combine Control Systems AB</copyright>
      <version>0.1</version>
      <parameters type="json">{"type": "group", "name": {"description": "Specify name for input column.", "label": "Column name", "order": 0, "type": "string", "value": "config", "editor": {"display": null, "include_empty": false, "type": "combobox", "options": ["config", "comment"]}}}</parameters>
      <ports>
        <input key="table" scheme="hdf5" type="table" type_base="table" uuid="{97e38b89-4334-4f3a-8f63-d42da67d356c}">
          <label>Table with input Text</label>
          <description>Table with input Text</description>
        </input>
        <output key="text" scheme="hdf5" type="text" type_base="text" uuid="{d62081d7-d963-4930-b98f-8c1cb54eb0fa}">
          <label>Output Text</label>
          <description>Output Text</description>
        </output>
      </ports>
    </node>
    <connection type="text" uuid="{8934a47a-2cb8-4730-a7b3-2b0d4229727c}">
      <source node="{c88f9bb0-8005-4585-8585-2808ddab62dd}" port="{d62081d7-d963-4930-b98f-8c1cb54eb0fa}"/>
      <destination node="{78797dcf-1d46-469d-99f8-3d2823c44a70}" port="{80979c48-c395-480f-9630-54ffa17359b9}"/>
    </connection>
    <connection type="json" uuid="{c8d263c2-c101-42ee-8ca7-32b0b1886dfe}">
      <source node="{78797dcf-1d46-469d-99f8-3d2823c44a70}" port="{5adb87c9-53f7-4f24-af4f-bd3d4bb9ea4c}"/>
      <destination node="{3b141df4-37ae-4eb4-8746-689758038c43}" port="{65a05755-e4f6-44ca-9839-d6ca5e215513}"/>
    </connection>
    <connection type="table" uuid="{d242bd6b-3896-4a61-ba7f-1414da9be4d9}">
      <source node="{d657bc4d-213a-48f0-85c2-30ec2328d580}" port="{59a28ee3-71d5-4f28-a240-14e030e29f93}"/>
      <destination node="{c88f9bb0-8005-4585-8585-2808ddab62dd}" port="{97e38b89-4334-4f3a-8f63-d42da67d356c}"/>
    </connection>
    <connection type="json" uuid="{d735790d-c026-440c-9bd1-6be56bc46a7c}">
      <source node="{3b141df4-37ae-4eb4-8746-689758038c43}" port="{0bd72db0-7cca-4b27-befa-63e69b14a28f}"/>
      <destination node="{d657bc4d-213a-48f0-85c2-30ec2328d580}" port="{768189b4-9adc-46a7-8dab-fb1ca31eb292}"/>
    </connection>
  </flow>
  <node id="org.sysess.builtin.map" port_format="1.1" uuid="{0d87d122-35be-4fa4-abb0-3904464fca97}" x="2050.0" y="2775.0">
    <label>Map</label>
    <description>Map Lambda function over each element in argument list</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "fail_strategy": {"description": "Decide how failure to process an item should be handled.", "label": "Action on exception", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["Error", "Create Empty Item", "Skip Item"], "value": [0], "value_names": ["Error"], "editor": {"display": null, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="Function" scheme="hdf5" type="table -&gt; json" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{5ccd1b6b-47bd-4681-bd14-5ea2a0d72a75}">
        <label>Lambda Function to Map</label>
        <description>Lambda Function to Map</description>
      </input>
      <input key="List" scheme="hdf5" type="[table]" type_base="[&lt;a&gt;]" uuid="{5711901b-3ff8-452a-a7d5-4a5978b02cd0}">
        <label>Argument List</label>
        <description>Argument List</description>
      </input>
      <output key="List" scheme="hdf5" type="[json]" type_base="[&lt;b&gt;]" uuid="{76fd4e5b-58eb-4457-8a72-9e83997379b1}">
        <label>Output List</label>
        <description>Output List</description>
      </output>
      <output key="__sy_out__" scheme="hdf5" type="text" type_base="text" uuid="{d6820501-da5c-4738-9ca2-f5408f6e7628}">
        <label>Output Text</label>
        <description>Output Text</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" uuid="{213653cb-6240-4ca3-8843-6c8452d9d73d}" x="2050.0" y="2425.0">
    <label>Assert Equal Table</label>
    <description></description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>Copyright (c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "col_order": {"description": "Differing column order will trigger error", "editor": null, "label": "Compare column order", "order": 0, "type": "boolean", "value": true}, "col_attrs": {"description": "Differing column attributes will trigger error", "editor": null, "label": "Compare column attributes", "order": 1, "type": "boolean", "value": true}, "tbl_names": {"description": "Differing table name will trigger error", "editor": null, "label": "Compare table names", "order": 2, "type": "boolean", "value": true}, "tbl_attrs": {"description": "Differing table attributes will trigger error", "editor": null, "label": "Compare table attributes", "order": 3, "type": "boolean", "value": true}, "inexact_float": {"description": "If any arithemtics is invovled floats should probably be compared approximately.", "editor": null, "label": "Approximate comparison of floats", "order": 4, "type": "boolean", "value": false}, "rel_tol": {"description": "Floats are considered unequal if the relative difference between them is larger than this value.", "editor": null, "label": "Relative tolerance", "order": 5, "type": "float", "value": 1e-05}, "abs_tol": {"description": "Floats are considered unequal if the absolute difference between them is larger than this value.", "editor": null, "label": "Absolute tolerance", "order": 6, "type": "float", "value": 1e-08}}</parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{0d04c125-4e38-404f-9a6b-3593d8efe11b}">
        <label>Table A</label>
        <description>Table A</description>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{505c0cca-5c1e-448a-97d7-274358803428}">
        <label>Table B</label>
        <description>Table B</description>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{93d366f2-9713-42f1-a739-6b133dadd4c1}">
        <label>Output Table</label>
        <description>Output Table</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.conditionalerror" uuid="{2f98c0fb-18e3-49d8-897a-1f3c55bc968d}" x="1900.0" y="2250.0">
    <label>Conditional error/warning</label>
    <description>Raise an error if a predicate is True.</description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>Copyright (c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "predicate": {"description": "Error message is printed if this function returns True.", "label": "Predicate function:", "order": 0, "type": "string", "value": "lambda x: not x.get()['strings']['strings']['combo_string2']['value'] == 'Programmatically'", "editor": {"language": "python", "type": "code"}}, "error_msg": {"description": "Error message to display to the user.", "editor": null, "label": "Error message:", "order": 1, "type": "string", "value": "Error!"}, "error_type": {"description": "The level \"Error\" stops flow execution.", "label": "Severity:", "mode": "selected", "order": 2, "passthrough": false, "type": "list", "list": ["Error", "Warning", "Output"], "value": [0], "value_names": [], "editor": {"include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="json" type_base="&lt;a&gt;" uuid="{6983139a-9633-4ac8-b965-038a029d7188}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="out" scheme="hdf5" type="json" type_base="&lt;a&gt;" uuid="{fcf8f3c1-b134-4d16-a8ca-8a568ce35938}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.examples.allparameters" port_format="1.1" uuid="{4921dbcc-22b3-4218-bccb-efd633f6d9b2}" x="1750.0" y="2250.0">
    <label>All parameters example</label>
    <description>Node showing all different parameter types.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C)2011-2012,2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "numbers": {"label": "Numbers", "order": 0, "type": "page", "float": {"label": "Floats", "order": 0, "type": "group", "stringfloat": {"description": "A float", "editor": null, "label": "Float in a line edit", "order": 0, "type": "float", "value": 0.1234}, "spinfloat": {"description": "A float", "label": "Float in a spinbox", "order": 1, "type": "float", "value": 0.1234, "editor": {"decimals": 4, "max": 4.0, "min": 0.0, "step": 0.1, "type": "spinbox"}}}, "integer": {"label": "Integers", "order": 1, "type": "group", "stringinteger": {"description": "An integer", "label": "Integer in a line edit", "order": 0, "type": "integer", "value": 1234, "editor": {"max": 2000, "min": 0, "placeholder": "Number between 0 and 2000", "type": "lineedit"}}, "spininteger": {"description": "An integer", "label": "Integer in a spinbox", "order": 1, "type": "integer", "value": 42, "editor": {"max": 2000, "min": 0, "step": 10, "type": "spinbox"}}}}, "strings": {"label": "Strings", "order": 1, "type": "page", "strings": {"label": "Normal strings", "order": 0, "type": "group", "lineedit": {"description": "Text on a single line", "label": "String in a line edit", "order": 0, "type": "string", "value": "Hello", "editor": {"placeholder": "Hello World!", "type": "lineedit"}}, "combo_string1": {"description": "String parameter withpredefined options.", "label": "String with static options", "order": 1, "type": "string", "value": "B", "editor": {"include_empty": false, "type": "combobox", "options": ["A", "B", "C"]}}, "combo_string2": {"description": "String parameter withpredefined options.", "label": "String with dynamic options", "order": 2, "type": "string", "value": "Programmatically", "editor": {"include_empty": true, "type": "combobox", "options": ["", "My", "Programmatically", "Generated", "Options"]}}}, "path": {"label": "Paths", "order": 1, "type": "group", "filename": {"description": "A filename including path if needed", "label": "Filename", "order": 0, "type": "string", "value": "test.txt", "editor": {"type": "filename", "filter": ["Image files (*.png *.xpm *.jpg)", "Text files (*.txt)", "Any files (*)"]}}, "save_filename": {"description": "A filename including path if needed", "label": "Save filename", "order": 1, "type": "string", "value": "test.txt", "editor": {"type": "savename", "filter": ["Image files (*.png *.xpm *.jpg)", "Text files (*.txt)", "Any files (*)"]}}, "directory": {"description": "A directory including path if needed", "label": "Directory", "order": 2, "type": "string", "value": "MyDirectory", "editor": {"type": "dirname"}}}}, "logics": {"label": "Logics", "order": 2, "type": "page", "boolflag": {"description": "A boolean flag indicating true or false", "editor": null, "label": "Boolean", "order": 0, "type": "boolean", "value": true}}, "lists": {"label": "Lists", "order": 3, "type": "page", "combo": {"description": "A combo box", "label": "Combo box", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["", "First option", "Second option", "Third option"], "value": [1], "value_names": [], "editor": {"include_empty": true, "type": "combobox", "options": []}}, "alist": {"description": "A list", "label": "List view", "mode": "selected", "order": 1, "passthrough": false, "type": "list", "list": ["Generated", "List", "My", "Programmatically"], "value": [0], "value_names": ["Generated"], "editor": {"type": "listview"}}, "multilist": {"description": "A list with multiselect", "label": "List view with multiselect", "mode": "selected", "order": 2, "passthrough": false, "type": "list", "list": ["Element1", "Element3", "Element2"], "value": [0, 1], "value_names": ["Element1", "Element3"], "editor": {"alternatingrowcolors": false, "selection": "multi", "type": "listview"}}}}</parameters>
    <ports>
      <output key="__sy_conf__" scheme="hdf5" type="json" type_base="json" uuid="{6e90d48e-b6fc-465e-8831-55e1eead9a33}">
        <label>Configuration port</label>
        <description>Configuration port</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" uuid="{5474afff-3357-42b1-a079-8d0f388f246a}" x="1750.0" y="2425.0">
    <label>Manually Create Table</label>
    <description></description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "json_table": {"description": "Configuration window", "editor": null, "label": "GUI", "order": 0, "type": "string", "value": "[[\"values\", \"f\", [1.0, 2.0, 3.0, 4.0, 1.0, 2.0, 3.0, 4.0]]]"}}</parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{52462c99-4053-4b5f-ad13-cd7da19666c5}">
        <label>Manually created table</label>
        <description>Manually created table</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.conditionalerror" uuid="{703d9c63-bf99-48b3-97c0-9a302a17bbc5}" x="2175.0" y="2775.0">
    <label>Conditional error/warning</label>
    <description>Raise an error if a predicate is True.</description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>Copyright (c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "predicate": {"description": "Error message is printed if this function returns True.", "label": "Predicate function:", "order": 0, "type": "string", "value": "lambda arg: not all(list(arg)[0].get() == a.get() for a in list(arg)[1:])", "editor": {"language": "python", "type": "code"}}, "error_msg": {"description": "Error message to display to the user.", "editor": null, "label": "Error message:", "order": 1, "type": "string", "value": "Output configurations are not equal!"}, "error_type": {"description": "The level \"Error\" stops flow execution.", "label": "Severity:", "mode": "selected", "order": 2, "passthrough": false, "type": "list", "list": ["Error", "Warning", "Output"], "value": [0], "value_names": ["Error"], "editor": {"display": null, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="[json]" type_base="&lt;a&gt;" uuid="{819e79f6-ed1d-46d1-85cd-619f4c3bcf68}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="out" scheme="hdf5" type="[json]" type_base="&lt;a&gt;" uuid="{1cfbc646-81b4-498c-995d-647fe20df255}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.random.randomtable" port_format="1.1" uuid="{94922dac-7504-45ff-a8f5-349bafa22896}" x="1750.0" y="2000.0">
    <label>Random Table</label>
    <description>Random Table generator.</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2013 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "column_entries": {"description": "The number of columns in the generated table.", "label": "Columns:", "order": 0, "type": "integer", "value": 3, "editor": {"max": 1000000, "min": 0, "step": 1, "type": "spinbox"}}, "column_length": {"description": "The number of rows in the generated table.", "label": "Rows:", "order": 1, "type": "integer", "value": 3, "editor": {"max": 100000000, "min": 0, "step": 1, "type": "spinbox"}}, "mask_values": {"description": "If checked each value has a 50% chance to be masked.", "editor": null, "label": "Randomly mask values", "order": 2, "type": "boolean", "value": false}}</parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{08e1d30a-9d63-4155-b2ed-0d66ea6f59be}">
        <label>Table with random numbers. The specifications of the Table are declared in the configuration.</label>
        <description>Table with random numbers. The specifications of the Table are declared in the configuration.</description>
      </output>
      <output key="__sy_conf__" scheme="hdf5" type="json" type_base="json" uuid="{9fd27f51-51a0-42c5-a2d1-888bd63e3814}">
        <label>Configuration port</label>
        <description>Configuration port</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.selecttablerows" uuid="{9aa2dd57-c98d-497e-b1f0-f4148cb01cf7}" x="1900.0" y="2525.0">
    <label>Select rows in Table</label>
    <description>Reduction of rows in Table according to specified filter.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C) 2014 Combine Control Systems AB</copyright>
    <version>1.1</version>
    <parameters type="json">{"type": "group", "columns": {"description": "Select columns for comparison relation", "label": "Columns to filter", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["values"], "value": [0], "value_names": ["values"], "editor": {"filter": true, "mode": true, "selection": "multi", "type": "listview"}}, "relation": {"description": "Select comparison operator for relation", "label": "Relation", "mode": "selected", "order": 1, "passthrough": false, "type": "list", "list": ["equal", "less than", "less than or equal", "greater than", "greater than or equal", "not equal"], "value": [3], "value_names": ["greater than"], "editor": {"include_empty": false, "type": "combobox", "options": []}}, "constraint": {"description": "Specify constraint value for comparison relation", "editor": null, "label": "Filter constraint", "order": 2, "type": "string", "value": "2"}, "use_custom_predicate": {"description": "Select to use custom filter", "editor": null, "label": "Use custom filter", "order": 3, "type": "boolean", "value": false}, "predicate": {"description": "Write a custom filter as a Python lambda function", "editor": null, "label": "Custom filter", "order": 4, "type": "string", "value": "lambda x: x &gt; 2"}, "limit": {"description": "Rows to display", "editor": null, "label": "Preview rows", "order": 5, "type": "integer", "value": 100}}</parameters>
    <ports>
      <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{a039c399-57c5-46fd-bf95-dd8eb74d7c31}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{d411ebbd-c77d-4726-8f39-52f735c7f917}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.tuple.tuple2" uuid="{c142afc5-e76c-45ba-8674-1c12dbe7e2c2}" x="2050.0" y="2000.0">
    <label>Tuple</label>
    <description></description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{ffb57d49-310d-49ee-87f9-7101c58ca7f0}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <input key="input" scheme="hdf5" type="table" type_base="&lt;b&gt;" uuid="{e3ad56db-a6c4-4afe-b91a-29ba47efb695}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="output" scheme="hdf5" type="(table, table)" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{5f269dee-7d33-48ef-a715-9b2e9660c311}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.random.randomtable" port_format="1.1" uuid="{c4fd0e69-ccdd-41f3-bab4-e58459922e06}" x="1900.0" y="2075.0">
    <label>Random Table</label>
    <description>Random Table generator.</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2013 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "column_entries": {"description": "The number of columns in the generated table.", "label": "Columns:", "order": 0, "type": "integer", "value": 1, "editor": {"max": 1000000, "min": 0, "step": 1, "type": "spinbox"}}, "column_length": {"description": "The number of rows in the generated table.", "label": "Rows:", "order": 1, "type": "integer", "value": 1, "editor": {"max": 100000000, "min": 0, "step": 1, "type": "spinbox"}}, "mask_values": {"description": "If checked each value has a 50% chance to be masked.", "editor": null, "label": "Randomly mask values", "order": 2, "type": "boolean", "value": false}}</parameters>
    <ports>
      <input key="__sy_conf__" scheme="hdf5" type="json" type_base="json" uuid="{6cb7b489-7467-40bd-b0d1-4358acc76755}">
        <label>Configuration port</label>
        <description>Configuration port</description>
      </input>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{f5f5dbe2-4761-4ef2-8a55-c3de83bb76e1}">
        <label>Table with random numbers. The specifications of the Table are declared in the configuration.</label>
        <description>Table with random numbers. The specifications of the Table are declared in the configuration.</description>
      </output>
      <output key="__sy_conf__" scheme="hdf5" type="json" type_base="json" uuid="{0d58d0b0-92a2-4bd0-9f87-f841cba73664}">
        <label>Configuration port</label>
        <description>Configuration port</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" uuid="{df13c852-99d3-4959-88b7-d5755a67cc90}" x="1750.0" y="2825.0">
    <label>Manually Create Table</label>
    <description></description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "json_table": {"description": "Configuration window", "editor": null, "label": "GUI", "order": 0, "type": "string", "value": "[[\"config\", \"U\", [\"{\\\"type\\\": \\\"group\\\", \\\"greeting\\\": {\\\"type\\\": \\\"string\\\", \\\"value\\\": \\\"Hej!\\\"}}\", \"{\\\"type\\\": \\\"group\\\", \\\"greeting\\\": {\\\"value\\\": \\\"Hej!\\\"}}\", \"{\\\"greeting\\\": {\\\"type\\\": \\\"string\\\", \\\"value\\\": \\\"Hej!\\\"}}\", \"{\\\"greeting\\\": {\\\"value\\\": \\\"Hej!\\\"}}\", \"{\\\"greeting\\\": {\\\"type\\\": \\\"integer\\\", \\\"value\\\": \\\"Hej!\\\"}}\"]], [\"comment\", \"U\", [\"\", \"\", \"\", \"\", \"Trying to change parameter type shouldn't do anything.\"]]]"}}</parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{b09053a1-5052-4b8d-af76-7c95104b813c}">
        <label>Manually created table</label>
        <description>Manually created table</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.vsplittablenode" uuid="{f45342d8-62f7-4310-85f3-1f2960b90aa3}" x="1900.0" y="2825.0">
    <label>VSplit Table</label>
    <description>Vertical split of Table into Tables.</description>
    <author>Alexander Busck &lt;alexander.busck@combine.se&gt;</author>
    <copyright>(C) 2013 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "no_index": {"description": "If checked, each row in the input table will be put in a different table in the output. If unchecked, you need to specify an index column which will then be used to determine what rows go in which table.", "editor": null, "label": "One table for each row.", "order": 0, "type": "boolean", "value": true}, "input_index": {"description": "Choose name for index column. All rows with the same value in this column will end up in the same output table.", "label": "Index column", "order": 1, "type": "string", "value": "", "editor": {"display": null, "include_empty": false, "type": "combobox", "options": []}}, "missing_index": {"description": "Choose name how to handle tables where the selected index column  is missing.", "label": "Action on missing index", "order": 2, "type": "string", "value": "Multiple tables, one for each row", "editor": {"display": null, "include_empty": false, "type": "combobox", "options": ["Multiple tables, one for each row", "Single table, one table for all rows", "Error"]}}, "remove_fill": {"description": "After splitting, remove columns that contain only NaN or empty strings.", "editor": null, "label": "Remove complement columns", "order": 3, "type": "boolean", "value": false}}</parameters>
    <ports>
      <input key="port1" scheme="hdf5" type="table" type_base="table" uuid="{2bdcc4f7-b568-4c42-8e1f-22dffaf27611}">
        <label>Input Table</label>
        <description>Input Table</description>
      </input>
      <output key="port1" scheme="hdf5" type="[table]" type_base="[table]" uuid="{838205bc-9e03-4f16-8c36-56492f823609}">
        <label>Split Tables</label>
        <description>Split Tables</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.conditionalerror" uuid="{f59e9675-da2a-4c03-9873-cb51f999d695}" x="2200.0" y="2000.0">
    <label>Conditional error/warning</label>
    <description>Raise an error if a predicate is True.</description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>Copyright (c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "predicate": {"description": "Error message is printed if this function returns True.", "label": "Predicate function:", "order": 0, "type": "string", "value": "lambda x: not (x[0].number_of_columns() == x[1].number_of_columns() and x[0].number_of_rows() == x[1].number_of_rows())", "editor": {"language": "python", "type": "code"}}, "error_msg": {"description": "Error message to display to the user.", "editor": null, "label": "Error message:", "order": 1, "type": "string", "value": "Error!"}, "error_type": {"description": "The level \"Error\" stops flow execution.", "label": "Severity:", "mode": "selected", "order": 2, "passthrough": false, "type": "list", "list": ["Error", "Warning", "Output"], "value": [0], "value_names": [], "editor": {"include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="(table, table)" type_base="&lt;a&gt;" uuid="{892dd541-b479-47ec-b17a-0a087899c1c5}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="out" scheme="hdf5" type="(table, table)" type_base="&lt;a&gt;" uuid="{b7d03d36-be2c-4042-8e07-e74cc4c80daa}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <connection type="(table, table)" uuid="{0968cdbe-7027-4fca-b1b6-dde696ed4418}">
    <source node="{c142afc5-e76c-45ba-8674-1c12dbe7e2c2}" port="{5f269dee-7d33-48ef-a715-9b2e9660c311}"/>
    <destination node="{f59e9675-da2a-4c03-9873-cb51f999d695}" port="{892dd541-b479-47ec-b17a-0a087899c1c5}"/>
  </connection>
  <connection type="table" uuid="{0a8fe995-5451-4589-b28a-6d817f83332c}">
    <source node="{9aa2dd57-c98d-497e-b1f0-f4148cb01cf7}" port="{d411ebbd-c77d-4726-8f39-52f735c7f917}"/>
    <destination node="{213653cb-6240-4ca3-8843-6c8452d9d73d}" port="{505c0cca-5c1e-448a-97d7-274358803428}"/>
  </connection>
  <connection type="table" uuid="{19aa77c6-4481-4973-95bf-da2b9f2d7213}">
    <source node="{92a8cebd-b5b3-46e2-af4c-570bdb059c01}" port="{3db2eed2-44f7-4968-bf4a-93c1176c728e}"/>
    <destination node="{213653cb-6240-4ca3-8843-6c8452d9d73d}" port="{0d04c125-4e38-404f-9a6b-3593d8efe11b}"/>
  </connection>
  <connection type="[table]" uuid="{248ad38b-22bd-4290-b195-4c45348c9b6e}">
    <source node="{f45342d8-62f7-4310-85f3-1f2960b90aa3}" port="{838205bc-9e03-4f16-8c36-56492f823609}"/>
    <destination node="{0d87d122-35be-4fa4-abb0-3904464fca97}" port="{5711901b-3ff8-452a-a7d5-4a5978b02cd0}"/>
  </connection>
  <connection type="table" uuid="{39a199ba-928d-4516-a4dc-0a2512039fa9}">
    <source node="{94922dac-7504-45ff-a8f5-349bafa22896}" port="{08e1d30a-9d63-4155-b2ed-0d66ea6f59be}"/>
    <destination node="{c142afc5-e76c-45ba-8674-1c12dbe7e2c2}" port="{ffb57d49-310d-49ee-87f9-7101c58ca7f0}"/>
  </connection>
  <connection type="[json]" uuid="{55acb022-3e44-4aae-a14f-5829c7c95a12}">
    <source node="{0d87d122-35be-4fa4-abb0-3904464fca97}" port="{76fd4e5b-58eb-4457-8a72-9e83997379b1}"/>
    <destination node="{703d9c63-bf99-48b3-97c0-9a302a17bbc5}" port="{819e79f6-ed1d-46d1-85cd-619f4c3bcf68}"/>
  </connection>
  <connection type="table" uuid="{6bf48a10-b1ad-4a84-88fc-040d5c2ecb82}">
    <source node="{5474afff-3357-42b1-a079-8d0f388f246a}" port="{52462c99-4053-4b5f-ad13-cd7da19666c5}"/>
    <destination node="{92a8cebd-b5b3-46e2-af4c-570bdb059c01}" port="{102e0782-4276-40f9-b6ae-4ee7492391c4}"/>
  </connection>
  <connection type="table -&gt; json" uuid="{8d1b9fc9-abc4-45b9-86f3-c43597fed60d}">
    <source node="{d657bc4d-213a-48f0-85c2-30ec2328d580}" port="{31d4bdab-3a4d-4681-acbb-c100d02e3742}"/>
    <destination node="{0d87d122-35be-4fa4-abb0-3904464fca97}" port="{5ccd1b6b-47bd-4681-bd14-5ea2a0d72a75}"/>
  </connection>
  <connection type="table" uuid="{921fb389-ff04-41e3-baf9-18d4c6e3d2fe}">
    <source node="{c4fd0e69-ccdd-41f3-bab4-e58459922e06}" port="{f5f5dbe2-4761-4ef2-8a55-c3de83bb76e1}"/>
    <destination node="{c142afc5-e76c-45ba-8674-1c12dbe7e2c2}" port="{e3ad56db-a6c4-4afe-b91a-29ba47efb695}"/>
  </connection>
  <connection type="json" uuid="{d9cd37f5-e114-4008-85d0-2c00dcc69745}">
    <source node="{94922dac-7504-45ff-a8f5-349bafa22896}" port="{9fd27f51-51a0-42c5-a2d1-888bd63e3814}"/>
    <destination node="{c4fd0e69-ccdd-41f3-bab4-e58459922e06}" port="{6cb7b489-7467-40bd-b0d1-4358acc76755}"/>
  </connection>
  <connection type="json" uuid="{e7d8dbdd-0f1c-462a-9d68-466c51a871c4}">
    <source node="{4921dbcc-22b3-4218-bccb-efd633f6d9b2}" port="{6e90d48e-b6fc-465e-8831-55e1eead9a33}"/>
    <destination node="{2f98c0fb-18e3-49d8-897a-1f3c55bc968d}" port="{6983139a-9633-4ac8-b965-038a029d7188}"/>
  </connection>
  <connection type="table" uuid="{ee7b84a5-3d0f-4388-9bb9-4a397046c117}">
    <source node="{df13c852-99d3-4959-88b7-d5755a67cc90}" port="{b09053a1-5052-4b8d-af76-7c95104b813c}"/>
    <destination node="{f45342d8-62f7-4310-85f3-1f2960b90aa3}" port="{2bdcc4f7-b568-4c42-8e1f-22dffaf27611}"/>
  </connection>
  <connection type="table" uuid="{ef104189-8721-4dd3-9917-c415dcf060bf}">
    <source node="{5474afff-3357-42b1-a079-8d0f388f246a}" port="{52462c99-4053-4b5f-ad13-cd7da19666c5}"/>
    <destination node="{9aa2dd57-c98d-497e-b1f0-f4148cb01cf7}" port="{a039c399-57c5-46fd-bf95-dd8eb74d7c31}"/>
  </connection>
  <text color="Beige" height="225.0" uuid="{1a1cb2db-1d43-4f5c-b9ad-7a6d8268d6f4}" width="575.0" x="1725.0" y="1950.0">Control configuration of one node with configuration output from another. Verify that default parameters are not in use.</text>
  <text color="Beige" height="250.0" uuid="{299edd00-8c61-4174-be72-08db261c45b7}" width="575.0" x="1725.0" y="2375.0">Using configuration port to implement custom input for aggregated subflow.
The subflow is kind of similar to a new node but implemented in the flow.</text>
  <text color="Beige" height="150.0" uuid="{68c87e03-8472-4b9c-9be2-ddb2de78376e}" width="575.0" x="1725.0" y="2200.0">Check that specific parameter value (non-default) is propagated.</text>
  <text color="Beige" height="275.0" uuid="{8512b39c-2155-4006-8397-0e00be2bd4a3}" width="575.0" x="1725.0" y="2650.0">Try setting configuration with different syntaxes and check that output configurations are equal.</text>
</flow>

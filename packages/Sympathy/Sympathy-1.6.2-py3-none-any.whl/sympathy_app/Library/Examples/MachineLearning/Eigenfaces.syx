<?xml version='1.0' encoding='ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" id="" is_locked="False" uuid="{d7800589-4c2d-4263-a5ea-47194450d5fd}" width="50.0" x="0.0" y="0.0">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <min_version></min_version>
  <aggregation type="json"><![CDATA[null]]></aggregation>
  <libraries type="json"><![CDATA[[]]]></libraries>
  <pythonpaths type="json"><![CDATA[[]]]></pythonpaths>
  <overrides type="json"><![CDATA[{}]]></overrides>
  <environment type="json"><![CDATA[{"NO_TEST": ""}]]></environment>
  <parameters type="json"><![CDATA[{"environment": {"NO_TEST": ""}}]]></parameters>
  <ports/>
  <node id="org.sysess.sympathy.machinelearning.mlp__classifier" uuid="{08e86a64-8487-416f-9606-e5e22bd39bc0}" x="1850.0" y="1975.0">
    <label>Multi-layer Perceptron Classifier</label>
    <description>Multi-layer perceptron classifier</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "beta_1": {"description": "Exponential decay rate for estimates of first moment vector in adam,\nshould be in [0, 1). Only used when solver='adam'\n", "editor": null, "label": "beta_1", "order": 0, "type": "string", "value": "0.9"}, "warm_start": {"description": "When set to True, reuse the solution of the previous\ncall to fit as initialization, otherwise, just erase the\nprevious solution.\n", "editor": null, "label": "warm_start", "order": 1, "type": "string", "value": "False"}, "beta_2": {"description": "Exponential decay rate for estimates of second moment vector in adam,\nshould be in [0, 1). Only used when solver='adam'\n", "editor": null, "label": "beta_2", "order": 2, "type": "string", "value": "0.999"}, "shuffle": {"description": "Whether to shuffle samples in each iteration. Only used when\nsolver='sgd' or 'adam'.\n", "editor": null, "label": "shuffle", "order": 3, "type": "string", "value": "True"}, "nesterovs_momentum": {"description": "Whether to use Nesterov's momentum. Only used when solver='sgd' and\nmomentum > 0.\n", "editor": null, "label": "nesterovs_momentum", "order": 4, "type": "string", "value": "True"}, "solver": {"description": "The solver for weight optimization.\n\n- 'lbfgs' is an optimizer in the family of quasi-Newton methods.\n\n- 'sgd' refers to stochastic gradient descent.\n\n- 'adam' refers to a stochastic gradient-based optimizer proposed\n  by Kingma, Diederik, and Jimmy Ba\n\nNote: The default solver 'adam' works pretty well on relatively\nlarge datasets (with thousands of training samples or more) in terms of\nboth training time and validation score.\nFor small datasets, however, 'lbfgs' can converge faster and perform\nbetter.\n", "editor": null, "label": "solver", "order": 5, "type": "string", "value": "adam"}, "validation_fraction": {"description": "The proportion of training data to set aside as validation set for\nearly stopping. Must be between 0 and 1.\nOnly used if early_stopping is True\n", "editor": null, "label": "validation_fraction", "order": 6, "type": "string", "value": "0.1"}, "activation": {"description": "Activation function for the hidden layer.\n\n- 'identity', no-op activation, useful to implement linear bottleneck,\n  returns f(x) = x\n\n- 'logistic', the logistic sigmoid function,\n  returns f(x) = 1 / (1 + exp(-x)).\n\n- 'tanh', the hyperbolic tan function,\n  returns f(x) = tanh(x).\n\n- 'relu', the rectified linear unit function,\n  returns f(x) = max(0, x)\n", "editor": null, "label": "activation", "order": 7, "type": "string", "value": "relu"}, "max_iter": {"description": "Maximum number of iterations. The solver iterates until convergence\n(determined by 'tol') or this number of iterations.\n", "editor": null, "label": "max_iter", "order": 8, "type": "string", "value": "1000"}, "batch_size": {"description": "Size of minibatches for stochastic optimizers.\nIf the solver is 'lbfgs', the classifier will not use minibatch.\nWhen set to \"auto\", `batch_size=min(200, n_samples)`\n", "editor": null, "label": "batch_size", "order": 9, "type": "string", "value": "auto"}, "power_t": {"description": "The exponent for inverse scaling learning rate.\nIt is used in updating effective learning rate when the learning_rate\nis set to 'invscaling'. Only used when solver='sgd'.\n", "editor": null, "label": "power_t", "order": 10, "type": "string", "value": "0.5"}, "random_state": {"description": "State or seed for random number generator.\n", "editor": null, "label": "random_state", "order": 11, "type": "string", "value": "None"}, "learning_rate_init": {"description": "The initial learning rate used. It controls the step-size\nin updating the weights. Only used when solver='sgd' or 'adam'.\n", "editor": null, "label": "learning_rate_init", "order": 12, "type": "string", "value": "0.05"}, "tol": {"description": "Tolerance for the optimization. When the loss or score is not improving\nby at least tol for two consecutive iterations, unless `learning_rate`\nis set to 'adaptive', convergence is considered to be reached and\ntraining stops.\n", "editor": null, "label": "tol", "order": 13, "type": "string", "value": "0.0001"}, "epsilon": {"description": "Value for numerical stability in adam. Only used when solver='adam'\n", "editor": null, "label": "epsilon", "order": 14, "type": "string", "value": "1e-08"}, "alpha": {"description": "L2 penalty (regularization term) parameter.\n", "editor": null, "label": "alpha", "order": 15, "type": "string", "value": "5e-06"}, "momentum": {"description": "Momentum for gradient descent update. Should be between 0 and 1. Only\nused when solver='sgd'.\n", "editor": null, "label": "momentum", "order": 16, "type": "string", "value": "0.9"}, "learning_rate": {"description": "Learning rate schedule for weight updates.\n\n- 'constant' is a constant learning rate given by\n  'learning_rate_init'.\n\n- 'invscaling' gradually decreases the learning rate ``learning_rate_``\n  at each time step 't' using an inverse scaling exponent of 'power_t'.\n  effective_learning_rate = learning_rate_init / pow(t, power_t)\n\n- 'adaptive' keeps the learning rate constant to\n  'learning_rate_init' as long as training loss keeps decreasing.\n  Each time two consecutive epochs fail to decrease training loss by at\n  least tol, or fail to increase validation score by at least tol if\n  'early_stopping' is on, the current learning rate is divided by 5.\n\nOnly used when ``solver='sgd'``.\n", "editor": null, "label": "learning_rate", "order": 17, "type": "string", "value": "adaptive"}, "early_stopping": {"description": "Whether to use early stopping to terminate training when validation\nscore is not improving. If set to true, it will automatically set\naside 10% of training data as validation and terminate training when\nvalidation score is not improving by at least tol for two consecutive\nepochs.\nOnly effective when solver='sgd' or 'adam'\n", "editor": null, "label": "early_stopping", "order": 18, "type": "string", "value": "False"}, "hidden_layer_sizes": {"description": "The ith element represents the number of neurons in the ith\nhidden layer.\n", "editor": null, "label": "hidden_layer_sizes", "order": 19, "type": "string", "value": "800"}}]]></parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{a7da40e2-1a10-4b4c-97ab-b7977e0ff77d}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.tuple.tuple2" port_format="1.1" uuid="{26290bc1-56ce-45ff-9b08-6e1acb97fb10}" x="2750.0" y="2300.0">
    <label>Tuple</label>
    <description></description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{558c30e8-efc2-4c3b-b3ea-bf9a5d6e5ebf}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <input key="input" scheme="hdf5" type="[image]" type_base="&lt;b&gt;" uuid="{d81cccd4-e3d0-40e7-9676-70e66ac07484}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="output" scheme="hdf5" type="(table, [image])" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{c1087bf7-7fac-442e-ab71-720f0541ba64}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.pipeline" port_format="1.1" uuid="{27b68744-2e14-4e7e-a258-5f4da2e8b197}" x="2025.0" y="2000.0">
    <label>Pipeline</label>
    <description>Applies one model on the output of another</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "names": {"description": "Comma separated list of model names, eg. Rescale, SVC. If fewer names are given than models then default names will be used.", "editor": null, "label": "Model names: ", "order": 0, "type": "string", "value": ""}, "flatten": {"description": "Flattens multiple pipeline objects into a single pipeline containing all models", "editor": null, "label": "Flatten: ", "order": 1, "type": "boolean", "value": "True"}}]]></parameters>
    <ports>
      <input key="models" scheme="hdf5" type="model" type_base="model" uuid="{0da407b2-f5ab-4094-a87f-441c8d977ca6}">
        <label>models</label>
        <description>models</description>
      </input>
      <input key="models" scheme="hdf5" type="model" type_base="model" uuid="{3eaff831-a813-44b7-8a8d-e4d817a74b61}">
        <label>models</label>
        <description>models</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{d30b07c2-cbfc-4006-b893-3cc7cb587fb7}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.simple_split" port_format="1.1" uuid="{55e65837-7afd-4e02-9795-9d0732a940bb}" x="2025.0" y="2100.0">
    <label>Simple train-test split</label>
    <description>Splits input data into a training and a test dataset</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "test_size": {"description": "Size of test data as fraction (< 1) of all data", "editor": null, "label": "Test size", "order": 0, "type": "float", "value": 0.25}, "stratify": {"description": "Stratify data using Y as class labels", "editor": null, "label": "Stratify", "order": 1, "type": "boolean", "value": true}}]]></parameters>
    <ports>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{65976a7f-fb86-4e99-b7d3-e6320de69659}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y" scheme="hdf5" type="table" type_base="table" uuid="{c6cfc407-44b2-428e-9ef6-e9fa147c0d7f}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="X_train" scheme="hdf5" type="table" type_base="table" uuid="{3610ff80-9f97-4748-a890-76b7962f7413}">
        <label>X_train</label>
        <description>X_train</description>
      </output>
      <output key="Y_train" scheme="hdf5" type="table" type_base="table" uuid="{02752f97-dd2b-45f7-9d21-617ff5000fc7}">
        <label>Y_train</label>
        <description>Y_train</description>
      </output>
      <output key="X_test" scheme="hdf5" type="table" type_base="table" uuid="{50d6f3b0-9483-4835-94ff-290d7cfcdb65}">
        <label>X_test</label>
        <description>X_test</description>
      </output>
      <output key="Y_test" scheme="hdf5" type="table" type_base="table" uuid="{5cd5561b-7e0b-4e7e-bbad-c1f0fa1412fe}">
        <label>Y_test</label>
        <description>Y_test</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.features_to_images" uuid="{5937431a-5c9c-4a4a-a603-7b23293a288a}" x="2925.0" y="1900.0">
    <label>Images from eigenvectors</label>
    <description>Converts each row into a separate image in a list</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "channels": {"description": "Number of channels in image", "editor": null, "label": "Channels", "order": 0, "type": "integer", "value": 1}, "width": {"description": "Width of image. If 0 then compute automatically assuming square input image", "editor": null, "label": "Width", "order": 1, "type": "integer", "value": 47}}]]></parameters>
    <ports>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{2e28d269-0bfa-4ae2-892b-0f04787c04cb}">
        <label>Dataset to be converted</label>
        <description>Dataset to be converted</description>
      </input>
      <output key="out" scheme="hdf5" type="[image]" type_base="[image]" uuid="{106ac2c9-e7d9-44b0-85ab-2bdb68f5dc60}">
        <label>Output images</label>
        <description>Output images</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.extract_attributes" uuid="{5bd14d23-4fb5-461d-8b6b-2daaae0e5802}" x="2675.0" y="1900.0">
    <label>eigenvectors</label>
    <description>Extract attributes from a fitted model, requires model dependent name for the attribute</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "attribute": {"description": "Name of attribute to extract", "editor": null, "label": "attribute", "order": 0, "type": "string", "value": "Principal Component Analysis (PCA)__components_"}}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{d816f3d8-3d09-418b-bc65-2a3277517cd2}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <output key="out" scheme="hdf5" type="[table]" type_base="[table]" uuid="{addb050b-baf8-48c9-af90-391d115d18a4}">
        <label>Attributes</label>
        <description>Attributes</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.example_datasets" uuid="{5f4d8bf3-bd20-4dbb-8adb-d833991bb9c5}" x="1850.0" y="2100.0">
    <label>Example datasets</label>
    <description>Exposes the example datasets from sklearn</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "dataset": {"description": "Choose from one of the default toy datasets", "label": "Dataset", "order": 0, "type": "string", "value": "LFW Faces", "editor": {"type": "combobox", "options": ["Digits", "Iris", "Boston", "linnerud", "LFW faces", "Diabetes"]}}, "classnames": {"description": "Attempts to use class names as Y", "editor": null, "label": "Class names", "order": 1, "type": "boolean", "value": 2}, "color": {"description": "", "editor": null, "label": "color", "order": 2, "type": "boolean", "value": 0}, "min pictures": {"description": "Minimum number of pictures per person required for including a person in the LFW dataset", "editor": null, "label": "min pictures", "order": 2, "type": "integer", "value": 10}, "min_pictures": {"description": "Minimum number of pictures per person required for including a person in the LFW dataset", "editor": null, "label": "min_pictures", "order": 3, "type": "integer", "value": 70}, "resize": {"description": "Resize LFW pictures, default 0.5 give size 62x47 images", "editor": null, "label": "resize", "order": 4, "type": "float", "value": 0.5}}]]></parameters>
    <ports>
      <output key="X" scheme="hdf5" type="table" type_base="table" uuid="{df3cc4e4-6758-4d2f-a3ca-d819d9cd647a}">
        <label>X</label>
        <description>X</description>
      </output>
      <output key="Y" scheme="hdf5" type="table" type_base="table" uuid="{e41fc96e-f1f5-48c3-a570-e5e38076722d}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.pca" uuid="{677bcbbf-b449-49bc-89f4-7f529fcbed21}" x="1850.0" y="1875.0">
    <label>Principal Component Analysis (PCA)</label>
    <description>Linear dimensionality reduction using Singular Value Decomposition of the data to project it to a lower dimensional space.</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "iterated_power": {"description": "Number of iterations for the power method computed by\nsvd_solver == 'randomized'.\n\n.. versionadded:: 0.18.0\n", "editor": null, "label": "iterated_power", "order": 0, "type": "string", "value": "auto"}, "svd_solver": {"description": "auto :\n    the solver is selected by a default policy based on `X.shape` and\n    `n_components`: if the input data is larger than 500x500 and the\n    number of components to extract is lower than 80% of the smallest\n    dimension of the data, then the more efficient 'randomized'\n    method is enabled. Otherwise the exact full SVD is computed and\n    optionally truncated afterwards.\nfull :\n    run exact full SVD calling the standard LAPACK solver via\n    `scipy.linalg.svd` and select the components by postprocessing\narpack :\n    run SVD truncated to n_components calling ARPACK solver via\n    `scipy.sparse.linalg.svds`. It requires strictly\n    0 < n_components < X.shape\nrandomized :\n    run randomized SVD by the method of Halko et al.\n\n.. versionadded:: 0.18.0\n", "editor": null, "label": "svd_solver", "order": 1, "type": "string", "value": "auto"}, "n_components": {"description": "Number of components to keep.\nif n_components is not set all components are kept::\n\n    n_components == min(n_samples, n_features)\n\nif n_components == 'mle' and svd_solver == 'full', Minka's MLE is used\nto guess the dimension\nif ``0 < n_components < 1`` and svd_solver == 'full', select the number\nof components such that the amount of variance that needs to be\nexplained is greater than the percentage specified by n_components\nn_components cannot be equal to n_features for svd_solver == 'arpack'.\n", "editor": null, "label": "n_components", "order": 2, "type": "string", "value": "50"}, "tol": {"description": "Tolerance for singular values computed by svd_solver == 'arpack'.\n\n.. versionadded:: 0.18.0\n", "editor": null, "label": "tol", "order": 3, "type": "string", "value": "0.0"}, "whiten": {"description": "When True (False by default) the `components_` vectors are multiplied\nby the square root of n_samples and then divided by the singular values\nto ensure uncorrelated outputs with unit component-wise variances.\n\nWhitening will remove some information from the transformed signal\n(the relative variance scales of the components) but can sometime\nimprove the predictive accuracy of the downstream estimators by\nmaking their data respect some hard-wired assumptions.\n", "editor": null, "label": "whiten", "order": 4, "type": "string", "value": "False"}}]]></parameters>
    <ports>
      <output key="model" scheme="hdf5" type="model" type_base="model" uuid="{0baba89d-1567-4f68-a656-ee4b511c714f}">
        <label>Model</label>
        <description>Model</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.getitemlist" uuid="{7695844a-145e-4177-a143-cf0b396336eb}" x="2800.0" y="1900.0">
    <label>Get Item List</label>
    <description></description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json"><![CDATA[{"type": "group", "index": {"description": "Choose item index in list.", "label": "Index", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["0"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}]]></parameters>
    <ports>
      <input key="list" scheme="hdf5" type="[table]" type_base="[&lt;a&gt;]" uuid="{5311e853-e1e3-4404-85c4-14f5ed276770}">
        <label>Input List</label>
        <description>Input List</description>
      </input>
      <output key="item" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{40fed15d-c1ef-4df5-8dc0-b6363f31b2b9}">
        <label>Output selected Item from List</label>
        <description>Output selected Item from List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.calculatortable" uuid="{9480d483-5690-451e-8b6a-a1d215794181}" x="1925.0" y="2225.0">
    <label>#pics per person</label>
    <description>Performs user-defined python calculations</description>
    <author>Greger Cronquist &lt;greger.cronquist@combine.se&gt;, Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;, Sara Gustafzelius &lt;sara.gustafzelius@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(c) 2016 Combine Control Systems AB</copyright>
    <version>3.0</version>
    <parameters type="json"><![CDATA[{"type": "group", "calc_list": {"description": "List of calculations.", "editor": null, "label": "List of calculations", "mode": "selected", "order": 0, "passthrough": false, "type": "list", "list": ["${name} = np.unique(table.col('Y').data) #ENABLED:1", "${count} = np.array([np.sum(table.col('Y').data == y) for y in table.col('name').data]) #ENABLED:1"], "value": [0], "value_names": []}, "same_length_res": {"description": "Gather all the results generated from an incoming data into a common output table. This requires that the results all have the same length. An error will be given if the lengths of the outgoing results differ.", "editor": null, "label": "Put results in common outputs.", "order": 1, "type": "boolean", "value": true}, "copy_input": {"description": "If enabled the incoming data will be copied to the output before running the calculations. This requires that the results will all have the same length. An exception will be raised if the lengths of the outgoing results differ.", "editor": null, "label": "Copy input", "order": 2, "type": "boolean", "value": false}, "fail_strategy": {"description": "Decide how a failed calculation should be handled", "label": "Action on calculation failure", "mode": "selected", "order": 3, "passthrough": false, "type": "list", "list": ["Exception", "Skip calculation"], "value": [0], "value_names": [], "editor": {"type": "combobox", "options": []}}}]]></parameters>
    <ports>
      <input key="port0" scheme="hdf5" type="table" type_base="table" uuid="{60161b29-eb75-4da9-acab-f5e72e0c9136}">
        <label>Input Table</label>
        <description>Input Table</description>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{41136416-50d3-49ea-a954-e67f3c3c80bd}">
        <label>Table with results from the calculation performed by the node.</label>
        <description>Table with results from the calculation performed by the node.</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.score" uuid="{a8488e58-f284-47bd-b30e-12cb4ee5b31a}" x="2650.0" y="2100.0">
    <label>Score</label>
    <description>Predicts Y' from X and compares with input Y. Returns mean accuracy (sum(Y' == Y) / rows)</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{710009ae-fb34-4467-8be6-96cb1a9013ad}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{5702cf7c-a808-4b03-bfe5-44423173e13f}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y" scheme="hdf5" type="table" type_base="table" uuid="{88bb6d58-9683-4dee-8b3e-a2d7a6f92d82}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="Score" scheme="hdf5" type="table" type_base="table" uuid="{593546ab-d1d1-4418-bc46-2970fdb225c3}">
        <label>Score</label>
        <description>Score</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.features_to_images" uuid="{c88e600c-b72e-4125-8628-0bbc17a181b5}" x="2125.0" y="2250.0">
    <label>test images</label>
    <description>Converts each row into a separate image in a list</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group", "channels": {"description": "Number of channels in image", "editor": null, "label": "Channels", "order": 0, "type": "integer", "value": 1}, "width": {"description": "Width of image. If 0 then compute automatically assuming square input image", "editor": null, "label": "Width", "order": 1, "type": "integer", "value": 47}}]]></parameters>
    <ports>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{93227edb-4c09-4be4-bcff-68eda7022baf}">
        <label>Dataset to be converted</label>
        <description>Dataset to be converted</description>
      </input>
      <output key="out" scheme="hdf5" type="[image]" type_base="[image]" uuid="{52772e50-06ce-4e04-9734-b4c75fdbf4b7}">
        <label>Output images</label>
        <description>Output images</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.predict" uuid="{e99dbe02-ce77-481e-9336-a41ba8880f76}" x="2650.0" y="2250.0">
    <label>Predict</label>
    <description>Uses a model to predict Y given X</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{9a6a0b6a-e082-41b0-a787-bf2c7fe65177}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{de3a427c-f166-4e68-b7ad-f15bac201728}">
        <label>X</label>
        <description>X</description>
      </input>
      <output key="Y" scheme="hdf5" type="table" type_base="table" uuid="{199baf31-662a-4fc6-82ed-138f5f9a1d47}">
        <label>Y</label>
        <description>Y</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.machinelearning.fit" port_format="1.1" uuid="{f6a79e6c-481e-4675-acb2-b6be64c651ca}" x="2475.0" y="2075.0">
    <label>Fit</label>
    <description>Trains a model. Use "Create Input Port &gt; Y" for supervised training</description>
    <author>Mathias Broxvall</author>
    <copyright>(C) 2017 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json"><![CDATA[{"type": "group"}]]></parameters>
    <ports>
      <input key="in-model" scheme="hdf5" type="model" type_base="model" uuid="{a745c8bd-4bb0-4c22-bbf4-0e2b3612d7b4}">
        <label>Input model</label>
        <description>Input model</description>
      </input>
      <input key="X" scheme="hdf5" type="table" type_base="table" uuid="{f6807f91-f4ac-4f49-b3e8-8b046a3bfa19}">
        <label>X</label>
        <description>X</description>
      </input>
      <input key="Y0" scheme="hdf5" type="table" type_base="table" uuid="{41e22bf3-1440-4365-ab04-d4413336ffeb}">
        <label>Y</label>
        <description>Y</description>
      </input>
      <output key="out-model" scheme="hdf5" type="model" type_base="model" uuid="{c6f71ce2-8cdb-4949-983f-d7d0012dc77d}">
        <label>Output model</label>
        <description>Output model</description>
      </output>
    </ports>
  </node>
  <connection type="model" uuid="{01a19e61-8430-4252-a2cb-7ad89e046750}">
    <source node="{f6a79e6c-481e-4675-acb2-b6be64c651ca}" port="{c6f71ce2-8cdb-4949-983f-d7d0012dc77d}"/>
    <destination node="{e99dbe02-ce77-481e-9336-a41ba8880f76}" port="{9a6a0b6a-e082-41b0-a787-bf2c7fe65177}"/>
  </connection>
  <connection type="table" uuid="{01a61470-5a7f-4ef6-86c7-c78f2a24de03}">
    <source node="{55e65837-7afd-4e02-9795-9d0732a940bb}" port="{50d6f3b0-9483-4835-94ff-290d7cfcdb65}"/>
    <destination node="{e99dbe02-ce77-481e-9336-a41ba8880f76}" port="{de3a427c-f166-4e68-b7ad-f15bac201728}"/>
  </connection>
  <connection type="[table]" uuid="{033dca3b-89e1-4627-98e6-24294135efc3}">
    <source node="{5bd14d23-4fb5-461d-8b6b-2daaae0e5802}" port="{addb050b-baf8-48c9-af90-391d115d18a4}"/>
    <destination node="{7695844a-145e-4177-a143-cf0b396336eb}" port="{5311e853-e1e3-4404-85c4-14f5ed276770}"/>
  </connection>
  <connection type="table" uuid="{03c1f755-9d39-41dd-b636-0163f9f14142}">
    <source node="{55e65837-7afd-4e02-9795-9d0732a940bb}" port="{50d6f3b0-9483-4835-94ff-290d7cfcdb65}"/>
    <destination node="{c88e600c-b72e-4125-8628-0bbc17a181b5}" port="{93227edb-4c09-4be4-bcff-68eda7022baf}"/>
  </connection>
  <connection type="table" uuid="{057fc89a-92ba-4bb0-9fc2-39423f5e5f1c}">
    <source node="{5f4d8bf3-bd20-4dbb-8adb-d833991bb9c5}" port="{e41fc96e-f1f5-48c3-a570-e5e38076722d}"/>
    <destination node="{9480d483-5690-451e-8b6a-a1d215794181}" port="{60161b29-eb75-4da9-acab-f5e72e0c9136}"/>
  </connection>
  <connection type="table" uuid="{0da88d5a-1f8a-4209-9f9d-76523b3b1947}">
    <source node="{55e65837-7afd-4e02-9795-9d0732a940bb}" port="{5cd5561b-7e0b-4e7e-bbad-c1f0fa1412fe}"/>
    <destination node="{a8488e58-f284-47bd-b30e-12cb4ee5b31a}" port="{88bb6d58-9683-4dee-8b3e-a2d7a6f92d82}"/>
  </connection>
  <connection type="model" uuid="{100e1be9-9da4-4e28-a76b-b6c38b2771cc}">
    <source node="{f6a79e6c-481e-4675-acb2-b6be64c651ca}" port="{c6f71ce2-8cdb-4949-983f-d7d0012dc77d}"/>
    <destination node="{5bd14d23-4fb5-461d-8b6b-2daaae0e5802}" port="{d816f3d8-3d09-418b-bc65-2a3277517cd2}"/>
  </connection>
  <connection type="table" uuid="{16969494-fae6-42f6-b228-cbc7a6429653}">
    <source node="{5f4d8bf3-bd20-4dbb-8adb-d833991bb9c5}" port="{e41fc96e-f1f5-48c3-a570-e5e38076722d}"/>
    <destination node="{55e65837-7afd-4e02-9795-9d0732a940bb}" port="{c6cfc407-44b2-428e-9ef6-e9fa147c0d7f}"/>
  </connection>
  <connection type="model" uuid="{264c0f67-7e88-4ab0-82f9-7ff072a23e27}">
    <source node="{f6a79e6c-481e-4675-acb2-b6be64c651ca}" port="{c6f71ce2-8cdb-4949-983f-d7d0012dc77d}"/>
    <destination node="{a8488e58-f284-47bd-b30e-12cb4ee5b31a}" port="{710009ae-fb34-4467-8be6-96cb1a9013ad}"/>
  </connection>
  <connection type="model" uuid="{38cf988f-5a8f-4e10-8f54-65581ae5c313}">
    <source node="{08e86a64-8487-416f-9606-e5e22bd39bc0}" port="{a7da40e2-1a10-4b4c-97ab-b7977e0ff77d}"/>
    <destination node="{27b68744-2e14-4e7e-a258-5f4da2e8b197}" port="{3eaff831-a813-44b7-8a8d-e4d817a74b61}"/>
  </connection>
  <connection type="table" uuid="{54d7181b-9b74-4480-a675-075901fb7a5f}">
    <source node="{55e65837-7afd-4e02-9795-9d0732a940bb}" port="{02752f97-dd2b-45f7-9d21-617ff5000fc7}"/>
    <destination node="{f6a79e6c-481e-4675-acb2-b6be64c651ca}" port="{41e22bf3-1440-4365-ab04-d4413336ffeb}"/>
  </connection>
  <connection type="table" uuid="{6113fdeb-7db6-4a36-a445-25ebdbc25625}">
    <source node="{55e65837-7afd-4e02-9795-9d0732a940bb}" port="{3610ff80-9f97-4748-a890-76b7962f7413}"/>
    <destination node="{f6a79e6c-481e-4675-acb2-b6be64c651ca}" port="{f6807f91-f4ac-4f49-b3e8-8b046a3bfa19}"/>
  </connection>
  <connection type="model" uuid="{6f8d21f5-f315-41d7-afc6-843678fc309e}">
    <source node="{677bcbbf-b449-49bc-89f4-7f529fcbed21}" port="{0baba89d-1567-4f68-a656-ee4b511c714f}"/>
    <destination node="{27b68744-2e14-4e7e-a258-5f4da2e8b197}" port="{0da407b2-f5ab-4094-a87f-441c8d977ca6}"/>
  </connection>
  <connection type="table" uuid="{76b1d8a8-3d2b-4b83-b94f-0982172c13ba}">
    <source node="{e99dbe02-ce77-481e-9336-a41ba8880f76}" port="{199baf31-662a-4fc6-82ed-138f5f9a1d47}"/>
    <destination node="{26290bc1-56ce-45ff-9b08-6e1acb97fb10}" port="{558c30e8-efc2-4c3b-b3ea-bf9a5d6e5ebf}"/>
  </connection>
  <connection type="[image]" uuid="{a9f67bae-1d88-422a-a7c4-c31dbd67b61a}">
    <source node="{c88e600c-b72e-4125-8628-0bbc17a181b5}" port="{52772e50-06ce-4e04-9734-b4c75fdbf4b7}"/>
    <destination node="{26290bc1-56ce-45ff-9b08-6e1acb97fb10}" port="{d81cccd4-e3d0-40e7-9676-70e66ac07484}"/>
  </connection>
  <connection type="table" uuid="{b6a13da8-376a-4424-9b00-a54b7080faf9}">
    <source node="{5f4d8bf3-bd20-4dbb-8adb-d833991bb9c5}" port="{df3cc4e4-6758-4d2f-a3ca-d819d9cd647a}"/>
    <destination node="{55e65837-7afd-4e02-9795-9d0732a940bb}" port="{65976a7f-fb86-4e99-b7d3-e6320de69659}"/>
  </connection>
  <connection type="model" uuid="{b6fbc8fa-6d29-4acf-a493-d411728b0041}">
    <source node="{27b68744-2e14-4e7e-a258-5f4da2e8b197}" port="{d30b07c2-cbfc-4006-b893-3cc7cb587fb7}"/>
    <destination node="{f6a79e6c-481e-4675-acb2-b6be64c651ca}" port="{a745c8bd-4bb0-4c22-bbf4-0e2b3612d7b4}"/>
  </connection>
  <connection type="table" uuid="{c80c456f-6acc-4d27-8d17-43b10a68adef}">
    <source node="{55e65837-7afd-4e02-9795-9d0732a940bb}" port="{50d6f3b0-9483-4835-94ff-290d7cfcdb65}"/>
    <destination node="{a8488e58-f284-47bd-b30e-12cb4ee5b31a}" port="{5702cf7c-a808-4b03-bfe5-44423173e13f}"/>
  </connection>
  <connection type="table" uuid="{c865c156-9e34-4da2-8ca6-e7e54397d167}">
    <source node="{7695844a-145e-4177-a143-cf0b396336eb}" port="{40fed15d-c1ef-4df5-8dc0-b6363f31b2b9}"/>
    <destination node="{5937431a-5c9c-4a4a-a603-7b23293a288a}" port="{2e28d269-0bfa-4ae2-892b-0f04787c04cb}"/>
  </connection>
  <text color="Light" height="225.0" uuid="{0e02d400-0370-42dd-88b8-a7a0fcd1ff12}" width="400.0" x="2625.0" y="1800.0">Visualization of eigenvectors.

Make sure to use color range "normalize"</text>
  <text color="Light" height="150.0" uuid="{4784d537-41d9-4c38-a897-8c9c5ac42103}" width="325.0" x="2625.0" y="2025.0">Final score just below 80% when classifying between 7 different faces</text>
  <text color="Beige" height="175.0" uuid="{769971eb-1c2c-4881-bc2f-13b8b13579de}" width="575.0" x="1800.0" y="1675.0">This flow shows and example how to perform face recognition using the 'eigenfaces' method. The faces used comes from the 'faces in the wild' dataset that is automatically downloaded from the internet the first time the flow is run. 

The method lacks scale and rotation invariance and should not be used for face detection or face recognition in production - but rather serve as an illustrative example of how to use the nodes</text>
  <text color="Light" height="225.0" uuid="{87f1aecf-9372-4828-8b45-e82cf0ae948a}" width="325.0" x="2625.0" y="2175.0">Visualize the predicted name compared to actual face. </text>
  <text color="Beige" height="150.0" uuid="{b612b348-7cff-422b-917d-292759ab3b7d}" width="275.0" x="1800.0" y="2300.0">Count how many pictures we have of each face. 

As you can see the dataset is highly unbalanced which is not recommended for most classification problems. </text>
</flow>

<?xml version='1.0' encoding='US-ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" uuid="{25ffd584-aadd-4491-b7c0-07262654721c}">
  <label></label>
  <environment type="json">{"NO_TEST": ""}</environment>
  <ports/>
  <node id="org.sysess.sympathy.data.json.importjson" port_format="1.1" uuid="{0c93e2c0-a232-4a8c-aed1-4700385efb34}" x="1600.0" y="1925.0">
    <label>JSON</label>
    <version>0.1</version>
    <description></description>
    <author>Samuel Genheden</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "active_importer": {
        "editor": null,
        "label": "Importer",
        "order": 0,
        "type": "string",
        "value": "Auto"
      },
      "custom_importer_data": {
        "Auto": {
          "label": "",
          "order": 0,
          "type": "group"
        },
        "label": "",
        "order": 1,
        "type": "group"
      },
      "fail_strategy": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Action on import failure",
        "list": ["Exception", "Create Empty Entry"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [0],
        "value_names": ["Exception"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="" scheme="text" type="datasource" type_base="datasource" uuid="{71f51c56-11cd-42a9-a2c2-266e899052d6}">
        <label>Datasource</label>
      </input>
      <output key="port1" scheme="hdf5" type="json" type_base="json" uuid="{267f49b9-84c2-4f11-99eb-951fb6fe8709}">
        <label>Imported Json</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.html.htmltotext" port_format="1.1" uuid="{11e9ab14-10e0-4e2c-9ee3-9a31b4ad2868}" x="2550.0" y="2300.0">
    <label>HTML to text</label>
    <version>1.0</version>
    <description>Convert HTML to text.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="html" type_base="html" uuid="{43e848ef-ba4c-4864-8317-3c05c4822c20}">
        <label>HTML input</label>
      </input>
      <output key="out" scheme="hdf5" type="text" type_base="text" uuid="{b6b631bc-8893-43e4-95c0-d2391aebf506}">
        <label>Text output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.datasources.filedatasource" port_format="1.1" uuid="{13e916ba-2218-4036-9bfb-82470ed31881}" x="1475.0" y="1825.0">
    <label>GeoJSON data1</label>
    <version>1.1</version>
    <description>Select a data source.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "datasource_type": {
        "editor": null,
        "label": "Datasource type",
        "list": ["File", "Database", "Url"],
        "mode": "selected",
        "order": 11,
        "type": "list",
        "value": [0],
        "value_names": ["File"]
      },
      "db_connection_string": {
        "editor": null,
        "label": "Connection string",
        "order": 8,
        "type": "string",
        "value": ""
      },
      "db_databasename": {
        "editor": null,
        "label": "Database name",
        "order": 5,
        "type": "string",
        "value": ""
      },
      "db_driver": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Database driver",
        "list": ["SQL Server"],
        "mode": "selected",
        "order": 3,
        "type": "list",
        "value": [0],
        "value_names": ["SQL Server"]
      },
      "db_method": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": ["ODBC", "SQLAlchemy"],
          "type": "combobox"
        },
        "label": "Database connection method",
        "order": 2,
        "type": "string",
        "value": "ODBC"
      },
      "db_password": {
        "editor": null,
        "label": "Password",
        "order": 7,
        "type": "string",
        "value": ""
      },
      "db_servername": {
        "editor": null,
        "label": "Server name",
        "order": 4,
        "type": "string",
        "value": ""
      },
      "db_sqlalchemy_engine_url": {
        "editor": null,
        "label": "SQLAlchemy engine URL",
        "order": 1,
        "type": "string",
        "value": "mssql+pyodbc:///"
      },
      "db_user": {
        "editor": null,
        "label": "User",
        "order": 6,
        "type": "string",
        "value": ""
      },
      "filename": {
        "editor": {
          "filter": ["Any files (*)"],
          "states": null,
          "type": "filename"
        },
        "label": "Filename",
        "order": 0,
        "type": "string",
        "value": "0-2.geojson"
      },
      "type": "group",
      "url_env": {
        "description": "Environment for URL. Used as headers in case of HTTP URL. Input as a Python expression that evaluates to.",
        "editor": {
          "headers": ["Name", "Value"],
          "type": "table",
          "types": ["text", "text"],
          "unique": ["Name"]
        },
        "label": "Url environment",
        "order": 10,
        "type": "json",
        "value": []
      },
      "url_str": {
        "editor": null,
        "label": "URL string",
        "order": 9,
        "type": "string",
        "value": ""
      }
    }
    </parameters>
    <ports>
      <output key="port1" scheme="text" type="datasource" type_base="datasource" uuid="{c233ed46-3cd1-4152-861f-9b3c1f347432}">
        <label>Datasource with path to file</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.empty" port_format="1.1" uuid="{1994d22a-90b0-4410-b9e4-649505172738}" x="1475.0" y="1725.0">
    <label>Empty</label>
    <version>1.1</version>
    <description>Generate empty data of inferred or specified type</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(C) 2016 Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "datatype": {
        "editor": null,
        "label": "Datatype",
        "order": 0,
        "type": "string",
        "value": "&lt;a&gt;"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="" scheme="hdf5" type="{json}" type_base="&lt;a&gt;" uuid="{3db97b6e-eb3f-4d82-b587-ae69ca93f9d8}">
        <label>Output port containing empty data (must be connected or specified)</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.datasources.filedatasource" port_format="1.1" uuid="{1b7ea6e3-6888-4ae0-b521-58b9f8195f13}" x="2275.0" y="2100.0">
    <label>Template file</label>
    <version>1.1</version>
    <description>Select a data source.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "datasource_type": {
        "editor": null,
        "label": "Datasource type",
        "list": ["File", "Database", "Url"],
        "mode": "selected",
        "order": 11,
        "type": "list",
        "value": [0],
        "value_names": ["File"]
      },
      "db_connection_string": {
        "editor": null,
        "label": "Connection string",
        "order": 8,
        "type": "string",
        "value": ""
      },
      "db_databasename": {
        "editor": null,
        "label": "Database name",
        "order": 5,
        "type": "string",
        "value": ""
      },
      "db_driver": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Database driver",
        "list": ["SQL Server"],
        "mode": "selected",
        "order": 3,
        "type": "list",
        "value": [0],
        "value_names": ["SQL Server"]
      },
      "db_method": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": ["ODBC", "SQLAlchemy"],
          "type": "combobox"
        },
        "label": "Database connection method",
        "order": 2,
        "type": "string",
        "value": "ODBC"
      },
      "db_password": {
        "editor": null,
        "label": "Password",
        "order": 7,
        "type": "string",
        "value": ""
      },
      "db_servername": {
        "editor": null,
        "label": "Server name",
        "order": 4,
        "type": "string",
        "value": ""
      },
      "db_sqlalchemy_engine_url": {
        "editor": null,
        "label": "SQLAlchemy engine URL",
        "order": 1,
        "type": "string",
        "value": "mssql+pyodbc:///"
      },
      "db_user": {
        "editor": null,
        "label": "User",
        "order": 6,
        "type": "string",
        "value": ""
      },
      "filename": {
        "editor": {
          "filter": ["Any files (*)"],
          "states": null,
          "type": "filename"
        },
        "label": "Filename",
        "order": 0,
        "type": "string",
        "value": "template.html"
      },
      "type": "group",
      "url_env": {
        "description": "Environment for URL. Used as headers in case of HTTP URL. Input as a Python expression that evaluates to.",
        "editor": {
          "headers": ["Name", "Value"],
          "type": "table",
          "types": ["text", "text"],
          "unique": ["Name"]
        },
        "label": "Url environment",
        "order": 10,
        "type": "json",
        "value": []
      },
      "url_str": {
        "editor": null,
        "label": "URL string",
        "order": 9,
        "type": "string",
        "value": ""
      }
    }
    </parameters>
    <ports>
      <output key="port1" scheme="text" type="datasource" type_base="datasource" uuid="{f9af7e54-58eb-43c3-adc0-89352c706999}">
        <label>Datasource with path to file</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.html.report" port_format="1.1" uuid="{1ef7cc6c-41bf-4bbb-8b29-7a024dc24050}" x="2425.0" y="2300.0">
    <label>Html report (Stand alone)</label>
    <version>0.1</version>
    <description>Create and render a Jinja2 template. Use "{{arg name}}" for access to the data.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "custom_base": {
        "editor": null,
        "label": "Use custom base",
        "order": 2,
        "type": "boolean",
        "value": false
      },
      "relative_tempfile": {
        "editor": null,
        "label": "Relative tempfile",
        "order": 3,
        "type": "boolean",
        "value": false
      },
      "standalone": {
        "editor": null,
        "label": "Standalone HTML",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "template": {
        "editor": {
          "language": "jinja",
          "type": "code"
        },
        "label": "Template:",
        "order": 0,
        "type": "string",
        "value": ""
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="in_ds" scheme="text" type="datasource" type_base="datasource" uuid="{5a5760a7-2f60-43ff-ab84-390e4877d8f2}">
        <label>Datasource input</label>
      </input>
      <input key="in" scheme="hdf5" type="(json, table)" type_base="&lt;a&gt;" uuid="{c2c927f8-a4be-4126-b5d8-7c3299767799}">
        <label>Input</label>
      </input>
      <output key="out" scheme="hdf5" type="html" type_base="html" uuid="{413111d2-cdbf-41a3-b18f-304f782ccdca}">
        <label>HTML output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.html.report" port_format="1.1" uuid="{2727a541-2968-472e-805c-5ca00a78a0c0}" x="2425.0" y="2200.0">
    <label>Html report</label>
    <version>0.1</version>
    <description>Create and render a Jinja2 template. Use "{{arg name}}" for access to the data.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "custom_base": {
        "editor": null,
        "label": "Use custom base",
        "order": 2,
        "type": "boolean",
        "value": false
      },
      "relative_tempfile": {
        "editor": null,
        "label": "Relative tempfile",
        "order": 3,
        "type": "boolean",
        "value": false
      },
      "standalone": {
        "editor": null,
        "label": "Standalone HTML",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "template": {
        "editor": {
          "language": "jinja",
          "type": "code"
        },
        "label": "Template:",
        "order": 0,
        "type": "string",
        "value": ""
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="in_ds" scheme="text" type="datasource" type_base="datasource" uuid="{92dd23ba-b856-4e79-8b31-2c7eaa33a243}">
        <label>Datasource input</label>
      </input>
      <input key="in" scheme="hdf5" type="(json, table)" type_base="&lt;a&gt;" uuid="{0bb791e4-dc6d-490c-91db-6e027c83ef87}">
        <label>Input</label>
      </input>
      <output key="out" scheme="hdf5" type="html" type_base="html" uuid="{c23389c3-66ba-4e6e-bc95-1c79b6fdda0f}">
        <label>HTML output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.dict.insert" port_format="1.1" uuid="{2b2b7ce7-501a-48c6-981a-7f27420f32b0}" x="1725.0" y="1800.0">
    <label>Insert Dict</label>
    <version></version>
    <description>Insert item in dict</description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "key": {
        "editor": null,
        "label": "Key",
        "order": 0,
        "type": "string",
        "value": "geojson"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="dict" scheme="hdf5" type="{json}" type_base="{&lt;a&gt;}" uuid="{2f27e987-e55d-48ab-99af-820fd6cd88bc}">
        <label>Dict</label>
      </input>
      <input key="item" scheme="hdf5" type="json" type_base="&lt;a&gt;" uuid="{76ab7184-fae7-410f-96c1-9ec13c2db0f1}">
        <label>Item</label>
      </input>
      <output key="dict" scheme="hdf5" type="{json}" type_base="{&lt;a&gt;}" uuid="{d0b5faf0-22f2-4ff0-8f2d-75591a2279ff}">
        <label>Dict</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.datasources.filedatasource" port_format="1.1" uuid="{3069910a-4739-493b-9dd2-638d8dc0c88f}" x="1475.0" y="1925.0">
    <label>GeoJSON data2</label>
    <version>1.1</version>
    <description>Select a data source.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "datasource_type": {
        "editor": null,
        "label": "Datasource type",
        "list": ["File", "Database", "Url"],
        "mode": "selected",
        "order": 11,
        "type": "list",
        "value": [0],
        "value_names": ["File"]
      },
      "db_connection_string": {
        "editor": null,
        "label": "Connection string",
        "order": 8,
        "type": "string",
        "value": ""
      },
      "db_databasename": {
        "editor": null,
        "label": "Database name",
        "order": 5,
        "type": "string",
        "value": ""
      },
      "db_driver": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Database driver",
        "list": ["SQL Server"],
        "mode": "selected",
        "order": 3,
        "type": "list",
        "value": [0],
        "value_names": ["SQL Server"]
      },
      "db_method": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": ["ODBC", "SQLAlchemy"],
          "type": "combobox"
        },
        "label": "Database connection method",
        "order": 2,
        "type": "string",
        "value": "ODBC"
      },
      "db_password": {
        "editor": null,
        "label": "Password",
        "order": 7,
        "type": "string",
        "value": ""
      },
      "db_servername": {
        "editor": null,
        "label": "Server name",
        "order": 4,
        "type": "string",
        "value": ""
      },
      "db_sqlalchemy_engine_url": {
        "editor": null,
        "label": "SQLAlchemy engine URL",
        "order": 1,
        "type": "string",
        "value": "mssql+pyodbc:///"
      },
      "db_user": {
        "editor": null,
        "label": "User",
        "order": 6,
        "type": "string",
        "value": ""
      },
      "filename": {
        "editor": {
          "filter": ["Any files (*)"],
          "states": null,
          "type": "filename"
        },
        "label": "Filename",
        "order": 0,
        "type": "string",
        "value": "2.1-4.geojson"
      },
      "type": "group",
      "url_env": {
        "description": "Environment for URL. Used as headers in case of HTTP URL. Input as a Python expression that evaluates to.",
        "editor": {
          "headers": ["Name", "Value"],
          "type": "table",
          "types": ["text", "text"],
          "unique": ["Name"]
        },
        "label": "Url environment",
        "order": 10,
        "type": "json",
        "value": []
      },
      "url_str": {
        "editor": null,
        "label": "URL string",
        "order": 9,
        "type": "string",
        "value": ""
      }
    }
    </parameters>
    <ports>
      <output key="port1" scheme="text" type="datasource" type_base="datasource" uuid="{c7b201b3-9f77-4348-bb68-0f76af63372d}">
        <label>Datasource with path to file</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.html.dicttogeojson" port_format="1.1" uuid="{4e496a94-5655-41ba-b7a4-62b9c28eb3d4}" x="2000.0" y="1850.0">
    <label>GeoJSON</label>
    <version>1.0</version>
    <description>Import a dict of GeoJSON data and show on a map.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="dict" scheme="hdf5" type="{json}" type_base="{json}" uuid="{a19b55ba-1ad2-4065-ad4b-71d0db8d07fa}">
        <label>Dict of JSON</label>
      </input>
      <output key="geojson" scheme="hdf5" type="geojson" type_base="geojson" uuid="{7cbb7fe9-dce9-43d2-a9c5-7b8c54d2f280}">
        <label>GeoJSON</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.fx" port_format="1.1" uuid="{5b08d008-3bf2-4d32-9c9f-7cdadd49cd7f}" x="1925.0" y="2100.0">
    <label>F(x)</label>
    <version>1.0</version>
    <description>Apply arbitrary python function(s) to data.</description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "copy_input": {
        "editor": null,
        "label": "Copy input",
        "order": 0,
        "type": "boolean",
        "value": true
      },
      "selected_functions": {
        "editor": {
          "edit": false,
          "filter": true,
          "mode": true,
          "selection": "multi",
          "type": "listview"
        },
        "label": "Select functions",
        "list": ["GeneratePlots"],
        "mode": "selected",
        "order": 1,
        "type": "list",
        "value": [0],
        "value_names": ["GeneratePlots"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="port1" scheme="text" type="datasource" type_base="datasource" uuid="{e2ad1f1a-27ab-4905-910d-5a70200ede17}">
        <label>Path to Python file with scripted functions.</label>
      </input>
      <input key="port2" scheme="hdf5" type="(json, table)" type_base="&lt;a&gt;" uuid="{96f52436-c1c1-436f-8744-f3c5aaaf3747}">
        <label>Item with data to apply functions on</label>
      </input>
      <output key="port3" scheme="hdf5" type="(json, table)" type_base="&lt;a&gt;" uuid="{9edbc2eb-a8f3-4fc7-afbb-732dc6d30317}">
        <label>Item with the results from the applied functions</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.selecttablerows" port_format="1.1" uuid="{62c35458-755f-4591-9942-2881d404254b}" x="1500.0" y="2200.0">
    <label>year &lt; 2011</label>
    <version>1.1</version>
    <description>Reduction of rows in Table according to specified filter.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "edit": true,
          "filter": true,
          "mode": true,
          "selection": "multi",
          "type": "listview"
        },
        "label": "Columns to filter",
        "list": ["id_web", "name", "model", "year", "price", "firstseen", "lastseen"],
        "mode": "selected",
        "order": 0,
        "type": "list",
        "value": [3],
        "value_names": ["year"]
      },
      "constraint": {
        "editor": null,
        "label": "Filter constraint",
        "order": 3,
        "type": "string",
        "value": "2011"
      },
      "exist": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": ["all", "any"],
          "type": "combobox"
        },
        "label": "Constraint must be satisfied in",
        "order": 1,
        "type": "string",
        "value": "all"
      },
      "limit": {
        "editor": {
          "max": 10000,
          "min": 0,
          "step": 1,
          "type": "spinbox"
        },
        "label": "Preview rows",
        "order": 6,
        "type": "integer",
        "value": 100
      },
      "predicate": {
        "editor": null,
        "label": "Custom filter",
        "order": 5,
        "type": "string",
        "value": "lambda x: x &lt; 2011"
      },
      "relation": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Relation",
        "list": ["equal", "less than", "less than or equal", "greater than", "greater than or equal", "not equal"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [1],
        "value_names": ["less than"]
      },
      "type": "group",
      "use_custom_predicate": {
        "editor": null,
        "label": "Use custom filter",
        "order": 4,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{d194116d-d9f6-4587-b03e-608a7704076a}">
        <label>Input</label>
      </input>
      <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{b19f1697-1371-4f65-a21e-bf3671b82255}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.html.htmltotext" port_format="1.1" uuid="{66ade1d8-bf64-4536-a1ab-4c129129f33d}" x="2550.0" y="2200.0">
    <label>HTML to text</label>
    <version>1.0</version>
    <description>Convert HTML to text.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="html" type_base="html" uuid="{7eeabcb6-3c8e-40b0-b195-13846b4596bb}">
        <label>HTML input</label>
      </input>
      <output key="out" scheme="hdf5" type="text" type_base="text" uuid="{11f570a8-e155-4e74-a56e-28a1799760d4}">
        <label>Text output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.importtable" port_format="1.1" uuid="{6756dc12-1a5f-4e5c-a89d-853777269964}" x="1400.0" y="2200.0">
    <label>Table</label>
    <version>1.0</version>
    <description>Data source as a table</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "active_importer": {
        "editor": null,
        "label": "Importer",
        "order": 0,
        "type": "string",
        "value": "Auto"
      },
      "custom_importer_data": {
        "Auto": {
          "label": "",
          "order": 0,
          "type": "group"
        },
        "label": "",
        "order": 1,
        "type": "group"
      },
      "fail_strategy": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Action on import failure",
        "list": ["Exception", "Create Empty Entry"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [0],
        "value_names": ["Exception"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="" scheme="text" type="datasource" type_base="datasource" uuid="{1bf1f2f2-7e56-4b13-846a-71e3191d205a}">
        <label>Datasource</label>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{0eb5a514-2c62-43c3-ab11-71e07522ce62}">
        <label>Imported Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.datasources.filedatasource" port_format="1.1" uuid="{75a407db-e365-4f47-af12-907761c49b0d}" x="1775.0" y="2050.0">
    <label>Bokeh script</label>
    <version>1.1</version>
    <description>Select a data source.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "datasource_type": {
        "editor": null,
        "label": "Datasource type",
        "list": ["File", "Database"],
        "mode": "selected",
        "order": 9,
        "type": "list",
        "value": [0],
        "value_names": ["File"]
      },
      "db_connection_string": {
        "editor": null,
        "label": "Connection string",
        "order": 8,
        "type": "string",
        "value": ""
      },
      "db_databasename": {
        "editor": null,
        "label": "Database name",
        "order": 5,
        "type": "string",
        "value": ""
      },
      "db_driver": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Database driver",
        "list": ["SQL Server"],
        "mode": "selected",
        "order": 3,
        "type": "list",
        "value": [0],
        "value_names": ["SQL Server"]
      },
      "db_method": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": ["ODBC", "SQLAlchemy"],
          "type": "combobox"
        },
        "label": "Database connection method",
        "order": 2,
        "type": "string",
        "value": "ODBC"
      },
      "db_password": {
        "editor": null,
        "label": "Password",
        "order": 7,
        "type": "string",
        "value": ""
      },
      "db_servername": {
        "editor": null,
        "label": "Server name",
        "order": 4,
        "type": "string",
        "value": ""
      },
      "db_sqlalchemy_engine_url": {
        "editor": null,
        "label": "SQLAlchemy engine URL",
        "order": 1,
        "type": "string",
        "value": "mssql+pyodbc:///"
      },
      "db_user": {
        "editor": null,
        "label": "User",
        "order": 6,
        "type": "string",
        "value": ""
      },
      "filename": {
        "editor": {
          "filter": ["Any files (*)"],
          "states": null,
          "type": "filename"
        },
        "label": "Filename",
        "order": 0,
        "type": "string",
        "value": "bokeh.py"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port1" scheme="text" type="datasource" type_base="datasource" uuid="{6038c1bb-4503-405e-9054-b5b0e77942e2}">
        <label>Datasource with path to file</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.calculatortable" port_format="1.1" uuid="{7602e2f8-ed30-454a-a1c8-045c739b67d6}" x="1950.0" y="2275.0">
    <label>Create meta data table</label>
    <version>3.0</version>
    <description>Performs user-defined python calculations</description>
    <author>Greger Cronquist, Magnus Sand&#233;n, Sara Gustafzelius &amp; Benedikt Ziegler</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "calc_list": {
        "editor": null,
        "label": "List of calculations",
        "list": ["${count} = len(${price}) #ENABLED:1", "${max_price} = max(${price}) #ENABLED:1", "${min_price} = min(${price}) #ENABLED:1", "${date} = datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S') #ENABLED:1", "${name} = 'Project cardata' #ENABLED:1"],
        "mode": "selected",
        "order": 0,
        "type": "list",
        "value": [],
        "value_names": []
      },
      "copy_input": {
        "editor": null,
        "label": "Copy input",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "fail_strategy": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Action on calculation failure",
        "list": ["Exception", "Skip calculation"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [0],
        "value_names": ["Exception"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="port0" scheme="hdf5" type="table" type_base="table" uuid="{3e2c0f46-a68b-47f0-b672-52b2ec588f5b}">
        <label>Input Table</label>
      </input>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{00528815-f4d0-4b22-907d-6a0fe62ce438}">
        <label>Table with results from the calculations.</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.tuple.tuple2" port_format="1.1" uuid="{80bc4225-cc6c-420f-a137-f3585ab1f1ba}" x="1775.0" y="2150.0">
    <label>Tuple</label>
    <version>1.0</version>
    <description></description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="json" type_base="&lt;a&gt;" uuid="{9d7d2926-c42d-4ac9-a2c9-9ee6145115b4}">
        <label>Input</label>
      </input>
      <input key="input" scheme="hdf5" type="table" type_base="&lt;b&gt;" uuid="{2dd41f43-77f2-4c4f-a8fc-6d93b7e964be}">
        <label>Input</label>
      </input>
      <output key="output" scheme="hdf5" type="(json, table)" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{66a12a13-849b-4822-ba2b-76ff2e35b2ac}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.tuple.untuple2" port_format="1.1" uuid="{84735b43-3da1-4c9d-b3a7-0222b34d5686}" x="2050.0" y="2100.0">
    <label>Untuple</label>
    <version>1.0</version>
    <description></description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="(json, table)" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{335cfd28-ede7-49ee-9cd9-d011123e1ff7}">
        <label>Input</label>
      </input>
      <output key="output" scheme="hdf5" type="json" type_base="&lt;a&gt;" uuid="{dba8be4b-361b-4148-955f-fd8cca09bf32}">
        <label>Output</label>
      </output>
      <output key="output" scheme="hdf5" type="table" type_base="&lt;b&gt;" uuid="{7a8d8730-95c0-418b-a95f-23464d9beadc}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.tuple.tuple2" port_format="1.1" uuid="{bdeabd28-5110-41d0-8681-d2e8fb797db8}" x="2275.0" y="2200.0">
    <label>Tuple</label>
    <version>1.0</version>
    <description></description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="json" type_base="&lt;a&gt;" uuid="{7827da6a-c17b-4c54-b263-5a84a11ac991}">
        <label>Input</label>
      </input>
      <input key="input" scheme="hdf5" type="table" type_base="&lt;b&gt;" uuid="{5a340a09-a911-4a7d-ad9b-ba9c729581ec}">
        <label>Input</label>
      </input>
      <output key="output" scheme="hdf5" type="(json, table)" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{488d8440-42cf-42d4-9808-db6118d3948c}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.dict.insert" port_format="1.1" uuid="{c2ffa333-e7ab-4b89-a487-3822093a6faa}" x="1875.0" y="1850.0">
    <label>Insert Dict</label>
    <version></version>
    <description>Insert item in dict</description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "key": {
        "editor": null,
        "label": "Key",
        "order": 0,
        "type": "string",
        "value": "geojson2"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="dict" scheme="hdf5" type="{json}" type_base="{&lt;a&gt;}" uuid="{bed86ef4-4395-4960-9376-326daf076c2c}">
        <label>Dict</label>
      </input>
      <input key="item" scheme="hdf5" type="json" type_base="&lt;a&gt;" uuid="{32ff0c02-028e-49b7-9ea3-bedbd4dc602f}">
        <label>Item</label>
      </input>
      <output key="dict" scheme="hdf5" type="{json}" type_base="{&lt;a&gt;}" uuid="{fa3f12c4-dcc7-4f00-ad4e-d4fff8ebcc48}">
        <label>Dict</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.datasources.filedatasource" port_format="1.1" uuid="{c67af63f-cb15-46f1-9b20-040cf4844dac}" x="1300.0" y="2200.0">
    <label>Cardata</label>
    <version>1.1</version>
    <description>Select a data source.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "datasource_type": {
        "editor": null,
        "label": "Datasource type",
        "list": ["File", "Database"],
        "mode": "selected",
        "order": 9,
        "type": "list",
        "value": [0],
        "value_names": ["File"]
      },
      "db_connection_string": {
        "editor": null,
        "label": "Connection string",
        "order": 8,
        "type": "string",
        "value": ""
      },
      "db_databasename": {
        "editor": null,
        "label": "Database name",
        "order": 5,
        "type": "string",
        "value": ""
      },
      "db_driver": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Database driver",
        "list": ["SQL Server"],
        "mode": "selected",
        "order": 3,
        "type": "list",
        "value": [0],
        "value_names": ["SQL Server"]
      },
      "db_method": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": ["ODBC", "SQLAlchemy"],
          "type": "combobox"
        },
        "label": "Database connection method",
        "order": 2,
        "type": "string",
        "value": "ODBC"
      },
      "db_password": {
        "editor": null,
        "label": "Password",
        "order": 7,
        "type": "string",
        "value": ""
      },
      "db_servername": {
        "editor": null,
        "label": "Server name",
        "order": 4,
        "type": "string",
        "value": ""
      },
      "db_sqlalchemy_engine_url": {
        "editor": null,
        "label": "SQLAlchemy engine URL",
        "order": 1,
        "type": "string",
        "value": "mssql+pyodbc:///"
      },
      "db_user": {
        "editor": null,
        "label": "User",
        "order": 6,
        "type": "string",
        "value": ""
      },
      "filename": {
        "editor": {
          "filter": ["Any files (*)"],
          "states": null,
          "type": "filename"
        },
        "label": "Filename",
        "order": 0,
        "type": "string",
        "value": "cardata.csv"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port1" scheme="text" type="datasource" type_base="datasource" uuid="{ec3a9342-2757-42ff-9d00-fbcb090e30d0}">
        <label>Datasource with path to file</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createjson" port_format="1.1" uuid="{ca0fd621-8c41-42ec-93b3-86ef6d1234b7}" x="1600.0" y="2075.0">
    <label>Manually Create JSON</label>
    <version>0.1</version>
    <description></description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "code": {
        "editor": {
          "language": "python",
          "type": "code"
        },
        "label": "",
        "order": 0,
        "type": "string",
        "value": "{}  # Empty dictionary."
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="output" scheme="hdf5" type="json" type_base="json" uuid="{84da15e1-ef74-4431-8c51-010ee663df23}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.selecttablerows" port_format="1.1" uuid="{f3fbb33d-9611-4f27-9364-c929561cafd2}" x="1600.0" y="2200.0">
    <label>price &lt; 10000</label>
    <version>1.1</version>
    <description>Reduction of rows in Table according to specified filter.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "edit": true,
          "filter": true,
          "mode": true,
          "selection": "multi",
          "type": "listview"
        },
        "label": "Columns to filter",
        "list": ["id_web", "name", "model", "year", "price", "firstseen", "lastseen"],
        "mode": "selected",
        "order": 0,
        "type": "list",
        "value": [4],
        "value_names": ["price"]
      },
      "constraint": {
        "editor": null,
        "label": "Filter constraint",
        "order": 3,
        "type": "string",
        "value": "10000"
      },
      "exist": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": ["all", "any"],
          "type": "combobox"
        },
        "label": "Constraint must be satisfied in",
        "order": 1,
        "type": "string",
        "value": "all"
      },
      "limit": {
        "editor": {
          "max": 10000,
          "min": 0,
          "step": 1,
          "type": "spinbox"
        },
        "label": "Preview rows",
        "order": 6,
        "type": "integer",
        "value": 100
      },
      "predicate": {
        "editor": null,
        "label": "Custom filter",
        "order": 5,
        "type": "string",
        "value": "lambda x: x &lt; 10000"
      },
      "relation": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Relation",
        "list": ["equal", "less than", "less than or equal", "greater than", "greater than or equal", "not equal"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [1],
        "value_names": ["less than"]
      },
      "type": "group",
      "use_custom_predicate": {
        "editor": null,
        "label": "Use custom filter",
        "order": 4,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{fb7d9c83-6fb7-4bc3-9bec-531daffcdd8d}">
        <label>Input</label>
      </input>
      <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{da3f2b2e-8452-422a-b948-767036193d87}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.json.importjson" port_format="1.1" uuid="{f86f0e8d-6d3e-4911-a95a-910d051d66ac}" x="1600.0" y="1825.0">
    <label>JSON</label>
    <version>0.1</version>
    <description></description>
    <author>Samuel Genheden</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "active_importer": {
        "editor": null,
        "label": "Importer",
        "order": 0,
        "type": "string",
        "value": "Auto"
      },
      "custom_importer_data": {
        "Auto": {
          "label": "",
          "order": 0,
          "type": "group"
        },
        "label": "",
        "order": 1,
        "type": "group"
      },
      "fail_strategy": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Action on import failure",
        "list": ["Exception", "Create Empty Entry"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [0],
        "value_names": ["Exception"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="" scheme="text" type="datasource" type_base="datasource" uuid="{0849c424-aa2b-4d8c-b84e-169715908389}">
        <label>Datasource</label>
      </input>
      <output key="port1" scheme="hdf5" type="json" type_base="json" uuid="{e7863674-627f-4752-b483-33fc7d18c05a}">
        <label>Imported Json</label>
      </output>
    </ports>
  </node>
  <connection type="(json, table)" uuid="{10abab62-bb8f-4290-876c-abd266efb824}">
    <source node="{80bc4225-cc6c-420f-a137-f3585ab1f1ba}" port="{66a12a13-849b-4822-ba2b-76ff2e35b2ac}"/>
    <destination node="{5b08d008-3bf2-4d32-9c9f-7cdadd49cd7f}" port="{96f52436-c1c1-436f-8744-f3c5aaaf3747}"/>
  </connection>
  <connection type="table" uuid="{1acb3e03-93f6-4e29-a758-1acccb84f46a}">
    <source node="{7602e2f8-ed30-454a-a1c8-045c739b67d6}" port="{00528815-f4d0-4b22-907d-6a0fe62ce438}"/>
    <destination node="{bdeabd28-5110-41d0-8681-d2e8fb797db8}" port="{5a340a09-a911-4a7d-ad9b-ba9c729581ec}"/>
  </connection>
  <connection type="table" uuid="{26208b63-0342-4e84-921e-970c97979a06}">
    <source node="{f3fbb33d-9611-4f27-9364-c929561cafd2}" port="{da3f2b2e-8452-422a-b948-767036193d87}"/>
    <destination node="{7602e2f8-ed30-454a-a1c8-045c739b67d6}" port="{3e2c0f46-a68b-47f0-b672-52b2ec588f5b}"/>
  </connection>
  <connection type="json" uuid="{38f3fa9a-910b-42c2-8ec4-e5fea649253a}">
    <source node="{ca0fd621-8c41-42ec-93b3-86ef6d1234b7}" port="{84da15e1-ef74-4431-8c51-010ee663df23}"/>
    <destination node="{80bc4225-cc6c-420f-a137-f3585ab1f1ba}" port="{9d7d2926-c42d-4ac9-a2c9-9ee6145115b4}"/>
  </connection>
  <connection type="datasource" uuid="{473e11a4-797a-448e-b4d7-4929146eef82}">
    <source node="{75a407db-e365-4f47-af12-907761c49b0d}" port="{6038c1bb-4503-405e-9054-b5b0e77942e2}"/>
    <destination node="{5b08d008-3bf2-4d32-9c9f-7cdadd49cd7f}" port="{e2ad1f1a-27ab-4905-910d-5a70200ede17}"/>
  </connection>
  <connection type="html" uuid="{48f809df-282d-43ae-b175-a77fc72aead5}">
    <source node="{1ef7cc6c-41bf-4bbb-8b29-7a024dc24050}" port="{413111d2-cdbf-41a3-b18f-304f782ccdca}"/>
    <destination node="{11e9ab14-10e0-4e2c-9ee3-9a31b4ad2868}" port="{43e848ef-ba4c-4864-8317-3c05c4822c20}"/>
  </connection>
  <connection type="datasource" uuid="{51c7aca1-0d2c-47c9-9085-87ed7efcd6e3}">
    <source node="{3069910a-4739-493b-9dd2-638d8dc0c88f}" port="{c7b201b3-9f77-4348-bb68-0f76af63372d}"/>
    <destination node="{0c93e2c0-a232-4a8c-aed1-4700385efb34}" port="{71f51c56-11cd-42a9-a2c2-266e899052d6}"/>
  </connection>
  <connection type="html" uuid="{53fed658-0fde-460c-9659-98b54bfe39ae}">
    <source node="{2727a541-2968-472e-805c-5ca00a78a0c0}" port="{c23389c3-66ba-4e6e-bc95-1c79b6fdda0f}"/>
    <destination node="{66ade1d8-bf64-4536-a1ab-4c129129f33d}" port="{7eeabcb6-3c8e-40b0-b195-13846b4596bb}"/>
  </connection>
  <connection type="json" uuid="{541f95be-a241-4a62-94b3-5b7794b3070e}">
    <source node="{84735b43-3da1-4c9d-b3a7-0222b34d5686}" port="{dba8be4b-361b-4148-955f-fd8cca09bf32}"/>
    <destination node="{bdeabd28-5110-41d0-8681-d2e8fb797db8}" port="{7827da6a-c17b-4c54-b263-5a84a11ac991}"/>
  </connection>
  <connection type="{json}" uuid="{698a815b-353f-4383-bce6-84a46bc8efd3}">
    <source node="{1994d22a-90b0-4410-b9e4-649505172738}" port="{3db97b6e-eb3f-4d82-b587-ae69ca93f9d8}"/>
    <destination node="{2b2b7ce7-501a-48c6-981a-7f27420f32b0}" port="{2f27e987-e55d-48ab-99af-820fd6cd88bc}"/>
  </connection>
  <connection type="datasource" uuid="{6c7b5250-596c-42bc-842c-edd07cff8b10}">
    <source node="{13e916ba-2218-4036-9bfb-82470ed31881}" port="{c233ed46-3cd1-4152-861f-9b3c1f347432}"/>
    <destination node="{f86f0e8d-6d3e-4911-a95a-910d051d66ac}" port="{0849c424-aa2b-4d8c-b84e-169715908389}"/>
  </connection>
  <connection type="datasource" uuid="{6f1619f0-1442-497c-9401-e91eb97fb14b}">
    <source node="{1b7ea6e3-6888-4ae0-b521-58b9f8195f13}" port="{f9af7e54-58eb-43c3-adc0-89352c706999}"/>
    <destination node="{1ef7cc6c-41bf-4bbb-8b29-7a024dc24050}" port="{5a5760a7-2f60-43ff-ab84-390e4877d8f2}"/>
  </connection>
  <connection type="(json, table)" uuid="{73328760-6777-4a87-8a77-34d320abb3b3}">
    <source node="{bdeabd28-5110-41d0-8681-d2e8fb797db8}" port="{488d8440-42cf-42d4-9808-db6118d3948c}"/>
    <destination node="{2727a541-2968-472e-805c-5ca00a78a0c0}" port="{0bb791e4-dc6d-490c-91db-6e027c83ef87}"/>
  </connection>
  <connection type="{json}" uuid="{830b8ac6-05b1-47c7-8dc0-48d32c2dadee}">
    <source node="{c2ffa333-e7ab-4b89-a487-3822093a6faa}" port="{fa3f12c4-dcc7-4f00-ad4e-d4fff8ebcc48}"/>
    <destination node="{4e496a94-5655-41ba-b7a4-62b9c28eb3d4}" port="{a19b55ba-1ad2-4065-ad4b-71d0db8d07fa}"/>
  </connection>
  <connection type="table" uuid="{9639bdf1-dba3-47e0-a2be-337dcbc6c260}">
    <source node="{f3fbb33d-9611-4f27-9364-c929561cafd2}" port="{da3f2b2e-8452-422a-b948-767036193d87}"/>
    <destination node="{80bc4225-cc6c-420f-a137-f3585ab1f1ba}" port="{2dd41f43-77f2-4c4f-a8fc-6d93b7e964be}"/>
  </connection>
  <connection type="table" uuid="{980d6300-17cb-428a-9ccf-fecca1e61273}">
    <source node="{62c35458-755f-4591-9942-2881d404254b}" port="{b19f1697-1371-4f65-a21e-bf3671b82255}"/>
    <destination node="{f3fbb33d-9611-4f27-9364-c929561cafd2}" port="{fb7d9c83-6fb7-4bc3-9bec-531daffcdd8d}"/>
  </connection>
  <connection type="json" uuid="{a649bb26-a406-41e0-8450-5f9087099919}">
    <source node="{0c93e2c0-a232-4a8c-aed1-4700385efb34}" port="{267f49b9-84c2-4f11-99eb-951fb6fe8709}"/>
    <destination node="{c2ffa333-e7ab-4b89-a487-3822093a6faa}" port="{32ff0c02-028e-49b7-9ea3-bedbd4dc602f}"/>
  </connection>
  <connection type="(json, table)" uuid="{b6ad6e23-4c19-46dc-b863-a04cdecdb549}">
    <source node="{bdeabd28-5110-41d0-8681-d2e8fb797db8}" port="{488d8440-42cf-42d4-9808-db6118d3948c}"/>
    <destination node="{1ef7cc6c-41bf-4bbb-8b29-7a024dc24050}" port="{c2c927f8-a4be-4126-b5d8-7c3299767799}"/>
  </connection>
  <connection type="(json, table)" uuid="{bb31a996-54a9-481a-a14e-e5aae86e19fa}">
    <source node="{5b08d008-3bf2-4d32-9c9f-7cdadd49cd7f}" port="{9edbc2eb-a8f3-4fc7-afbb-732dc6d30317}"/>
    <destination node="{84735b43-3da1-4c9d-b3a7-0222b34d5686}" port="{335cfd28-ede7-49ee-9cd9-d011123e1ff7}"/>
  </connection>
  <connection type="table" uuid="{c69c48e3-dc52-45f9-9a0f-d1b584c88064}">
    <source node="{6756dc12-1a5f-4e5c-a89d-853777269964}" port="{0eb5a514-2c62-43c3-ab11-71e07522ce62}"/>
    <destination node="{62c35458-755f-4591-9942-2881d404254b}" port="{d194116d-d9f6-4587-b03e-608a7704076a}"/>
  </connection>
  <connection type="datasource" uuid="{e4c9c7b9-9aa9-4866-b366-f6f87443bd72}">
    <source node="{1b7ea6e3-6888-4ae0-b521-58b9f8195f13}" port="{f9af7e54-58eb-43c3-adc0-89352c706999}"/>
    <destination node="{2727a541-2968-472e-805c-5ca00a78a0c0}" port="{92dd23ba-b856-4e79-8b31-2c7eaa33a243}"/>
  </connection>
  <connection type="json" uuid="{ea41dd5b-792c-42d0-80d8-3d285ad71135}">
    <source node="{f86f0e8d-6d3e-4911-a95a-910d051d66ac}" port="{e7863674-627f-4752-b483-33fc7d18c05a}"/>
    <destination node="{2b2b7ce7-501a-48c6-981a-7f27420f32b0}" port="{76ab7184-fae7-410f-96c1-9ec13c2db0f1}"/>
  </connection>
  <connection type="datasource" uuid="{ecda9abc-b0d2-43e5-b0b6-978e219f7ec6}">
    <source node="{c67af63f-cb15-46f1-9b20-040cf4844dac}" port="{ec3a9342-2757-42ff-9d00-fbcb090e30d0}"/>
    <destination node="{6756dc12-1a5f-4e5c-a89d-853777269964}" port="{1bf1f2f2-7e56-4b13-846a-71e3191d205a}"/>
  </connection>
  <connection type="{json}" uuid="{f7a70311-0d39-4f15-bd73-e63f7e5a2c5a}">
    <source node="{2b2b7ce7-501a-48c6-981a-7f27420f32b0}" port="{d0b5faf0-22f2-4ff0-8f2d-75591a2279ff}"/>
    <destination node="{c2ffa333-e7ab-4b89-a487-3822093a6faa}" port="{bed86ef4-4395-4960-9376-326daf076c2c}"/>
  </connection>
  <text color="Beige" height="175.0" uuid="{21eb4a0d-687a-4115-9d3c-626f385323e7}" width="175.0" x="1250.0" y="1775.0">GeoJSON example.</text>
  <text color="Beige" height="75.0" uuid="{67db3496-d571-41f5-97f5-10c9a63c19c0}" width="350.0" x="1200.0" y="2050.0">- Node example: *org.sysess.sympathy.html.report*
- Node example: *org.sysess.sympathy.html.htmltotext*
- Node example: *org.sysess.sympathy.html.dicttogeojson*</text>
  <text color="Beige" height="100.0" uuid="{ad23eed8-c5b9-4a73-91d5-70e2f1cb98c6}" width="275.0" x="1475.0" y="2300.0">HTML report with Bokeh plots example.</text>
</flow>

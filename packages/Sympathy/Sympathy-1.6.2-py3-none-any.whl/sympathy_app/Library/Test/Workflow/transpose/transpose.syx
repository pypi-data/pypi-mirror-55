<?xml version='1.0' encoding='US-ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" uuid="{daf7c421-e19d-4602-aa7d-a8d9971bd2c8}">
  <label></label>
  <ports/>
  <flow cls="Flow" uuid="{48e0c57b-12a8-4cd2-a2aa-deba5b66998f}" x="1675.0" y="425.0">
    <label>Normal  Subflow</label>
    <ports/>
    <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{7865ea17-9df0-43bb-a926-56906b5c5c3b}" x="2182.0" y="1504.0">
      <label>Manually Create Table</label>
      <version>1.0</version>
      <description>Create a Table from scratch in a configuration Gui.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "json_table": {
          "editor": null,
          "label": "GUI",
          "order": 0,
          "type": "string",
          "value": "[[\"a\", \"U\", [\"1\", null, \"3\"]], [\"b\", \"U\", [\"a\", \"b\", \"c\"]], [\"c\", \"U\", [\"!\", \"@\", \"#\"]]]"
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{6592eb71-347f-4c2b-b3b6-d5a103085171}">
          <label>Manually created table</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{862260fb-f378-4b30-b2ff-f78f00ea17bf}" x="2165.0" y="1392.0">
      <label>Transpose Table</label>
      <version>1.0</version>
      <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
      <author>Andreas Tagerud</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "columns": {
          "editor": {
            "display": null,
            "edit": true,
            "filter": false,
            "include_empty": false,
            "options": [],
            "type": "combobox"
          },
          "label": "Column names column",
          "list": ["names", "0", "1", "2"],
          "mode": "selected",
          "order": 2,
          "type": "list",
          "value": [0],
          "value_names": ["names"]
        },
        "reverse_col_names": {
          "editor": null,
          "label": "Use selected column as column names",
          "order": 1,
          "type": "boolean",
          "value": true
        },
        "type": "group",
        "use_col_names": {
          "editor": null,
          "label": "Column names as first column",
          "order": 0,
          "type": "boolean",
          "value": false
        }
      }
      </parameters>
      <ports>
        <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{ce2069f9-769b-41b8-88b9-80b9b6b70a20}">
          <label>The Table to transpose</label>
        </input>
        <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{f7d19e93-057e-4b45-b0a0-54487d3e660c}">
          <label>The transposed Table</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.calculatorgeneric" port_format="1.1" uuid="{9f04d44e-5da9-4366-ae50-603d2c8af674}" x="2140.0" y="1242.0">
      <label>Calculator</label>
      <version>3.0</version>
      <description>Performs user-defined python calculations</description>
      <author>Greger Cronquist, Magnus Sand&#233;n, Sara Gustafzelius &amp; Benedikt Ziegler</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "calc_attrs_dict": {
          "editor": null,
          "label": "",
          "order": 1,
          "type": "string",
          "value": "[]"
        },
        "calc_list": {
          "editor": null,
          "label": "List of calculations",
          "list": ["New Column 0a = isinstance(arg['c'], np.ma.MaskedArray) #ENABLED:1"],
          "mode": "selected",
          "order": 0,
          "type": "list",
          "value": [],
          "value_names": []
        },
        "copy_input": {
          "editor": null,
          "label": "Copy input",
          "order": 2,
          "type": "boolean",
          "value": false
        },
        "fail_strategy": {
          "editor": {
            "display": null,
            "edit": false,
            "filter": false,
            "include_empty": false,
            "options": [],
            "type": "combobox"
          },
          "label": "Action on calculation failure",
          "list": ["Exception", "Skip calculation"],
          "mode": "selected",
          "order": 3,
          "type": "list",
          "value": [0],
          "value_names": ["Exception"]
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <input key="port0" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{fca48f58-ab59-40b1-8a46-e6e9408e1edf}">
          <label>Generic Input</label>
        </input>
        <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{7a70fdc6-317b-481d-8178-18fb0e772629}">
          <label>Table with results from the calculations.</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{a9fbd690-347e-42e3-af6a-12b4676a9c3c}" x="2332.0" y="1404.0">
      <label>Assert Equal Table</label>
      <version>1.0</version>
      <description>Compare two incoming tables and raise an error if they differ.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "abs_tol": {
          "editor": null,
          "label": "Absolute tolerance",
          "order": 6,
          "type": "float",
          "value": 1e-08
        },
        "col_attrs": {
          "editor": null,
          "label": "Compare column attributes",
          "order": 1,
          "type": "boolean",
          "value": true
        },
        "col_order": {
          "editor": null,
          "label": "Compare column order",
          "order": 0,
          "type": "boolean",
          "value": true
        },
        "inexact_float": {
          "editor": null,
          "label": "Approximate comparison of floats",
          "order": 4,
          "type": "boolean",
          "value": false
        },
        "rel_tol": {
          "editor": null,
          "label": "Relative tolerance",
          "order": 5,
          "type": "float",
          "value": 1e-05
        },
        "tbl_attrs": {
          "editor": null,
          "label": "Compare table attributes",
          "order": 3,
          "type": "boolean",
          "value": true
        },
        "tbl_names": {
          "editor": null,
          "label": "Compare table names",
          "order": 2,
          "type": "boolean",
          "value": true
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{ddd0fa04-f575-4024-a3e5-af17f1dcade7}">
          <label>Table A</label>
        </input>
        <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{af1881e1-605f-4a4e-aca6-a3d47e5aaed5}">
          <label>Table B</label>
        </input>
        <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{e2315cc5-9138-4933-a3cf-485c98226b20}">
          <label>Output Table</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.conditionalerror" port_format="1.1" uuid="{cc17a83e-4384-4a4c-a41f-f37ebe175bff}" x="2332.0" y="1304.0">
      <label>Conditional error/warning</label>
      <version>1.0</version>
      <description>Raise an error if a predicate is True.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "error_msg": {
          "editor": null,
          "label": "Error message:",
          "order": 1,
          "type": "string",
          "value": "Error!"
        },
        "error_type": {
          "editor": {
            "display": null,
            "edit": false,
            "filter": false,
            "include_empty": false,
            "options": [],
            "type": "combobox"
          },
          "label": "Severity:",
          "list": ["Error", "Warning", "Output"],
          "mode": "selected",
          "order": 2,
          "type": "list",
          "value": [0],
          "value_names": ["Error"]
        },
        "predicate": {
          "editor": {
            "language": "python",
            "type": "code"
          },
          "label": "Predicate function:",
          "order": 0,
          "type": "string",
          "value": "lambda arg: not isinstance(arg['a'], np.ma.MaskedArray)"
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <input key="in" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{59327e45-437c-40ad-b51d-7be2ef9bb2aa}">
          <label>Input</label>
        </input>
        <output key="out" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{d9e6da6b-8f0c-4b53-b9e3-78d9f5f705f4}">
          <label>Output</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{e7420d88-a718-42d1-9feb-2fdc9fda159e}" x="2032.0" y="1404.0">
      <label>Manually Create Table</label>
      <version>1.0</version>
      <description>Create a Table from scratch in a configuration Gui.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "json_table": {
          "editor": null,
          "label": "GUI",
          "order": 0,
          "type": "string",
          "value": "[[\"names\", \"U\", [\"a\", \"b\", \"c\"]], [\"0\", \"U\", [\"1\", \"a\", \"!\"]], [\"1\", \"U\", [null, \"b\", \"@\"]], [\"2\", \"U\", [\"3\", \"c\", \"#\"]]]"
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{e42d101d-731d-4d5c-bc8e-7840670938e8}">
          <label>Manually created table</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.conditionalerror" port_format="1.1" uuid="{ea8c7937-5f21-4592-a3ca-34a17929dec8}" x="2332.0" y="1204.0">
      <label>Conditional error/warning</label>
      <version>1.0</version>
      <description>Raise an error if a predicate is True.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "error_msg": {
          "editor": null,
          "label": "Error message:",
          "order": 1,
          "type": "string",
          "value": "Error!"
        },
        "error_type": {
          "editor": {
            "display": null,
            "edit": false,
            "filter": false,
            "include_empty": false,
            "options": [],
            "type": "combobox"
          },
          "label": "Severity:",
          "list": ["Error", "Warning", "Output"],
          "mode": "selected",
          "order": 2,
          "type": "list",
          "value": [0],
          "value_names": ["Error"]
        },
        "predicate": {
          "editor": {
            "language": "python",
            "type": "code"
          },
          "label": "Predicate function:",
          "order": 0,
          "type": "string",
          "value": "lambda arg: isinstance(arg['b'], np.ma.MaskedArray)"
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <input key="in" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{9d2a726b-c917-48c4-9d30-c16bbe588be5}">
          <label>Input</label>
        </input>
        <output key="out" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{c1d8bd1e-930b-4e5f-b652-91aa9157d9e9}">
          <label>Output</label>
        </output>
      </ports>
    </node>
    <connection type="table" uuid="{1006a18d-5d5d-46f1-8ca2-b7feef6adc6b}">
      <source node="{862260fb-f378-4b30-b2ff-f78f00ea17bf}" port="{f7d19e93-057e-4b45-b0a0-54487d3e660c}"/>
      <destination node="{cc17a83e-4384-4a4c-a41f-f37ebe175bff}" port="{59327e45-437c-40ad-b51d-7be2ef9bb2aa}"/>
    </connection>
    <connection type="table" uuid="{4eb549f0-413c-4a89-8742-bffe71809d81}">
      <source node="{862260fb-f378-4b30-b2ff-f78f00ea17bf}" port="{f7d19e93-057e-4b45-b0a0-54487d3e660c}"/>
      <destination node="{a9fbd690-347e-42e3-af6a-12b4676a9c3c}" port="{ddd0fa04-f575-4024-a3e5-af17f1dcade7}"/>
    </connection>
    <connection type="table" uuid="{57676861-07e0-482d-98ba-627fbe1f8c42}">
      <source node="{862260fb-f378-4b30-b2ff-f78f00ea17bf}" port="{f7d19e93-057e-4b45-b0a0-54487d3e660c}"/>
      <destination node="{9f04d44e-5da9-4366-ae50-603d2c8af674}" port="{fca48f58-ab59-40b1-8a46-e6e9408e1edf}"/>
    </connection>
    <connection type="table" uuid="{a992adfc-2a23-4c4c-9181-870f8072d9f1}">
      <source node="{7865ea17-9df0-43bb-a926-56906b5c5c3b}" port="{6592eb71-347f-4c2b-b3b6-d5a103085171}"/>
      <destination node="{a9fbd690-347e-42e3-af6a-12b4676a9c3c}" port="{af1881e1-605f-4a4e-aca6-a3d47e5aaed5}"/>
    </connection>
    <connection type="table" uuid="{f027d1bf-9a2d-45e3-9ed6-241ad8c6e9b0}">
      <source node="{862260fb-f378-4b30-b2ff-f78f00ea17bf}" port="{f7d19e93-057e-4b45-b0a0-54487d3e660c}"/>
      <destination node="{ea8c7937-5f21-4592-a3ca-34a17929dec8}" port="{9d2a726b-c917-48c4-9d30-c16bbe588be5}"/>
    </connection>
    <connection type="table" uuid="{fe7ce810-c72c-47c8-a370-96092fb97e2a}">
      <source node="{e7420d88-a718-42d1-9feb-2fdc9fda159e}" port="{e42d101d-731d-4d5c-bc8e-7840670938e8}"/>
      <destination node="{862260fb-f378-4b30-b2ff-f78f00ea17bf}" port="{ce2069f9-769b-41b8-88b9-80b9b6b70a20}"/>
    </connection>
  </flow>
  <flow cls="Lambda" uuid="{d1274c6d-22f8-4c77-87df-a9c4843e82d0}" x="2050.0" y="2850.0">
    <label>New Lambda 0</label>
    <author>Unknown</author>
    <version>1.0</version>
    <ports>
      <input index="0" key="Port" parent="False" scheme="hdf5" type="(table, table)" uuid="{84979668-dbdf-45be-b486-5f3de8b59509}" x="1800.0" y="2000.0">
        <label>Port</label>
      </input>
      <output index="0" key="Port" parent="False" scheme="hdf5" type="table" uuid="{656b1fc4-5475-40fd-a7fb-3326cce1d569}" x="2125.0" y="2000.0">
        <label>Port</label>
      </output>
    </ports>
    <basic_ports>
      <output key="Function" scheme="hdf5" type="(table, table) -&gt; table" type_base="&lt;a&gt;" uuid="{fceafd59-94b0-43da-b2d1-469c3cff2d04}">
        <label>Lambda function</label>
      </output>
    </basic_ports>
    <node id="org.sysess.sympathy.tuple.untuple2" port_format="1.1" uuid="{6edbc962-9c29-4946-befc-870c8b93ce71}" x="1900.0" y="2000.0">
      <label>Untuple2</label>
      <version>1.0</version>
      <description>Deconstruct a tuple, getting the elements out.

Add more output ports to deconstruct bigger tuples.</description>
      <author>Erik der Hagopian</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="input" scheme="hdf5" type="(table, table)" type_base="(&lt;a&gt;, &lt;b&gt;)" uuid="{2f1c865b-1a49-48e1-93a2-b8ffc9cc0928}">
          <label>Input</label>
        </input>
        <output key="output" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{d8198278-cb03-421b-8d51-68687f19791a}">
          <label>Output</label>
        </output>
        <output key="output" scheme="hdf5" type="table" type_base="&lt;b&gt;" uuid="{f9e58c0c-7701-48ab-815f-d8776802e622}">
          <label>Output</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{f747b070-2a1f-48a5-8434-801d3bc80a5c}" x="2025.0" y="2000.0">
      <label>Assert Equal Table</label>
      <version>1.0</version>
      <description>Compare two incoming tables and raise an error if they differ.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{b5058aed-eb7f-42c4-b43d-4664e4b1b0ce}">
          <label>Table A</label>
        </input>
        <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{8e111777-5847-45db-a2a6-33fb120fbe13}">
          <label>Table B</label>
        </input>
        <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{05bb163c-6e73-48c2-ad76-427e6b4f5ff6}">
          <label>Output Table</label>
        </output>
      </ports>
    </node>
    <connection type="(table, table)" uuid="{36f0063c-e4c6-434f-92da-86bbcf5f1bd5}">
      <source node="{d1274c6d-22f8-4c77-87df-a9c4843e82d0}" port="{84979668-dbdf-45be-b486-5f3de8b59509}"/>
      <destination node="{6edbc962-9c29-4946-befc-870c8b93ce71}" port="{2f1c865b-1a49-48e1-93a2-b8ffc9cc0928}"/>
    </connection>
    <connection type="table" uuid="{6e3a32ef-949f-46bd-b366-ba3d112b57cc}">
      <source node="{6edbc962-9c29-4946-befc-870c8b93ce71}" port="{d8198278-cb03-421b-8d51-68687f19791a}"/>
      <destination node="{f747b070-2a1f-48a5-8434-801d3bc80a5c}" port="{b5058aed-eb7f-42c4-b43d-4664e4b1b0ce}"/>
    </connection>
    <connection type="table" uuid="{834b7896-a348-4257-8bbc-eacebd5be3b2}">
      <source node="{f747b070-2a1f-48a5-8434-801d3bc80a5c}" port="{05bb163c-6e73-48c2-ad76-427e6b4f5ff6}"/>
      <destination node="{d1274c6d-22f8-4c77-87df-a9c4843e82d0}" port="{656b1fc4-5475-40fd-a7fb-3326cce1d569}"/>
    </connection>
    <connection type="table" uuid="{cd8678f3-f833-4c17-952c-030d041998a5}">
      <source node="{6edbc962-9c29-4946-befc-870c8b93ce71}" port="{f9e58c0c-7701-48ab-815f-d8776802e622}"/>
      <destination node="{f747b070-2a1f-48a5-8434-801d3bc80a5c}" port="{8e111777-5847-45db-a2a6-33fb120fbe13}"/>
    </connection>
  </flow>
  <flow cls="Flow" is_locked="True" uuid="{e3636f5e-ecca-4e21-b8d5-41b696a93923}" x="1675.0" y="300.0">
    <label>Masked Subflow</label>
    <ports/>
    <node id="org.sysess.sympathy.data.table.conditionalerror" port_format="1.1" uuid="{6fbfbd1d-1501-4718-a963-fa6c80a5dd2f}" x="2300.0" y="1300.0">
      <label>Conditional error/warning</label>
      <version>1.0</version>
      <description>Raise an error if a predicate is True.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "error_msg": {
          "editor": null,
          "label": "Error message:",
          "order": 1,
          "type": "string",
          "value": "Error!"
        },
        "error_type": {
          "editor": {
            "display": null,
            "edit": false,
            "filter": false,
            "include_empty": false,
            "options": [],
            "type": "combobox"
          },
          "label": "Severity:",
          "list": ["Error", "Warning", "Output"],
          "mode": "selected",
          "order": 2,
          "type": "list",
          "value": [0],
          "value_names": ["Error"]
        },
        "predicate": {
          "editor": {
            "language": "python",
            "type": "code"
          },
          "label": "Predicate function:",
          "order": 0,
          "type": "string",
          "value": "lambda arg: isinstance(arg['b'], np.ma.MaskedArray)"
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <input key="in" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{8856042b-398a-4828-9a4b-4caf9e3ef8ec}">
          <label>Input</label>
        </input>
        <output key="out" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{66075e99-0341-45d7-b309-741a45add1b2}">
          <label>Output</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{833618c8-a18d-4dde-9ed6-e420626fc977}" x="2000.0" y="1400.0">
      <label>Manually Create Table</label>
      <version>1.0</version>
      <description>Create a Table from scratch in a configuration Gui.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "json_table": {
          "editor": null,
          "label": "GUI",
          "order": 0,
          "type": "string",
          "value": "[[\"names\", \"U\", [\"a\", \"b\", \"c\"]], [\"0\", \"U\", [\"1\", \"a\", \"!\"]], [\"1\", \"U\", [null, \"b\", \"@\"]], [\"2\", \"U\", [\"3\", \"c\", \"#\"]]]"
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{8bc0d003-4534-483d-a40d-860e068c8725}">
          <label>Manually created table</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{9a5ec236-c89c-4f26-9905-7299cbd627dc}" x="2150.0" y="1500.0">
      <label>Manually Create Table</label>
      <version>1.0</version>
      <description>Create a Table from scratch in a configuration Gui.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "json_table": {
          "editor": null,
          "label": "GUI",
          "order": 0,
          "type": "string",
          "value": "[[\"a\", \"U\", [\"1\", null, \"3\"]], [\"b\", \"U\", [\"a\", \"b\", \"c\"]], [\"c\", \"U\", [\"!\", \"@\", \"#\"]]]"
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{8d95ae7d-e003-420d-8d2c-48122749acb6}">
          <label>Manually created table</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.conditionalerror" port_format="1.1" uuid="{e0ee6108-e9d3-4676-bd4f-80e4c179e237}" x="2300.0" y="1400.0">
      <label>Conditional error/warning</label>
      <version>1.0</version>
      <description>Raise an error if a predicate is True.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "error_msg": {
          "editor": null,
          "label": "Error message:",
          "order": 1,
          "type": "string",
          "value": "Error!"
        },
        "error_type": {
          "editor": {
            "display": null,
            "edit": false,
            "filter": false,
            "include_empty": false,
            "options": [],
            "type": "combobox"
          },
          "label": "Severity:",
          "list": ["Error", "Warning", "Output"],
          "mode": "selected",
          "order": 2,
          "type": "list",
          "value": [0],
          "value_names": ["Error"]
        },
        "predicate": {
          "editor": {
            "language": "python",
            "type": "code"
          },
          "label": "Predicate function:",
          "order": 0,
          "type": "string",
          "value": "lambda arg: not isinstance(arg['a'], np.ma.MaskedArray)"
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <input key="in" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{a52de0e3-0b8c-4e35-8a93-f0e67858e7b4}">
          <label>Input</label>
        </input>
        <output key="out" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{d9b661b7-ce97-41dd-9fba-ac267144e6e7}">
          <label>Output</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{e75f1207-f0a2-4b3a-955b-888e335e6646}" x="2150.0" y="1400.0">
      <label>Transpose Table</label>
      <version>1.0</version>
      <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
      <author>Andreas Tagerud</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "columns": {
          "editor": {
            "display": null,
            "edit": true,
            "filter": false,
            "include_empty": false,
            "options": [],
            "type": "combobox"
          },
          "label": "Column names column",
          "list": ["names", "0", "1", "2"],
          "mode": "selected",
          "order": 2,
          "type": "list",
          "value": [0],
          "value_names": ["names"]
        },
        "reverse_col_names": {
          "editor": null,
          "label": "Use selected column as column names",
          "order": 1,
          "type": "boolean",
          "value": true
        },
        "type": "group",
        "use_col_names": {
          "editor": null,
          "label": "Column names as first column",
          "order": 0,
          "type": "boolean",
          "value": false
        }
      }
      </parameters>
      <ports>
        <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{4272f318-d4a1-4b55-a932-d5c85f1a46c1}">
          <label>The Table to transpose</label>
        </input>
        <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{56ebb809-d270-40ad-bcca-8671582df74b}">
          <label>The transposed Table</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{eba20087-a2dc-422f-9fd8-cd6978afde93}" x="2300.0" y="1500.0">
      <label>Assert Equal Table</label>
      <version>1.0</version>
      <description>Compare two incoming tables and raise an error if they differ.</description>
      <author>Magnus Sand&#233;n</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "abs_tol": {
          "editor": null,
          "label": "Absolute tolerance",
          "order": 6,
          "type": "float",
          "value": 1e-08
        },
        "col_attrs": {
          "editor": null,
          "label": "Compare column attributes",
          "order": 1,
          "type": "boolean",
          "value": true
        },
        "col_order": {
          "editor": null,
          "label": "Compare column order",
          "order": 0,
          "type": "boolean",
          "value": true
        },
        "inexact_float": {
          "editor": null,
          "label": "Approximate comparison of floats",
          "order": 4,
          "type": "boolean",
          "value": false
        },
        "rel_tol": {
          "editor": null,
          "label": "Relative tolerance",
          "order": 5,
          "type": "float",
          "value": 1e-05
        },
        "tbl_attrs": {
          "editor": null,
          "label": "Compare table attributes",
          "order": 3,
          "type": "boolean",
          "value": true
        },
        "tbl_names": {
          "editor": null,
          "label": "Compare table names",
          "order": 2,
          "type": "boolean",
          "value": true
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{ee8013e2-7b46-487d-8441-caf62291a783}">
          <label>Table A</label>
        </input>
        <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{65064805-c5ab-4c61-8d15-8775c6b06971}">
          <label>Table B</label>
        </input>
        <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{43a3757d-025d-49d3-90f0-f1548a1fe72e}">
          <label>Output Table</label>
        </output>
      </ports>
    </node>
    <connection type="table" uuid="{5bca4c7a-0acd-4187-aa4a-f2e892d2c6ea}">
      <source node="{e75f1207-f0a2-4b3a-955b-888e335e6646}" port="{56ebb809-d270-40ad-bcca-8671582df74b}"/>
      <destination node="{eba20087-a2dc-422f-9fd8-cd6978afde93}" port="{ee8013e2-7b46-487d-8441-caf62291a783}"/>
    </connection>
    <connection type="table" uuid="{79f40e8e-e7dd-4f73-9dfc-2bceb5fa9bd3}">
      <source node="{9a5ec236-c89c-4f26-9905-7299cbd627dc}" port="{8d95ae7d-e003-420d-8d2c-48122749acb6}"/>
      <destination node="{eba20087-a2dc-422f-9fd8-cd6978afde93}" port="{65064805-c5ab-4c61-8d15-8775c6b06971}"/>
    </connection>
    <connection type="table" uuid="{93c7a94c-fc68-4157-9e3a-9556dab890c9}">
      <source node="{e75f1207-f0a2-4b3a-955b-888e335e6646}" port="{56ebb809-d270-40ad-bcca-8671582df74b}"/>
      <destination node="{e0ee6108-e9d3-4676-bd4f-80e4c179e237}" port="{a52de0e3-0b8c-4e35-8a93-f0e67858e7b4}"/>
    </connection>
    <connection type="table" uuid="{afcd593d-0a11-4dc2-9b09-ff23889335de}">
      <source node="{e75f1207-f0a2-4b3a-955b-888e335e6646}" port="{56ebb809-d270-40ad-bcca-8671582df74b}"/>
      <destination node="{6fbfbd1d-1501-4718-a963-fa6c80a5dd2f}" port="{8856042b-398a-4828-9a4b-4caf9e3ef8ec}"/>
    </connection>
    <connection type="table" uuid="{d3bc8beb-f12f-4506-b933-36800fdc0b6b}">
      <source node="{833618c8-a18d-4dde-9ed6-e420626fc977}" port="{8bc0d003-4534-483d-a40d-860e068c8725}"/>
      <destination node="{e75f1207-f0a2-4b3a-955b-888e335e6646}" port="{4272f318-d4a1-4b55-a932-d5c85f1a46c1}"/>
    </connection>
  </flow>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{009dfc11-e465-4d50-a54f-97e77b133c82}" x="1675.0" y="2125.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Float 1\", \"f\", [1.3, 1.4, 1.5]], [\"Float 2\", \"f\", [2.0, 3.0, 4.0]], [\"Float 3\", \"f\", [2.4, 2.5, 2.6]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{1429c1e3-1ef9-4b75-8a83-f1cd65ad3b58}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{01f6c9e2-7511-49e5-add5-7e8709c36609}" x="1675.0" y="575.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "GUI",
        "order": 0,
        "type": "string",
        "value": "[[\"A\", \"f\", []], [\"B\", \"f\", []], [\"C\", \"f\", []]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{015cea61-770d-4b86-abc8-4a08236117c8}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{0384ceb8-3c0a-48d2-bb07-1d983ce84d4d}" x="1825.0" y="2450.0">
    <label>Transpose Table New</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "reverse_col_names": {
        "editor": null,
        "label": "Use first column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{1a697608-29cb-4161-a446-b8d91fe79bef}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{492f2ffb-ac2a-4f20-836b-c8e875e4745e}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.random.randomtables" port_format="1.1" uuid="{04db26e7-ef5f-4111-a5ca-6cfcaae229d0}" x="1675.0" y="3075.0">
    <label>Random Tables</label>
    <version>0.1</version>
    <description>Generate a list of Tables with randomnumbers between 0 and 1.</description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "column_entries": {
        "editor": {
          "max": 1000000,
          "min": 0,
          "step": 1,
          "type": "spinbox"
        },
        "label": "Columns:",
        "order": 0,
        "type": "integer",
        "value": 3
      },
      "column_length": {
        "editor": {
          "max": 100000000,
          "min": 0,
          "step": 1,
          "type": "spinbox"
        },
        "label": "Rows:",
        "order": 1,
        "type": "integer",
        "value": 3
      },
      "length": {
        "editor": {
          "max": 10000,
          "min": 0,
          "step": 1,
          "type": "spinbox"
        },
        "label": "List length",
        "order": 3,
        "type": "integer",
        "value": 5
      },
      "mask_values": {
        "editor": null,
        "label": "Randomly mask values",
        "order": 2,
        "type": "boolean",
        "value": false
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="[table]" type_base="[table]" uuid="{0d195faf-9560-4956-ad46-0b2e7b58d624}">
        <label>Tables with random numbers.</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{18228f99-bf0b-4df9-8811-d8e366ef8fab}" x="1675.0" y="1025.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Float 1\", \"f\", [1.3, 1.4, 1.5]], [\"Float 2\", \"f\", [2.0, 3.0, 4.0]], [\"Float 3\", \"f\", [2.4, 2.5, 2.6]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{999f4f70-9b07-4a48-97b6-aa1fdbb86df9}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{1833dfd8-80b9-45ca-8d87-b7ef04dd7e4b}" x="2175.0" y="3475.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "edit": true,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Column names", "0", "1", "2", "3", "4"],
        "mode": "selected",
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["Column names"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": true
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{cf52ca9a-1ac6-4419-a2a2-592eb3036345}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{3b57ee10-b7af-41a8-9f55-8b8d737d613b}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.tuple.ziptuple2" port_format="1.1" uuid="{1a86fea4-a48f-4f56-87e3-b936f36c5b3a}" x="2050.0" y="2950.0">
    <label>Zip Tuple2</label>
    <version>1.0</version>
    <description>Create a list of tuples from two (or more) lists.</description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="[table]" type_base="[&lt;a&gt;]" uuid="{561798ea-918b-4e11-a667-912ef14e270c}">
        <label>Input</label>
      </input>
      <input key="input" scheme="hdf5" type="[table]" type_base="[&lt;b&gt;]" uuid="{dd1a1bcf-e6bc-4c63-a703-9b5c3781ffb6}">
        <label>Input</label>
      </input>
      <output key="output" scheme="hdf5" type="[(table, table)]" type_base="[(&lt;a&gt;, &lt;b&gt;)]" uuid="{d687296a-7273-47c3-aa58-aed860978173}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{1b53a59a-ddd6-483f-9d6d-b348660706bf}" x="1675.0" y="1250.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Float 1\", \"f\", []], [\"Float 2\", \"f\", []], [\"Float 3\", \"f\", []]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{5076fa32-031c-4ee3-9a7a-15912c83a589}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{1bba85e7-f5aa-4dcd-af4a-d6525efaa734}" x="2125.0" y="2575.0">
    <label>Transpose Table New</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Column names", "Text", "Float", "Integer", "Boolean"],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{23a7cf17-7e72-4a71-9688-3989fba816ea}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{ee0b53f0-6d37-49cd-88c9-add5f43cb2a3}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{2301c1a8-ba5f-4aec-b92f-867e05c8916b}" x="1675.0" y="825.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{a065cc04-4a12-47ff-a110-b5a2533eb17d}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{2693a51e-c798-4bdb-aa11-ed28f9520700}" x="1675.0" y="1650.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Float 1\", \"f\", [1.3, 1.4, 1.5]], [\"Float 2\", \"f\", [2.0, 3.0, 4.0]], [\"Float 3\", \"f\", [2.4, 2.5, 2.6]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{8b8d8da6-46a7-4eb9-98a8-ca7ffa588ee7}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{27f9e5b0-cf36-4840-a8ad-1c25f3c7d263}" x="1675.0" y="2450.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"0\", \"i\", [0]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{70f85fdb-b450-4f3b-b0d0-5d7c663bcf20}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{2819f1ec-2216-494b-b56c-9f5496d86e28}" x="1675.0" y="1125.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"0\", \"f\", [1.3, 2.0, 2.4]], [\"1\", \"f\", [1.4, 3.0, 2.5]], [\"2\", \"f\", [1.5, 4.0, 2.6]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{b1e21e23-b684-4d93-ad51-df9a836b67d9}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.map" port_format="1.1" uuid="{2a988b60-ab1c-44d6-b373-28f1a4bf4b34}" x="2225.0" y="2950.0">
    <label>Map</label>
    <version>1.0</version>
    <description>Map Lambda function over each element in argument list</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="Function" scheme="hdf5" type="(table, table) -&gt; table" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{31cc3244-fdaf-4f71-b40c-18ec9e431a63}">
        <label>Lambda Function to Map</label>
      </input>
      <input key="List" scheme="hdf5" type="[(table, table)]" type_base="[&lt;a&gt;]" uuid="{1ce980dc-1ea8-48eb-beba-e1541ecebe6b}">
        <label>Argument List</label>
      </input>
      <output key="List" scheme="hdf5" type="[table]" type_base="[&lt;b&gt;]" uuid="{52176b33-ad25-4fa2-8568-ea2673284c15}">
        <label>Output List</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{2ce6b83e-4bf7-404e-8eba-5a6da94044de}" x="1675.0" y="2550.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"0\", \"i\", [0]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{8a6f6ec3-97cb-41b4-988f-79458e541e25}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{2db49dab-4b32-4dd6-8f8a-bcea568990d8}" x="2125.0" y="2750.0">
    <label>Transpose Table New</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Column names", "Text", "Float", "Integer", "Boolean"],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{546a3c1a-f47e-4ddb-a157-d4f8288a1753}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{e20648d7-634c-4d8a-bd7e-4227e777f956}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{324ce5bd-00d4-415a-9ef0-b64b831d9bae}" x="1675.0" y="1550.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Column names\", \"U\", [\"Float 1\", \"Float 2\", \"Float 3\"]], [\"0\", \"f\", [1.3, 2.0, 2.4]], [\"1\", \"f\", [1.4, 3.0, 2.5]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{3c39f37b-c7c9-4c95-9f59-f9edc7247eca}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{34504da3-3626-4ff8-8d1f-c449a6b12228}" x="1675.0" y="1950.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"2.0\", \"f\", [1.3, 2.4]], [\"3.0\", \"f\", [1.4, 2.5]], [\"4.0\", \"f\", [1.5, 2.6]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{ac6f98f2-3772-4048-b5cc-84369d618b21}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{37c8dc37-49db-4dd2-983c-3dcc1bbd559f}" x="1825.0" y="825.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": [],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use first column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{ab4dd42f-9b59-451d-ad78-787ebac40787}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{4ecfa3ce-0b21-48dc-bba8-0c814d740d1a}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{3d73d926-2008-491e-8a39-91cae2db280c}" x="1950.0" y="2075.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["1.3", "1.4", "1.5"],
        "mode": "selected",
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": true
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{71f1310a-6fe8-44b8-b92b-804792fac6f7}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{f9becf4f-37b9-4572-af98-1ba56902a8fc}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{3db1e1c4-c970-4ba0-8b15-ba567462ce68}" x="1675.0" y="2750.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"0\", \"U\", [\"Zero\", \"0.0\", \"0\", \"False\"]], [\"1\", \"U\", [\"One\", \"1.0\", \"1\", \"True\"]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{16e5f627-af9e-4c41-ad4d-5e080f547ba3}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.calculatorgeneric" port_format="1.1" uuid="{3fa77c70-6dd8-4081-b78c-edefa3e43b89}" x="1975.0" y="2575.0">
    <label>Calculator</label>
    <version>3.0</version>
    <description>Performs user-defined python calculations</description>
    <author>Greger Cronquist, Magnus Sand&#233;n, Sara Gustafzelius &amp; Benedikt Ziegler</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "calc_attrs_dict": {
        "editor": null,
        "label": "",
        "order": 1,
        "type": "string",
        "value": "[]"
      },
      "calc_list": {
        "editor": null,
        "label": "List of calculations",
        "list": ["Timedelta = datetime.timedelta(2) #ENABLED:1", "Datetime = datetime.datetime(2018, 12, 24) #ENABLED:1"],
        "mode": "selected",
        "order": 0,
        "type": "list",
        "value": [],
        "value_names": []
      },
      "copy_input": {
        "editor": null,
        "label": "Copy input",
        "order": 2,
        "type": "boolean",
        "value": false
      },
      "fail_strategy": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Action on calculation failure",
        "list": ["Exception", "Skip calculation"],
        "mode": "selected",
        "order": 3,
        "type": "list",
        "value": [0],
        "value_names": ["Exception"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port1" scheme="hdf5" type="table" type_base="table" uuid="{4e107e4f-55e0-419c-8871-13bc25975d90}">
        <label>Table with results from the calculations.</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{417e86a5-1130-4658-ae66-ce58e9f940f2}" x="2175.0" y="3575.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "edit": true,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Names", "0", "1", "2", "3"],
        "mode": "selected",
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["Names"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": true
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{451860d7-8de2-48e2-8dad-ef6c866d1516}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{29b0fa89-3026-4538-afba-4e8057ccc226}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{4246d533-9599-4f3a-9958-1596feeeacaa}" x="2125.0" y="2650.0">
    <label>Transpose Table New</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Column names", "Text", "Float", "Integer", "Boolean"],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{5c359a65-9f24-4e18-9e86-3edf8c05896a}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{48453c82-431f-4b79-81a1-f8adc364c1d0}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{42af1230-58b3-4cd2-925d-614b01c37cf6}" x="2500.0" y="3375.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "abs_tol": {
        "editor": null,
        "label": "Absolute tolerance",
        "order": 6,
        "type": "float",
        "value": 1e-08
      },
      "col_attrs": {
        "editor": null,
        "label": "Compare column attributes",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "col_order": {
        "editor": null,
        "label": "Compare column order",
        "order": 0,
        "type": "boolean",
        "value": true
      },
      "inexact_float": {
        "editor": null,
        "label": "Approximate comparison of floats",
        "order": 4,
        "type": "boolean",
        "value": false
      },
      "rel_tol": {
        "editor": null,
        "label": "Relative tolerance",
        "order": 5,
        "type": "float",
        "value": 1e-05
      },
      "tbl_attrs": {
        "editor": null,
        "label": "Compare table attributes",
        "order": 3,
        "type": "boolean",
        "value": true
      },
      "tbl_names": {
        "editor": null,
        "label": "Compare table names",
        "order": 2,
        "type": "boolean",
        "value": true
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{dd5db96f-5230-4dbf-8d93-75f5a38e728b}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{3abac2a4-5d67-4360-ac7e-d379b19a96ae}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{91c9f831-daa7-4af8-aad1-266c8952a685}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{441c2c10-94b4-44ea-bf51-e5dd7541ab0d}" x="2300.0" y="3275.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "abs_tol": {
        "editor": null,
        "label": "Absolute tolerance",
        "order": 6,
        "type": "float",
        "value": 1e-08
      },
      "col_attrs": {
        "editor": null,
        "label": "Compare column attributes",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "col_order": {
        "editor": null,
        "label": "Compare column order",
        "order": 0,
        "type": "boolean",
        "value": true
      },
      "inexact_float": {
        "editor": null,
        "label": "Approximate comparison of floats",
        "order": 4,
        "type": "boolean",
        "value": false
      },
      "rel_tol": {
        "editor": null,
        "label": "Relative tolerance",
        "order": 5,
        "type": "float",
        "value": 1e-05
      },
      "tbl_attrs": {
        "editor": null,
        "label": "Compare table attributes",
        "order": 3,
        "type": "boolean",
        "value": true
      },
      "tbl_names": {
        "editor": null,
        "label": "Compare table names",
        "order": 2,
        "type": "boolean",
        "value": true
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{d2ffe288-45ba-4630-833b-236e721e24a8}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{5dff692a-2ecf-4911-b5de-20181156f365}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{1a02bbc0-19ba-4f85-95c3-bee0a5872885}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{4630547f-7189-435e-9ce5-ad316123768b}" x="1975.0" y="1700.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "col_attrs": {
        "editor": null,
        "label": "Compare column attributes",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "col_order": {
        "editor": null,
        "label": "Compare column order",
        "order": 0,
        "type": "boolean",
        "value": true
      },
      "tbl_attrs": {
        "editor": null,
        "label": "Compare table attributes",
        "order": 3,
        "type": "boolean",
        "value": true
      },
      "tbl_names": {
        "editor": null,
        "label": "Compare table names",
        "order": 2,
        "type": "boolean",
        "value": true
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{f1113683-ca3f-4d7e-8025-c2da73b9fba1}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{aa90afb9-cd2b-4541-80af-da4fa0544172}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{d03ce5f7-01fd-4c68-ad59-c681a1c60611}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.empty" port_format="1.1" uuid="{5022c652-b24e-4906-b55f-4a0495e964bf}" x="1675.0" y="2850.0">
    <label>Empty</label>
    <version>1.1</version>
    <description>Generate empty data of inferred or specified type</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(C) 2016 Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "datatype": {
        "editor": null,
        "label": "Datatype",
        "order": 0,
        "type": "string",
        "value": "&lt;a&gt;"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{70923659-b7ec-4144-94b8-9e0174040b25}">
        <label>Output port containing empty data (must be connected or specified)</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{51156234-091e-4656-9a25-d150dedd4f8e}" x="1675.0" y="1350.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Column names\", \"U\", [\"Float 1\", \"Float 2\", \"Float 3\"]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{fb02a4d7-44c9-4a1b-a42d-fbdf557d8ab8}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.renamesingletablecolumns" port_format="1.1" uuid="{52c1083c-131a-4f47-9517-f36b08854420}" x="2450.0" y="2075.0">
    <label>Rename columns in Table</label>
    <version>1.0</version>
    <description>Rename the Table columns by using regular expressions.</description>
    <author>Greger Cronquist</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "dst_expr": {
        "editor": null,
        "label": "Replacement expression",
        "order": 1,
        "type": "string",
        "value": "Float 1"
      },
      "src_expr": {
        "editor": null,
        "label": "Search expression",
        "order": 0,
        "type": "string",
        "value": "Column names"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{be916095-a6d1-4fc1-ac95-50071d58464b}">
        <label>Input</label>
      </input>
      <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{e9ec471e-1dcf-4b26-ad53-d0ad76fbd7a0}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{53a039cc-ce85-4275-85bc-37d4a44ac992}" x="1975.0" y="625.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{b0d02174-82c0-4cb1-8e71-d318ba27b224}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{072149bd-2ad8-49cf-8a6d-7fe1fae6a059}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{4426a42e-c290-42c9-bca5-79bd7b71a5c5}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{5454e5bb-423a-40d3-85a7-8d5d3c8a7365}" x="1975.0" y="1500.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{2659fec1-8649-4be2-88fc-1c2aaba44c3d}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{5e3d434f-8e05-44d1-b960-60fff354c9fa}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{5e99213a-4ff3-4d47-9668-474f9a00d9cf}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{54c54429-7dd9-427e-8225-f4f5229139db}" x="1825.0" y="1850.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Float 1", "Float 2", "Float 3"],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [1],
        "value_names": ["Float 2"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use first column as column names",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{d2885a85-ae43-43a1-aea5-6e6ef8550cff}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{8e4ae3d2-ad9b-4026-8bd2-06aa6f8bbac8}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{5a7e9d29-4540-414b-9101-ca6943644c75}" x="1975.0" y="2300.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{f2022cca-0cf7-4128-95a8-13299b423c49}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{90e68cf5-9f3e-449d-87ab-1c37377dc3d7}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{efe4a938-1c71-4f05-b6b6-928146c27abc}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.itemtolist" port_format="1.1" uuid="{5baac739-8f59-49db-951b-a3587dda9cc8}" x="1800.0" y="2850.0">
    <label>Item to List</label>
    <version>1.0</version>
    <description>Create a single item list containing item.</description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="item" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{a63e5453-8a92-4bc1-a836-9d80958a2c30}">
        <label>Input Item</label>
      </input>
      <output key="list" scheme="hdf5" type="[table]" type_base="[&lt;a&gt;]" uuid="{8de868b1-05ca-4b89-b7b7-ba3e3352801f}">
        <label>Item as List</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{660f810c-83e1-4485-9de1-841f7b9cd03f}" x="1675.0" y="1750.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"1.3\", \"f\", [2.0, 2.4]], [\"1.4\", \"f\", [3.0, 2.5]], [\"1.5\", \"f\", [4.0, 2.6]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{0d96dbb4-0fe8-44c0-bdcc-913c1c7c6dd0}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablesnew" port_format="1.1" uuid="{6b237263-e61a-47fc-8560-527f58b82194}" x="1925.0" y="2850.0">
    <label>Transpose Tables</label>
    <version>1.0</version>
    <description>Auto generated list version of :ref:`Transpose Table`.

In this version, the following ports from the original nodes have been
changed to lists which the node loops over:

    :Looped Inputs: input.
    :Looped Outputs: output.

For details see the original node.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": [],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="[table]" type_base="[table]" uuid="{a9b8ad17-0655-4b8f-8a78-02c95202539a}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="[table]" type_base="[table]" uuid="{f73840b1-9259-40e6-957d-43e40b5c20a4}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{6df0fe0d-cf81-45a3-b0bf-d643f17d0f38}" x="1825.0" y="1450.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": [],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use first column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": true
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{ae590b50-9ee9-4673-be18-7d2a885a2497}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{ccef5f4a-1ded-4c01-bc20-d351a910dc3c}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{73f6a8e9-0361-4534-9ebf-f6d09318f4de}" x="1975.0" y="2750.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "GUI",
        "order": 0,
        "type": "string",
        "value": "[[\"Text\", \"U\", []], [\"Float\", \"f\", []], [\"Integer\", \"i\", []], [\"Boolean\", \"b\", []], [\"Datetime\", \"M\", []]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{67dc4d71-1add-432a-9305-a9a9b5453d10}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.renamesingletablecolumns" port_format="1.1" uuid="{74cc7c76-6e14-471c-9f88-faf21a8ee259}" x="2200.0" y="2075.0">
    <label>Rename columns in Table</label>
    <version>1.0</version>
    <description>Rename the Table columns by using regular expressions.</description>
    <author>Greger Cronquist</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "dst_expr": {
        "editor": null,
        "label": "Replacement expression",
        "order": 1,
        "type": "string",
        "value": "Float 3"
      },
      "src_expr": {
        "editor": null,
        "label": "Search expression",
        "order": 0,
        "type": "string",
        "value": "1"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{9e387378-071f-45cc-883c-20541d010812}">
        <label>Input</label>
      </input>
      <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{1e1c3f23-243d-475d-bd05-f9761af172ed}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{76880b74-f5d6-47dd-b1f7-1ca5dea9d623}" x="1825.0" y="1650.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Float 1", "Float 2", "Float 3"],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["Float 1"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use first column as column names",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{d0e15ad0-371e-4d45-b798-69a0410ad5b1}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{da8d72e5-95ec-4455-bdcc-74ce41726bcb}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{76aafef5-94b7-4051-84c8-7be086e78f8b}" x="1975.0" y="1900.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{5ca97f7a-0ed0-4534-adc5-64b9eac8be45}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{d196eef4-bce3-4827-a4ac-ee5f918c3caa}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{9e809cd4-01b3-4e18-b4da-94dbdd6b8341}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{7cc9091c-b0f5-420f-867b-6667fe98153a}" x="2175.0" y="3375.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "edit": true,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["0", "1", "2", "3", "Names"],
        "mode": "selected",
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [4],
        "value_names": ["Names"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{229e2bc0-6395-4849-ab77-8d21b1dc58f6}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{89e332d6-1693-4574-9b7b-494a2c956b2b}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{827beda5-bcee-4b14-be19-b7dd606f25db}" x="1825.0" y="2250.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Column names", "column 2", "column 3"],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["Column names"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{a73111f7-876e-4363-80ff-bc7bb396a8d3}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{b7cb2c7f-7334-4065-91ce-c7741c0e3207}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{828b0730-d8f7-48c8-ac34-145a21e4943b}" x="2575.0" y="2150.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "col_attrs": {
        "editor": null,
        "label": "Compare column attributes",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "col_names": {
        "editor": null,
        "label": "Compare column names",
        "order": 0,
        "type": "boolean",
        "value": false
      },
      "col_order": {
        "editor": null,
        "label": "Compare column order",
        "order": 0,
        "type": "boolean",
        "value": true
      },
      "tbl_attrs": {
        "editor": null,
        "label": "Compare table attributes",
        "order": 3,
        "type": "boolean",
        "value": true
      },
      "tbl_names": {
        "editor": null,
        "label": "Compare table names",
        "order": 2,
        "type": "boolean",
        "value": true
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{dd9440b7-fe29-4c38-89d4-547eaa6a07e1}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{bc938119-d8c4-4e05-a1df-67cf366cbdc5}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{e7b88978-0780-40db-9227-cf697ddc7f92}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{82a02462-9c2a-43b3-be25-1a08791feaa6}" x="2175.0" y="3075.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "edit": true,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["0", "1", "2", "3", "Column names"],
        "mode": "selected",
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [4],
        "value_names": ["Column names"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{0ca7fb03-fff7-43c5-a86d-0e15bf96a5fb}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{b1773b64-6420-46ad-a084-98ead5dde0ec}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.converttablecolumns" port_format="1.1" uuid="{8556b28f-4088-4461-8ca6-eb1657e03c23}" x="2075.0" y="2075.0">
    <label>Convert columns in Table</label>
    <version>1.0</version>
    <description>Convert selected columns in Table to new data types.</description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "in_column_list": {
        "editor": {
          "buttons": true,
          "invertbutton": true,
          "selection": "multi",
          "type": "listview"
        },
        "label": "Select columns",
        "list": ["0", "1", "Column names"],
        "order": 0,
        "passthrough": false,
        "type": "list",
        "value": [2],
        "value_names": ["Column names"]
      },
      "in_type_list": {
        "editor": {
          "selection": "single",
          "type": "listview"
        },
        "label": "Select type",
        "list": ["bool", "datetime (UTC)", "datetime (naive)", "float", "int", "str", "unicode"],
        "order": 1,
        "passthrough": false,
        "type": "list",
        "value": [3],
        "value_names": ["float"]
      },
      "out_column_list": {
        "editor": {
          "selection": "multi",
          "type": "listview"
        },
        "label": "Convert columns",
        "list": [],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": ["Column names"],
        "value_names": []
      },
      "out_type_list": {
        "editor": {
          "selection": "multi",
          "type": "listview"
        },
        "label": "Convert types",
        "list": [],
        "order": 3,
        "passthrough": false,
        "type": "list",
        "value": ["f"],
        "value_names": []
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="port1" scheme="hdf5" type="table" type_base="table" uuid="{f8908d59-7490-46fd-af5c-2536732b03a0}">
        <label>Input Table</label>
      </input>
      <output key="port2" scheme="hdf5" type="table" type_base="table" uuid="{edb875bb-1a86-428c-acd9-b6200b21abaf}">
        <label>Table with converted columns</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{896920b6-ddd9-4506-a135-4bca08d2c02c}" x="1975.0" y="1075.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{a73d4511-0052-42a1-9e9d-aa7422af8650}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{7bf95851-3ee5-403b-b43b-398b75366853}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{29bf5a61-76d3-42b1-b8ab-569a3c0f1fab}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{8afb4a05-4504-43e6-b5db-4e165d1ffc08}" x="1675.0" y="3275.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "GUI",
        "order": 0,
        "type": "string",
        "value": "[[\"f1\", \"f\", [11.0, 21.0, 31.0, 41.0]], [\"f2\", \"f\", [12.0, 22.0, 32.0, 42.0]], [\"f3\", \"f\", [13.0, 23.0, 33.0, 43.0]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{36c5c2d7-f7df-4d8c-ab8c-8c082423578a}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{8d29effe-c3cb-4626-a7ac-2c6a20738151}" x="1825.0" y="2075.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Float 1", "Float 2", "Float 3"],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{f160ddb7-163a-4c86-be88-96d60cbb83de}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{eca3e4f7-f181-433e-b129-b78335e7e68a}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{8f7ab1c2-8fcc-4a90-acef-dabbf59501d5}" x="1675.0" y="1850.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Float 1\", \"f\", [1.3, 1.4, 1.5]], [\"Float 2\", \"f\", [2.0, 3.0, 4.0]], [\"Float 3\", \"f\", [2.4, 2.5, 2.6]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{5be0a9af-3f25-4291-9e2a-e92af738d6ba}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{938275c5-112e-496f-a228-90a412748ccb}" x="1825.0" y="1250.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": [],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use first column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": true
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{b96aba2b-19af-481c-bf1b-3b404f2635fb}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{ebd17605-e3a7-4c35-baca-a88b8e4661cc}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{9470e85d-3859-4278-ab67-f4c15f916da8}" x="1975.0" y="2650.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "GUI",
        "order": 0,
        "type": "string",
        "value": "[[\"Text\", \"U\", [\"Zero\", \"One\"]], [\"Float\", \"f\", [0.0, 1.0]], [\"Integer\", \"i\", [0, 1]], [\"Boolean\", \"b\", [false, true]], [\"Datetime\", \"M\", [\"2018-12-05T00:00:00\", \"2018-12-19T00:00:00\"]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{153e9476-e0da-4e2f-82d5-0844240f130b}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{9a757c0a-0d21-4a02-b4a6-cdabcf5d0713}" x="1675.0" y="925.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{77fa714f-6c1b-4275-88e4-91d2a8b59fda}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{9af36369-3b4e-4030-bdc6-7dcf39374133}" x="1675.0" y="2650.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Text\", \"U\", [\"Zero\", \"One\"]], [\"Float\", \"f\", [0.0, 1.0]], [\"Integer\", \"i\", [0, 1]], [\"Boolean\", \"b\", [false, true]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{631875a1-257a-4003-8e67-5471bb5b231e}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{9d4dd4ba-428c-45a2-8b70-1d381cf2a89e}" x="1975.0" y="875.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{2f752db1-4cb4-4d3f-8ab5-14db72cdd47d}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{20bb988e-288d-49d5-a8b6-af54dc2c02ad}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{33e692fc-62b4-4c99-aa69-e1f0a21ea49b}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{a10b6421-52f6-482c-bafb-a19b96c5c9a4}" x="2175.0" y="3175.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "edit": true,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Column names", "0", "1", "2", "3", "4"],
        "mode": "selected",
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["Column names"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": true
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{fd8a807c-47d8-47aa-9d57-c00821924c27}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{75ee637a-1c53-4b29-97c4-7837c7678f74}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{a9b1695a-65a7-4ec6-8242-3a07c437273c}" x="1975.0" y="1300.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{c667078d-1dac-4fa3-883d-42e3b8d887b7}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{a34677d2-7e8b-413e-98ff-f83714e14385}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{e740bc4d-fdfa-47be-aaaf-a007b13aeff0}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{b06a2c49-68ed-4084-b14a-d32e71cc6e8a}" x="1675.0" y="2350.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"0\", \"U\", [\"Float 1\", \"Float 2\", \"Float 3\"]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{1ef52c0e-fac6-464a-bff4-e43d9a801427}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{b30c469a-0298-4928-992d-605c13fc760a}" x="1800.0" y="3275.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "edit": true,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["0", "1", "2", "3", "4"],
        "mode": "selected",
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": true
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{3281e2dd-6e8f-4155-8632-d1407d7cca8c}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{6293cc48-012d-4638-a0e3-5d3cb3162027}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{b5366423-45cd-483c-a263-fa70c4567b3b}" x="1825.0" y="1025.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": [],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use first column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{a04b6ab1-e698-4415-a0b0-9736152ee652}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{a9199281-0016-43b3-aa67-93025234cb05}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.empty" port_format="1.1" uuid="{ba543f6f-eb83-4973-8782-7ba57fda2f43}" x="1675.0" y="2950.0">
    <label>Empty</label>
    <version>1.1</version>
    <description>Generate empty data of inferred or specified type</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(C) 2016 Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "datatype": {
        "editor": null,
        "label": "Datatype",
        "order": 0,
        "type": "string",
        "value": "&lt;a&gt;"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{2a4e5995-8e2f-4562-991c-4c82f81c1d5b}">
        <label>Output port containing empty data (must be connected or specified)</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{be1abb1f-30de-4dd7-bc80-24c70aef4707}" x="1975.0" y="2500.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{ffe974c5-2c95-4764-827d-045e101a7cd6}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{5258c328-8e06-411b-aec2-9f6f872140af}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{b978efa3-482f-4c11-ab84-6810e0df0bca}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.renamesingletablecolumns" port_format="1.1" uuid="{c08602b4-bfb5-48e4-8ad3-c094e34389c3}" x="1925.0" y="3275.0">
    <label>Rename columns in Table</label>
    <version>1.0</version>
    <description>Rename the Table columns by using regular expressions.</description>
    <author>Greger Cronquist</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "dst_expr": {
        "editor": null,
        "label": "Replacement expression",
        "order": 1,
        "type": "string",
        "value": "Names"
      },
      "src_expr": {
        "editor": null,
        "label": "Search expression",
        "order": 0,
        "type": "string",
        "value": "Column.*"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{4cb401c2-4ee2-42d6-87be-d4baeafd289f}">
        <label>Input</label>
      </input>
      <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{f4052387-d4b3-472e-8a90-72ef69a5b7d5}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{c3cd5f10-de06-4362-b7cb-08cb3468365b}" x="1825.0" y="675.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "edit": true,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Column names"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [0],
        "value_names": ["Column names"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{3c76edc0-cfa4-40b4-ac93-f3e830926e3b}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{37cadaa8-a7d2-44b6-8ef1-a26507db27e8}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.sortcolumns" port_format="1.1" uuid="{c8662da7-f63c-46c0-83f2-18993035fa39}" x="2050.0" y="3275.0">
    <label>Sort columns in Table</label>
    <version>1.0</version>
    <description>Sort the columns in incoming table alphabeticaly.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "sort_order": {
        "editor": {
          "display": null,
          "edit": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Sort order",
        "list": ["Ascending", "Descending"],
        "mode": "selected",
        "order": 0,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["Ascending"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{84c90729-13f6-4933-be5e-ca8efe937dd5}">
        <label>Table with columns in unsorted order</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{4133d578-7293-4546-87d5-2e21a66fc697}">
        <label>Table with columns in sorted order</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablesnew" port_format="1.1" uuid="{c899cf61-cfb0-4274-a57a-a02124b58100}" x="1800.0" y="3075.0">
    <label>Transpose Tables</label>
    <version>1.0</version>
    <description>Auto generated list version of :ref:`Transpose Table`.

In this version, the following ports from the original nodes have been
changed to lists which the node loops over:

    :Looped Inputs: input.
    :Looped Outputs: output.

For details see the original node.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99"],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["0"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use first column as column names",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": true
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="[table]" type_base="[table]" uuid="{c191a42e-3a29-43ed-9367-7475b0a41dad}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="[table]" type_base="[table]" uuid="{1c3ee037-6d98-4a2d-bd1d-65ef44875fe1}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{d3ab6d75-a753-45d4-bd5b-d0875d8a35a9}" x="1675.0" y="1450.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Float 1\", \"f\", [1.3, 1.4]], [\"Float 2\", \"f\", [2.0, 3.0]], [\"Float 3\", \"f\", [2.4, 2.5]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{94c1f32b-8bc1-48ba-9b0d-fa5419355360}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.itemtolist" port_format="1.1" uuid="{d5c754b0-e120-4d5b-9ebf-3367cc9da108}" x="1800.0" y="2950.0">
    <label>Item to List</label>
    <version>1.0</version>
    <description>Create a single item list containing item.</description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="item" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{c2067664-80e5-444e-8e14-8de44f3754e1}">
        <label>Input Item</label>
      </input>
      <output key="list" scheme="hdf5" type="[table]" type_base="[&lt;a&gt;]" uuid="{2c622e86-b500-45cd-aaaf-4de806f00cad}">
        <label>Item as List</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.renamesingletablecolumns" port_format="1.1" uuid="{d68c13c0-06f0-4739-bcb1-be4b624672f7}" x="2325.0" y="2075.0">
    <label>Rename columns in Table</label>
    <version>1.0</version>
    <description>Rename the Table columns by using regular expressions.</description>
    <author>Greger Cronquist</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "dst_expr": {
        "editor": null,
        "label": "Replacement expression",
        "order": 1,
        "type": "string",
        "value": "Float 2"
      },
      "src_expr": {
        "editor": null,
        "label": "Search expression",
        "order": 0,
        "type": "string",
        "value": "0"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{759f862f-1605-49f4-b06d-df03d1029de6}">
        <label>Input</label>
      </input>
      <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{6e396793-d0c7-464a-b766-e8c0231add22}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{d76012c9-81ac-4942-a79f-4db733981b07}" x="1675.0" y="2250.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "",
        "order": 0,
        "type": "string",
        "value": "[[\"Column names\", \"U\", [\"Float 1\"]], [\"column 2\", \"U\", [\"Float 2\"]], [\"column 3\", \"U\", [\"Float 3\"]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{6bb0a9ab-ec47-4c7a-92b3-324028b1d90d}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{e2e3642c-dac5-4794-ad07-102bc47304a9}" x="2175.0" y="3275.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "edit": true,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["0", "1", "2", "3", "Names"],
        "mode": "selected",
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [4],
        "value_names": ["Names"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": true
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{b6ce8b8d-0086-4009-a146-0e3d710706aa}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{c3e41a85-aa3a-4c3f-8353-88affc33c8dd}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.assertequaltable" port_format="1.1" uuid="{e3a841ed-4a56-46b4-8750-a35fd31bddbc}" x="2300.0" y="3575.0">
    <label>Assert Equal Table</label>
    <version>1.0</version>
    <description>Compare two incoming tables and raise an error if they differ.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "abs_tol": {
        "editor": null,
        "label": "Absolute tolerance",
        "order": 6,
        "type": "float",
        "value": 1e-08
      },
      "col_attrs": {
        "editor": null,
        "label": "Compare column attributes",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "col_order": {
        "editor": null,
        "label": "Compare column order",
        "order": 0,
        "type": "boolean",
        "value": true
      },
      "inexact_float": {
        "editor": null,
        "label": "Approximate comparison of floats",
        "order": 4,
        "type": "boolean",
        "value": false
      },
      "rel_tol": {
        "editor": null,
        "label": "Relative tolerance",
        "order": 5,
        "type": "float",
        "value": 1e-05
      },
      "tbl_attrs": {
        "editor": null,
        "label": "Compare table attributes",
        "order": 3,
        "type": "boolean",
        "value": true
      },
      "tbl_names": {
        "editor": null,
        "label": "Compare table names",
        "order": 2,
        "type": "boolean",
        "value": true
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="table1" scheme="hdf5" type="table" type_base="table" uuid="{9a4476a8-0445-4956-8b11-75f5afd847b9}">
        <label>Table A</label>
      </input>
      <input key="table2" scheme="hdf5" type="table" type_base="table" uuid="{b006b3b4-18a4-46a1-87b5-a189be2bf21a}">
        <label>Table B</label>
      </input>
      <output key="out" scheme="hdf5" type="table" type_base="table" uuid="{38015b26-90c0-415b-b979-2922949cf6ef}">
        <label>Output Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{f6f636b5-57be-47d7-8c54-6b55f8d4a522}" x="2175.0" y="3675.0">
    <label>Transpose Table</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "display": null,
          "edit": true,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Names", "0", "1", "2", "3"],
        "mode": "selected",
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["Names"]
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": true
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{a28c1ac1-e1b0-4935-a5af-d40c407e10d7}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{1729e626-d938-48a7-b3e0-9a547c185811}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.transposetablenew" port_format="1.1" uuid="{f805feee-530a-44c1-b077-fabfba3baa7d}" x="1825.0" y="2650.0">
    <label>Transpose Table New</label>
    <version>1.0</version>
    <description>This node performs a standard transpose of tables. Bear in mind, since
a column can only contain one type, if the rows contain different types
the transposed columns will be converted to the closest matching type. The
worst case is therefore strings.

An exception to this behaviour is when the first column contains strings.
Using the option 'Use selected column as column names' the selected column
will replace the column names in the new table. The rest of the input table
will be transposed, discarding the name column.

The other option is 'Column names as first column' which will take the
table's column names and put them in the first column in the output table.
This is convenient if you simply want to extract column names from a table.

When the columns transposed have different types, the node will try to find
a result type to accommodate the new values. For example, combining an
integer and a boolean would result in an integer column with the boolean
values translated from False to 0 and True to 1. LIMITATION: If the types
differ and part of the column is date-time or time-delta no resulting type
can be found.</description>
    <author>Andreas Tagerud</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "columns": {
        "editor": {
          "type": "combobox"
        },
        "label": "Column names column",
        "list": ["Column names", "Text", "Float", "Integer", "Boolean"],
        "order": 2,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": []
      },
      "reverse_col_names": {
        "editor": null,
        "label": "Use selected column as column names",
        "order": 1,
        "type": "boolean",
        "value": false
      },
      "type": "group",
      "use_col_names": {
        "editor": null,
        "label": "Column names as first column",
        "order": 0,
        "type": "boolean",
        "value": false
      }
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{5b618073-09b2-49ae-a007-ccc4a71ee456}">
        <label>The Table to transpose</label>
      </input>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{1dce8fe5-0dae-4265-994e-00dd09aae411}">
        <label>The transposed Table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.create.createtable" port_format="1.1" uuid="{f9cc7926-4e2f-4a9e-8bc2-b1373a0f0e00}" x="1675.0" y="675.0">
    <label>Manually Create Table</label>
    <version>1.0</version>
    <description>Create a Table from scratch in a configuration Gui.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "json_table": {
        "editor": null,
        "label": "GUI",
        "order": 0,
        "type": "string",
        "value": "[[\"Column names\", \"U\", [\"A\", \"B\", \"C\"]]]"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{5174c827-60dc-478c-a09b-af4ee593f8be}">
        <label>Manually created table</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.sorttable" port_format="1.1" uuid="{fd730c69-e200-4cbd-9c17-e3dfc310a1ab}" x="2375.0" y="3475.0">
    <label>Sort rows in Table</label>
    <version>1.1</version>
    <description>Sort table rows according to ascending/descending order of a sort
column.</description>
    <author>Greger Cronquist</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "column": {
        "editor": {
          "edit": true,
          "filter": true,
          "selection": "single",
          "type": "listview"
        },
        "label": "Sort column",
        "list": ["0", "1", "2", "3", "4", "Column names"],
        "mode": "selected",
        "order": 0,
        "passthrough": false,
        "type": "list",
        "value": [5],
        "value_names": ["Column names"]
      },
      "sort_order": {
        "editor": {
          "display": null,
          "edit": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Sort order",
        "list": ["Ascending", "Descending"],
        "mode": "selected",
        "order": 1,
        "passthrough": false,
        "type": "list",
        "value": [0],
        "value_names": ["Ascending"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="Input" scheme="hdf5" type="table" type_base="table" uuid="{455555b6-0f3c-4322-929c-dd646f2f9835}">
        <label>Input</label>
      </input>
      <output key="Output" scheme="hdf5" type="table" type_base="table" uuid="{9a4f927f-fce0-4b1b-9e4c-e27e8f07cd15}">
        <label>Input</label>
      </output>
    </ports>
  </node>
  <connection type="table" uuid="{0199d297-7716-4e28-8598-a1629d29960a}">
    <source node="{c08602b4-bfb5-48e4-8ad3-c094e34389c3}" port="{f4052387-d4b3-472e-8a90-72ef69a5b7d5}"/>
    <destination node="{1833dfd8-80b9-45ca-8d87-b7ef04dd7e4b}" port="{cf52ca9a-1ac6-4419-a2a2-592eb3036345}"/>
  </connection>
  <connection type="table" uuid="{0707c7fe-723b-470e-8d76-ac9f94833857}">
    <source node="{b06a2c49-68ed-4084-b14a-d32e71cc6e8a}" port="{1ef52c0e-fac6-464a-bff4-e43d9a801427}"/>
    <destination node="{5a7e9d29-4540-414b-9101-ca6943644c75}" port="{90e68cf5-9f3e-449d-87ab-1c37377dc3d7}"/>
  </connection>
  <connection type="table" uuid="{08a7cfcc-815f-4617-983f-fc450b8ab02b}">
    <source node="{c08602b4-bfb5-48e4-8ad3-c094e34389c3}" port="{f4052387-d4b3-472e-8a90-72ef69a5b7d5}"/>
    <destination node="{f6f636b5-57be-47d7-8c54-6b55f8d4a522}" port="{a28c1ac1-e1b0-4935-a5af-d40c407e10d7}"/>
  </connection>
  <connection type="[table]" uuid="{0fdfab47-73ca-4f52-8844-20dccad08fd6}">
    <source node="{d5c754b0-e120-4d5b-9ebf-3367cc9da108}" port="{2c622e86-b500-45cd-aaaf-4de806f00cad}"/>
    <destination node="{1a86fea4-a48f-4f56-87e3-b936f36c5b3a}" port="{dd1a1bcf-e6bc-4c63-a703-9b5c3781ffb6}"/>
  </connection>
  <connection type="table" uuid="{246dd44e-9823-4df0-9a46-3411d23a0e4f}">
    <source node="{5022c652-b24e-4906-b55f-4a0495e964bf}" port="{70923659-b7ec-4144-94b8-9e0174040b25}"/>
    <destination node="{5baac739-8f59-49db-951b-a3587dda9cc8}" port="{a63e5453-8a92-4bc1-a836-9d80958a2c30}"/>
  </connection>
  <connection type="table" uuid="{24a66e4a-0f00-4c09-a6bf-0633aab50937}">
    <source node="{324ce5bd-00d4-415a-9ef0-b64b831d9bae}" port="{3c39f37b-c7c9-4c95-9f59-f9edc7247eca}"/>
    <destination node="{5454e5bb-423a-40d3-85a7-8d5d3c8a7365}" port="{5e3d434f-8e05-44d1-b960-60fff354c9fa}"/>
  </connection>
  <connection type="table" uuid="{2652fa0c-dea5-4c8c-82e1-00a60f7a0e49}">
    <source node="{9af36369-3b4e-4030-bdc6-7dcf39374133}" port="{631875a1-257a-4003-8e67-5471bb5b231e}"/>
    <destination node="{f805feee-530a-44c1-b077-fabfba3baa7d}" port="{5b618073-09b2-49ae-a007-ccc4a71ee456}"/>
  </connection>
  <connection type="table" uuid="{277d2b63-7166-4ba3-b26a-91ffb7223740}">
    <source node="{73f6a8e9-0361-4534-9ebf-f6d09318f4de}" port="{67dc4d71-1add-432a-9305-a9a9b5453d10}"/>
    <destination node="{2db49dab-4b32-4dd6-8f8a-bcea568990d8}" port="{546a3c1a-f47e-4ddb-a157-d4f8288a1753}"/>
  </connection>
  <connection type="[table]" uuid="{28f8d06a-e628-4682-88aa-ee5413b46d4b}">
    <source node="{04db26e7-ef5f-4111-a5ca-6cfcaae229d0}" port="{0d195faf-9560-4956-ad46-0b2e7b58d624}"/>
    <destination node="{c899cf61-cfb0-4274-a57a-a02124b58100}" port="{c191a42e-3a29-43ed-9367-7475b0a41dad}"/>
  </connection>
  <connection type="[table]" uuid="{2eeb17a2-4902-4982-b4f4-4455b159e6a1}">
    <source node="{6b237263-e61a-47fc-8560-527f58b82194}" port="{f73840b1-9259-40e6-957d-43e40b5c20a4}"/>
    <destination node="{1a86fea4-a48f-4f56-87e3-b936f36c5b3a}" port="{561798ea-918b-4e11-a667-912ef14e270c}"/>
  </connection>
  <connection type="table" uuid="{2f4c24ab-a278-4802-b196-8f1a57cc12f5}">
    <source node="{f9cc7926-4e2f-4a9e-8bc2-b1373a0f0e00}" port="{5174c827-60dc-478c-a09b-af4ee593f8be}"/>
    <destination node="{c3cd5f10-de06-4362-b7cb-08cb3468365b}" port="{3c76edc0-cfa4-40b4-ac93-f3e830926e3b}"/>
  </connection>
  <connection type="table" uuid="{31c0275d-6706-4776-b408-2d5c1feccf53}">
    <source node="{d68c13c0-06f0-4739-bcb1-be4b624672f7}" port="{6e396793-d0c7-464a-b766-e8c0231add22}"/>
    <destination node="{52c1083c-131a-4f47-9517-f36b08854420}" port="{be916095-a6d1-4fc1-ac95-50071d58464b}"/>
  </connection>
  <connection type="table" uuid="{396046dc-1480-4b51-94f2-853411eddd41}">
    <source node="{b5366423-45cd-483c-a263-fa70c4567b3b}" port="{a9199281-0016-43b3-aa67-93025234cb05}"/>
    <destination node="{896920b6-ddd9-4506-a135-4bca08d2c02c}" port="{a73d4511-0052-42a1-9e9d-aa7422af8650}"/>
  </connection>
  <connection type="table" uuid="{3ad5774b-d08c-42c0-82fb-4906cf32c6d8}">
    <source node="{009dfc11-e465-4d50-a54f-97e77b133c82}" port="{1429c1e3-1ef9-4b75-8a83-f1cd65ad3b58}"/>
    <destination node="{8d29effe-c3cb-4626-a7ac-2c6a20738151}" port="{f160ddb7-163a-4c86-be88-96d60cbb83de}"/>
  </connection>
  <connection type="table" uuid="{438f35d0-97a8-4d48-b2f2-12a7e6039223}">
    <source node="{52c1083c-131a-4f47-9517-f36b08854420}" port="{e9ec471e-1dcf-4b26-ad53-d0ad76fbd7a0}"/>
    <destination node="{828b0730-d8f7-48c8-ac34-145a21e4943b}" port="{dd9440b7-fe29-4c38-89d4-547eaa6a07e1}"/>
  </connection>
  <connection type="table" uuid="{44d341d6-ab93-4b4b-bc1f-c8b239d276f0}">
    <source node="{7cc9091c-b0f5-420f-867b-6667fe98153a}" port="{89e332d6-1693-4574-9b7b-494a2c956b2b}"/>
    <destination node="{e3a841ed-4a56-46b4-8750-a35fd31bddbc}" port="{9a4476a8-0445-4956-8b11-75f5afd847b9}"/>
  </connection>
  <connection type="table" uuid="{48669d7b-f431-408e-b694-dddc05aed3c1}">
    <source node="{c8662da7-f63c-46c0-83f2-18993035fa39}" port="{4133d578-7293-4546-87d5-2e21a66fc697}"/>
    <destination node="{82a02462-9c2a-43b3-be25-1a08791feaa6}" port="{0ca7fb03-fff7-43c5-a86d-0e15bf96a5fb}"/>
  </connection>
  <connection type="table" uuid="{4e14e95d-84eb-4a0c-b7b3-6c83d59ee5e5}">
    <source node="{3fa77c70-6dd8-4081-b78c-edefa3e43b89}" port="{4e107e4f-55e0-419c-8871-13bc25975d90}"/>
    <destination node="{1bba85e7-f5aa-4dcd-af4a-d6525efaa734}" port="{23a7cf17-7e72-4a71-9688-3989fba816ea}"/>
  </connection>
  <connection type="table" uuid="{5025b557-2b2e-4780-b9dd-a87b18ce8655}">
    <source node="{2819f1ec-2216-494b-b56c-9f5496d86e28}" port="{b1e21e23-b684-4d93-ad51-df9a836b67d9}"/>
    <destination node="{896920b6-ddd9-4506-a135-4bca08d2c02c}" port="{7bf95851-3ee5-403b-b43b-398b75366853}"/>
  </connection>
  <connection type="table" uuid="{528ee31f-af89-47e4-8b92-bd6064579d1b}">
    <source node="{0384ceb8-3c0a-48d2-bb07-1d983ce84d4d}" port="{492f2ffb-ac2a-4f20-836b-c8e875e4745e}"/>
    <destination node="{be1abb1f-30de-4dd7-bc80-24c70aef4707}" port="{ffe974c5-2c95-4764-827d-045e101a7cd6}"/>
  </connection>
  <connection type="table" uuid="{57104e2b-43f5-4a58-b19c-72eccaf63aa7}">
    <source node="{9470e85d-3859-4278-ab67-f4c15f916da8}" port="{153e9476-e0da-4e2f-82d5-0844240f130b}"/>
    <destination node="{4246d533-9599-4f3a-9958-1596feeeacaa}" port="{5c359a65-9f24-4e18-9e86-3edf8c05896a}"/>
  </connection>
  <connection type="table" uuid="{66327012-84d3-4f58-9203-2121a0f764db}">
    <source node="{c3cd5f10-de06-4362-b7cb-08cb3468365b}" port="{37cadaa8-a7d2-44b6-8ef1-a26507db27e8}"/>
    <destination node="{53a039cc-ce85-4275-85bc-37d4a44ac992}" port="{072149bd-2ad8-49cf-8a6d-7fe1fae6a059}"/>
  </connection>
  <connection type="table" uuid="{6f6c93b9-7964-4904-b7de-b1a88945a08f}">
    <source node="{1b53a59a-ddd6-483f-9d6d-b348660706bf}" port="{5076fa32-031c-4ee3-9a7a-15912c83a589}"/>
    <destination node="{938275c5-112e-496f-a228-90a412748ccb}" port="{b96aba2b-19af-481c-bf1b-3b404f2635fb}"/>
  </connection>
  <connection type="table" uuid="{724384e3-1787-494a-978e-a42bb0df389f}">
    <source node="{c08602b4-bfb5-48e4-8ad3-c094e34389c3}" port="{f4052387-d4b3-472e-8a90-72ef69a5b7d5}"/>
    <destination node="{417e86a5-1130-4658-ae66-ce58e9f940f2}" port="{451860d7-8de2-48e2-8dad-ef6c866d1516}"/>
  </connection>
  <connection type="table" uuid="{72acf910-b10d-4653-ab1c-b91d1f4df214}">
    <source node="{74cc7c76-6e14-471c-9f88-faf21a8ee259}" port="{1e1c3f23-243d-475d-bd05-f9761af172ed}"/>
    <destination node="{d68c13c0-06f0-4739-bcb1-be4b624672f7}" port="{759f862f-1605-49f4-b06d-df03d1029de6}"/>
  </connection>
  <connection type="table" uuid="{78796f18-f12c-4c51-908c-49f50a8adde5}">
    <source node="{fd730c69-e200-4cbd-9c17-e3dfc310a1ab}" port="{9a4f927f-fce0-4b1b-9e4c-e27e8f07cd15}"/>
    <destination node="{42af1230-58b3-4cd2-925d-614b01c37cf6}" port="{3abac2a4-5d67-4360-ac7e-d379b19a96ae}"/>
  </connection>
  <connection type="table" uuid="{800f04fd-f88c-4d47-a2a7-b128c93987fc}">
    <source node="{01f6c9e2-7511-49e5-add5-7e8709c36609}" port="{015cea61-770d-4b86-abc8-4a08236117c8}"/>
    <destination node="{53a039cc-ce85-4275-85bc-37d4a44ac992}" port="{b0d02174-82c0-4cb1-8e71-d318ba27b224}"/>
  </connection>
  <connection type="table" uuid="{80b6bb40-2be5-4b97-8632-1c187593ab84}">
    <source node="{660f810c-83e1-4485-9de1-841f7b9cd03f}" port="{0d96dbb4-0fe8-44c0-bdcc-913c1c7c6dd0}"/>
    <destination node="{4630547f-7189-435e-9ce5-ad316123768b}" port="{aa90afb9-cd2b-4541-80af-da4fa0544172}"/>
  </connection>
  <connection type="(table, table) -&gt; table" uuid="{814a521d-7816-4c56-ab45-c203a8235d0f}">
    <source node="{d1274c6d-22f8-4c77-87df-a9c4843e82d0}" port="{fceafd59-94b0-43da-b2d1-469c3cff2d04}"/>
    <destination node="{2a988b60-ab1c-44d6-b373-28f1a4bf4b34}" port="{31cc3244-fdaf-4f71-b40c-18ec9e431a63}"/>
  </connection>
  <connection type="table" uuid="{8ac06493-b268-42a8-8f29-33d38084dacb}">
    <source node="{417e86a5-1130-4658-ae66-ce58e9f940f2}" port="{29b0fa89-3026-4538-afba-4e8057ccc226}"/>
    <destination node="{441c2c10-94b4-44ea-bf51-e5dd7541ab0d}" port="{5dff692a-2ecf-4911-b5de-20181156f365}"/>
  </connection>
  <connection type="table" uuid="{8acc5af1-9e0b-46b4-b975-ce4d3490dbf3}">
    <source node="{2ce6b83e-4bf7-404e-8eba-5a6da94044de}" port="{8a6f6ec3-97cb-41b4-988f-79458e541e25}"/>
    <destination node="{be1abb1f-30de-4dd7-bc80-24c70aef4707}" port="{5258c328-8e06-411b-aec2-9f6f872140af}"/>
  </connection>
  <connection type="table" uuid="{90858e5a-2447-4c14-adfd-6f3d6519e8d8}">
    <source node="{e2e3642c-dac5-4794-ad07-102bc47304a9}" port="{c3e41a85-aa3a-4c3f-8353-88affc33c8dd}"/>
    <destination node="{441c2c10-94b4-44ea-bf51-e5dd7541ab0d}" port="{d2ffe288-45ba-4630-833b-236e721e24a8}"/>
  </connection>
  <connection type="table" uuid="{9096a17b-efa3-449c-8896-b445f2958194}">
    <source node="{6df0fe0d-cf81-45a3-b0bf-d643f17d0f38}" port="{ccef5f4a-1ded-4c01-bc20-d351a910dc3c}"/>
    <destination node="{5454e5bb-423a-40d3-85a7-8d5d3c8a7365}" port="{2659fec1-8649-4be2-88fc-1c2aaba44c3d}"/>
  </connection>
  <connection type="table" uuid="{94f94ead-3772-481c-a6b3-6a789e87ffbd}">
    <source node="{b30c469a-0298-4928-992d-605c13fc760a}" port="{6293cc48-012d-4638-a0e3-5d3cb3162027}"/>
    <destination node="{c08602b4-bfb5-48e4-8ad3-c094e34389c3}" port="{4cb401c2-4ee2-42d6-87be-d4baeafd289f}"/>
  </connection>
  <connection type="table" uuid="{97b500d5-466e-4795-90fb-d5d696bade33}">
    <source node="{51156234-091e-4656-9a25-d150dedd4f8e}" port="{fb02a4d7-44c9-4a1b-a42d-fbdf557d8ab8}"/>
    <destination node="{a9b1695a-65a7-4ec6-8242-3a07c437273c}" port="{a34677d2-7e8b-413e-98ff-f83714e14385}"/>
  </connection>
  <connection type="table" uuid="{9855026c-6c5a-4878-ab13-f4ee236cc103}">
    <source node="{1833dfd8-80b9-45ca-8d87-b7ef04dd7e4b}" port="{3b57ee10-b7af-41a8-9f55-8b8d737d613b}"/>
    <destination node="{fd730c69-e200-4cbd-9c17-e3dfc310a1ab}" port="{455555b6-0f3c-4322-929c-dd646f2f9835}"/>
  </connection>
  <connection type="table" uuid="{9ab7367c-cb22-47da-b831-ca2ee9c52ea9}">
    <source node="{c8662da7-f63c-46c0-83f2-18993035fa39}" port="{4133d578-7293-4546-87d5-2e21a66fc697}"/>
    <destination node="{a10b6421-52f6-482c-bafb-a19b96c5c9a4}" port="{fd8a807c-47d8-47aa-9d57-c00821924c27}"/>
  </connection>
  <connection type="table" uuid="{9e8b8058-fa33-4e37-a5a2-467bcd8842fb}">
    <source node="{9a757c0a-0d21-4a02-b4a6-cdabcf5d0713}" port="{77fa714f-6c1b-4275-88e4-91d2a8b59fda}"/>
    <destination node="{9d4dd4ba-428c-45a2-8b70-1d381cf2a89e}" port="{20bb988e-288d-49d5-a8b6-af54dc2c02ad}"/>
  </connection>
  <connection type="table" uuid="{a5e2baab-dbb0-4d64-818f-66af463be8a6}">
    <source node="{827beda5-bcee-4b14-be19-b7dd606f25db}" port="{b7cb2c7f-7334-4065-91ce-c7741c0e3207}"/>
    <destination node="{5a7e9d29-4540-414b-9101-ca6943644c75}" port="{f2022cca-0cf7-4128-95a8-13299b423c49}"/>
  </connection>
  <connection type="table" uuid="{a8de21c2-8400-42fb-8b84-7c8fb00a603a}">
    <source node="{c8662da7-f63c-46c0-83f2-18993035fa39}" port="{4133d578-7293-4546-87d5-2e21a66fc697}"/>
    <destination node="{7cc9091c-b0f5-420f-867b-6667fe98153a}" port="{229e2bc0-6395-4849-ab77-8d21b1dc58f6}"/>
  </connection>
  <connection type="[table]" uuid="{ac910653-1f0b-4cd9-9257-3b9b3a5dcb6b}">
    <source node="{5baac739-8f59-49db-951b-a3587dda9cc8}" port="{8de868b1-05ca-4b89-b7b7-ba3e3352801f}"/>
    <destination node="{6b237263-e61a-47fc-8560-527f58b82194}" port="{a9b8ad17-0655-4b8f-8a78-02c95202539a}"/>
  </connection>
  <connection type="table" uuid="{b46dd6f4-d1fd-4c9f-96e2-54de7833c2c1}">
    <source node="{37c8dc37-49db-4dd2-983c-3dcc1bbd559f}" port="{4ecfa3ce-0b21-48dc-bba8-0c814d740d1a}"/>
    <destination node="{9d4dd4ba-428c-45a2-8b70-1d381cf2a89e}" port="{2f752db1-4cb4-4d3f-8ab5-14db72cdd47d}"/>
  </connection>
  <connection type="table" uuid="{b4775047-e086-46b2-8d0d-56751a172221}">
    <source node="{8f7ab1c2-8fcc-4a90-acef-dabbf59501d5}" port="{5be0a9af-3f25-4291-9e2a-e92af738d6ba}"/>
    <destination node="{54c54429-7dd9-427e-8225-f4f5229139db}" port="{d2885a85-ae43-43a1-aea5-6e6ef8550cff}"/>
  </connection>
  <connection type="table" uuid="{bb0f7b12-f9d2-46c8-adca-f18b666376ea}">
    <source node="{c08602b4-bfb5-48e4-8ad3-c094e34389c3}" port="{f4052387-d4b3-472e-8a90-72ef69a5b7d5}"/>
    <destination node="{c8662da7-f63c-46c0-83f2-18993035fa39}" port="{84c90729-13f6-4933-be5e-ca8efe937dd5}"/>
  </connection>
  <connection type="table" uuid="{bb450f3f-c795-436c-8460-31868faabf74}">
    <source node="{938275c5-112e-496f-a228-90a412748ccb}" port="{ebd17605-e3a7-4c35-baca-a88b8e4661cc}"/>
    <destination node="{a9b1695a-65a7-4ec6-8242-3a07c437273c}" port="{c667078d-1dac-4fa3-883d-42e3b8d887b7}"/>
  </connection>
  <connection type="table" uuid="{bc768cc7-7e4d-442e-b45a-211f649880b9}">
    <source node="{2693a51e-c798-4bdb-aa11-ed28f9520700}" port="{8b8d8da6-46a7-4eb9-98a8-ca7ffa588ee7}"/>
    <destination node="{76880b74-f5d6-47dd-b1f7-1ca5dea9d623}" port="{d0e15ad0-371e-4d45-b798-69a0410ad5b1}"/>
  </connection>
  <connection type="table" uuid="{bd5fe23b-3f06-425e-afe3-13255f47606e}">
    <source node="{ba543f6f-eb83-4973-8782-7ba57fda2f43}" port="{2a4e5995-8e2f-4562-991c-4c82f81c1d5b}"/>
    <destination node="{d5c754b0-e120-4d5b-9ebf-3367cc9da108}" port="{c2067664-80e5-444e-8e14-8de44f3754e1}"/>
  </connection>
  <connection type="table" uuid="{bd8e647c-6aea-46ec-906e-482cf7f82c79}">
    <source node="{27f9e5b0-cf36-4840-a8ad-1c25f3c7d263}" port="{70f85fdb-b450-4f3b-b0d0-5d7c663bcf20}"/>
    <destination node="{0384ceb8-3c0a-48d2-bb07-1d983ce84d4d}" port="{1a697608-29cb-4161-a446-b8d91fe79bef}"/>
  </connection>
  <connection type="table" uuid="{bf39f3b7-05ba-4d1e-965a-a12692404f77}">
    <source node="{54c54429-7dd9-427e-8225-f4f5229139db}" port="{8e4ae3d2-ad9b-4026-8bd2-06aa6f8bbac8}"/>
    <destination node="{76aafef5-94b7-4051-84c8-7be086e78f8b}" port="{5ca97f7a-0ed0-4534-adc5-64b9eac8be45}"/>
  </connection>
  <connection type="table" uuid="{c425b62c-dd55-4aeb-97dc-bc4884fa9d32}">
    <source node="{3d73d926-2008-491e-8a39-91cae2db280c}" port="{f9becf4f-37b9-4572-af98-1ba56902a8fc}"/>
    <destination node="{8556b28f-4088-4461-8ca6-eb1657e03c23}" port="{f8908d59-7490-46fd-af5c-2536732b03a0}"/>
  </connection>
  <connection type="table" uuid="{c4e5d570-0f79-4c1d-a969-4af3fa41317a}">
    <source node="{a10b6421-52f6-482c-bafb-a19b96c5c9a4}" port="{75ee637a-1c53-4b29-97c4-7837c7678f74}"/>
    <destination node="{42af1230-58b3-4cd2-925d-614b01c37cf6}" port="{dd5db96f-5230-4dbf-8d93-75f5a38e728b}"/>
  </connection>
  <connection type="table" uuid="{ca4b5f3c-990a-4464-9c94-97492c97e619}">
    <source node="{8d29effe-c3cb-4626-a7ac-2c6a20738151}" port="{eca3e4f7-f181-433e-b129-b78335e7e68a}"/>
    <destination node="{3d73d926-2008-491e-8a39-91cae2db280c}" port="{71f1310a-6fe8-44b8-b92b-804792fac6f7}"/>
  </connection>
  <connection type="table" uuid="{d8b05de2-c79b-4276-8cf8-97667e85af31}">
    <source node="{18228f99-bf0b-4df9-8811-d8e366ef8fab}" port="{999f4f70-9b07-4a48-97b6-aa1fdbb86df9}"/>
    <destination node="{b5366423-45cd-483c-a263-fa70c4567b3b}" port="{a04b6ab1-e698-4415-a0b0-9736152ee652}"/>
  </connection>
  <connection type="table" uuid="{d8f50cb6-e320-4123-9793-db438c9faf02}">
    <source node="{8556b28f-4088-4461-8ca6-eb1657e03c23}" port="{edb875bb-1a86-428c-acd9-b6200b21abaf}"/>
    <destination node="{74cc7c76-6e14-471c-9f88-faf21a8ee259}" port="{9e387378-071f-45cc-883c-20541d010812}"/>
  </connection>
  <connection type="[(table, table)]" uuid="{daf7493b-fbc0-4e86-b9d3-dad244aef104}">
    <source node="{1a86fea4-a48f-4f56-87e3-b936f36c5b3a}" port="{d687296a-7273-47c3-aa58-aed860978173}"/>
    <destination node="{2a988b60-ab1c-44d6-b373-28f1a4bf4b34}" port="{1ce980dc-1ea8-48eb-beba-e1541ecebe6b}"/>
  </connection>
  <connection type="table" uuid="{dd579c69-539c-4f28-aa9f-b1e9c9cf1b92}">
    <source node="{009dfc11-e465-4d50-a54f-97e77b133c82}" port="{1429c1e3-1ef9-4b75-8a83-f1cd65ad3b58}"/>
    <destination node="{828b0730-d8f7-48c8-ac34-145a21e4943b}" port="{bc938119-d8c4-4e05-a1df-67cf366cbdc5}"/>
  </connection>
  <connection type="table" uuid="{e331297b-6010-4653-a9b8-0215f955347e}">
    <source node="{8afb4a05-4504-43e6-b5db-4e165d1ffc08}" port="{36c5c2d7-f7df-4d8c-ab8c-8c082423578a}"/>
    <destination node="{b30c469a-0298-4928-992d-605c13fc760a}" port="{3281e2dd-6e8f-4155-8632-d1407d7cca8c}"/>
  </connection>
  <connection type="table" uuid="{e38f6d0f-7afa-4d8f-8114-a74316c69152}">
    <source node="{d3ab6d75-a753-45d4-bd5b-d0875d8a35a9}" port="{94c1f32b-8bc1-48ba-9b0d-fa5419355360}"/>
    <destination node="{6df0fe0d-cf81-45a3-b0bf-d643f17d0f38}" port="{ae590b50-9ee9-4673-be18-7d2a885a2497}"/>
  </connection>
  <connection type="table" uuid="{e449ea40-508f-4326-8281-538a57ef777a}">
    <source node="{f6f636b5-57be-47d7-8c54-6b55f8d4a522}" port="{1729e626-d938-48a7-b3e0-9a547c185811}"/>
    <destination node="{e3a841ed-4a56-46b4-8750-a35fd31bddbc}" port="{b006b3b4-18a4-46a1-87b5-a189be2bf21a}"/>
  </connection>
  <connection type="table" uuid="{e5405409-1f72-4fcb-8400-089aede3d445}">
    <source node="{d76012c9-81ac-4942-a79f-4db733981b07}" port="{6bb0a9ab-ec47-4c7a-92b3-324028b1d90d}"/>
    <destination node="{827beda5-bcee-4b14-be19-b7dd606f25db}" port="{a73111f7-876e-4363-80ff-bc7bb396a8d3}"/>
  </connection>
  <connection type="table" uuid="{e63b8dff-8060-4b77-89d1-be9f14fb81ec}">
    <source node="{2301c1a8-ba5f-4aec-b92f-867e05c8916b}" port="{a065cc04-4a12-47ff-a110-b5a2533eb17d}"/>
    <destination node="{37c8dc37-49db-4dd2-983c-3dcc1bbd559f}" port="{ab4dd42f-9b59-451d-ad78-787ebac40787}"/>
  </connection>
  <connection type="table" uuid="{e788a235-0ce3-4e84-a3de-2f7eccbce109}">
    <source node="{c8662da7-f63c-46c0-83f2-18993035fa39}" port="{4133d578-7293-4546-87d5-2e21a66fc697}"/>
    <destination node="{e2e3642c-dac5-4794-ad07-102bc47304a9}" port="{b6ce8b8d-0086-4009-a146-0e3d710706aa}"/>
  </connection>
  <connection type="table" uuid="{e8683b6c-3e27-4f1b-9ae4-6806e5c2aecf}">
    <source node="{34504da3-3626-4ff8-8d1f-c449a6b12228}" port="{ac6f98f2-3772-4048-b5cc-84369d618b21}"/>
    <destination node="{76aafef5-94b7-4051-84c8-7be086e78f8b}" port="{d196eef4-bce3-4827-a4ac-ee5f918c3caa}"/>
  </connection>
  <connection type="table" uuid="{f7498ceb-e995-4c2b-85d6-39e362595498}">
    <source node="{76880b74-f5d6-47dd-b1f7-1ca5dea9d623}" port="{da8d72e5-95ec-4455-bdcc-74ce41726bcb}"/>
    <destination node="{4630547f-7189-435e-9ce5-ad316123768b}" port="{f1113683-ca3f-4d7e-8025-c2da73b9fba1}"/>
  </connection>
  <text color="Beige" height="50.0" uuid="{1543f7ce-7db0-4394-9d3b-63869c2d81a4}" width="100.0" x="1514.5" y="2501.0">1x1 integer</text>
  <text color="Beige" height="75.0" uuid="{3266f61e-7422-4cdc-967d-f2dcbc2992b7}" width="100.0" x="1514.5" y="1701.0">First column as column names, 3x3</text>
  <text color="Beige" height="50.0" uuid="{3601e1d6-4551-4fa3-a5e3-64b20475bbc1}" width="100.0" x="1514.5" y="1076.0">3x3</text>
  <text color="Beige" height="150.0" uuid="{49bbc409-2b4f-47dc-a272-a5454f7ca9c3}" width="100.0" x="1514.5" y="2076.0">Double transpose sing column names to verify that it is possible to return to the original Table (approximately)</text>
  <text color="Beige" height="100.0" uuid="{5caac62d-24ed-49ad-956e-842f33f8393f}" width="100.0" x="1514.5" y="1876.0">Second column as column names, 3x3</text>
  <text color="Beige" height="75.0" uuid="{7a177405-4b77-453e-89f4-a031eef1d8a7}" width="100.0" x="1514.5" y="1501.0">Column names as first column, 2x3</text>
  <text color="Beige" height="75.0" uuid="{849a4f46-f359-4877-a7d9-95d439a3f87d}" width="100.0" x="1514.5" y="1301.0">Columns names only</text>
  <text color="Beige" height="75.0" uuid="{8dbe9040-7c1a-4cdb-b20e-201e2350f26f}" width="225.0" x="1389.5" y="3076.0">Just test that the Tables version runs without failing. The other test cases covers the algorithm.</text>
  <text color="Beige" height="50.0" uuid="{9a0624f8-549a-4885-9ae0-693fd235ea75}" width="100.0" x="1514.5" y="2901.0">Empty Tables</text>
  <text color="Beige" height="75.0" uuid="{a41e11e2-d40e-461f-8caf-cda044a440bd}" width="100.0" x="1514.5" y="2301.0">Transposing strings</text>
  <text color="Beige" height="125.0" uuid="{c0897f4a-2eeb-43b9-a28d-77b5828f1cd1}" width="100.0" x="1514.5" y="2676.0">Mixed types
(Disabled becuase of numpy issues on Linux)</text>
  <text color="Beige" height="100.0" uuid="{e802cd83-f9c2-4b7b-ad2a-f64cbbf25405}" width="225.0" x="1400.0" y="3275.0">Check that for transpose with both options

Also ensure similar behavior depending on order.</text>
  <text color="Beige" height="75.0" uuid="{23880e61-c4d9-491d-bada-aec669e0e121}" width="100.0" x="1525.0" y="575.0">Only names column</text>
  <text color="Beige" height="50.0" uuid="{5cb214f7-62f6-4299-b34f-17a89a9840ed}" width="100.0" x="1525.0" y="875.0">Empty Table</text>
  <text color="Beige" height="175.0" uuid="{2260ec64-65f8-4449-86be-f23e098c99cc}" width="100.0" x="1525.0" y="300.0">Only create masked arrays when necessary</text>
</flow>

<?xml version='1.0' encoding='US-ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" height="50.0" uuid="{3b7bf871-a004-4a4f-80da-c1dcf31b8d8e}" width="50.0" x="0.0" y="0.0" id="">
  <label></label>
  <description></description>
  <author></author>
  <copyright></copyright>
  <version></version>
  <min_version></min_version>
  <icon/>
  <aggregation type="json">null</aggregation>
  <libraries type="json">[]</libraries>
  <pythonpaths type="json">[]</pythonpaths>
  <parameters type="json">{}</parameters>
  <ports/>
  <flow cls="Lambda" height="50.0" uuid="{d1fb9070-6265-4ac3-9540-1c2d18c25365}" width="50.0" x="2193.0" y="1854.0" id="">
    <label>Check lengths of inner lists</label>
    <description></description>
    <author></author>
    <copyright></copyright>
    <version></version>
    <min_version></min_version>
    <icon/>
    <aggregation type="json">null</aggregation>
    <libraries type="json">[]</libraries>
    <pythonpaths type="json">[]</pythonpaths>
    <parameters type="json">{}</parameters>
    <ports>
      <input index="0" key="Port" optional="False" parent="False" scheme="hdf5" type="[table]" uuid="{a83b3db7-dad0-4aa2-afe0-c7e554f1c25d}" x="1775.0" y="2000.0">
        <label>Port</label>
        <description>Port</description>
      </input>
      <output index="0" key="Port" optional="False" parent="False" scheme="hdf5" type="[table]" uuid="{bade28a5-5a40-4b23-977d-7e96522a591a}" x="2025.0" y="2000.0">
        <label>Port</label>
        <description>Port</description>
      </output>
    </ports>
    <basic_ports>
      <output key="Function" scheme="hdf5" type="[table] -&gt; [table]" type_base="&lt;a&gt;" uuid="{86189560-da29-4ea5-bd70-74cc6551ff12}">
        <label>Lambda function</label>
        <description>Lambda function</description>
      </output>
    </basic_ports>
    <node id="org.sysess.sympathy.data.table.conditionalerror" uuid="{81914808-36cc-47a7-849f-348d5d3f9bf4}" x="1900.0" y="2000.0">
      <label>Conditional error/warning</label>
      <description>Raise an error if a predicate is True.</description>
      <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
      <copyright>Copyright (c) 2016 Combine Control Systems AB</copyright>
      <version>1.0</version>
      <parameters type="json">{"type": "group", "predicate": {"description": "Error message is printed if this function returns True.", "label": "Predicate function:", "order": 0, "type": "string", "value": "lambda arg: len(arg) != 2", "editor": {"language": "python", "type": "code"}}, "error_msg": {"description": "Error message to display to the user.", "editor": null, "label": "Error message:", "order": 1, "type": "string", "value": "Wrong list length!"}, "error_type": {"description": "The level \"Error\" stops flow execution.", "label": "Severity:", "mode": "selected", "order": 2, "type": "list", "list": ["Error", "Warning", "Output"], "value": [0], "value_names": ["Error"], "editor": {"display": null, "edit": false, "filter": false, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
      <ports>
        <input key="in" scheme="hdf5" type="[table]" type_base="&lt;a&gt;" uuid="{508291e4-4147-445e-9e7c-1628e5945875}">
          <label>Input</label>
          <description>Input</description>
        </input>
        <output key="out" scheme="hdf5" type="[table]" type_base="&lt;a&gt;" uuid="{19c18c09-44f0-46d3-8d14-1da9ca799b63}">
          <label>Output</label>
          <description>Output</description>
        </output>
      </ports>
    </node>
    <connection type="[table]" uuid="{a68a19f8-0d75-4a4f-b513-9a43e36521e3}">
      <source node="{d1fb9070-6265-4ac3-9540-1c2d18c25365}" port="{a83b3db7-dad0-4aa2-afe0-c7e554f1c25d}"/>
      <destination node="{81914808-36cc-47a7-849f-348d5d3f9bf4}" port="{508291e4-4147-445e-9e7c-1628e5945875}"/>
    </connection>
    <connection type="[table]" uuid="{f94c0ff4-8566-457e-9027-204f257ee3e4}">
      <source node="{81914808-36cc-47a7-849f-348d5d3f9bf4}" port="{19c18c09-44f0-46d3-8d14-1da9ca799b63}"/>
      <destination node="{d1fb9070-6265-4ac3-9540-1c2d18c25365}" port="{bade28a5-5a40-4b23-977d-7e96522a591a}"/>
    </connection>
  </flow>
  <node id="org.sysess.sympathy.data.table.conditionalerror" uuid="{1f3ee194-0a8b-4415-83b2-bf4aa607a161}" x="2200.0" y="1975.0">
    <label>Conditional error/warning</label>
    <description>Raise an error if a predicate is True.</description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>Copyright (c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "predicate": {"description": "Error message is printed if this function returns True.", "label": "Predicate function:", "order": 0, "type": "string", "value": "lambda arg: len(arg) != 5", "editor": {"language": "python", "type": "code"}}, "error_msg": {"description": "Error message to display to the user.", "editor": null, "label": "Error message:", "order": 1, "type": "string", "value": "Wrong list length!"}, "error_type": {"description": "The level \"Error\" stops flow execution.", "label": "Severity:", "mode": "selected", "order": 2, "type": "list", "list": ["Error", "Warning", "Output"], "value": [0], "value_names": ["Error"], "editor": {"display": null, "edit": false, "filter": false, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="[[table]]" type_base="&lt;a&gt;" uuid="{7e703952-68f5-4d24-a1c7-1a18eb4b53e9}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="out" scheme="hdf5" type="[[table]]" type_base="&lt;a&gt;" uuid="{bcb6ac91-aa62-404d-849d-0ffd08fba290}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.empty" uuid="{37e1b4a3-a12a-498d-93a5-9bd6b38310d2}" x="1900.0" y="2100.0">
    <label>Empty</label>
    <description>Generate empty data of inferred or defined datatype</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(C) 2016 Combine Control Systems AB</copyright>
    <version>1.1</version>
    <parameters type="json">{"type": "group", "datatype": {"description": "Define the datatype of the output port.", "editor": null, "label": "Datatype", "order": 0, "type": "string", "value": "[[table]]"}, "fail_strategy": {"description": "How should the node handle the situation when the extract fails?", "label": "Strategy for handling extraction issues", "type": "string", "value": "skip", "editor": {"edit": false, "filter": false, "include_empty": false, "type": "combobox", "display": ["Error", "Skip item"], "options": ["error", "skip"]}}}</parameters>
    <ports>
      <output key="" scheme="hdf5" type="[[table]]" type_base="[[table]]" uuid="{c04361ee-36a8-47c1-aebd-64e6585da1ab}">
        <label>Output port containing empty data (must be connected or defined)</label>
        <description>Output port containing empty data (must be connected or defined)</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.map" uuid="{513a35cf-6100-42ee-a2a6-c02b6ba95cb3}" x="2350.0" y="1975.0">
    <label>Map</label>
    <description>Map Lambda function over each element in argument list</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015-2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "fail_strategy": {"description": "Decide how failure to process an item should be handled.", "label": "Action on exception", "mode": "selected", "order": 0, "type": "list", "list": ["Error", "Create Empty Item", "Skip Item"], "value": [0], "value_names": ["Error"], "editor": {"display": null, "edit": false, "filter": false, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="Function" scheme="hdf5" type="[table] -&gt; [table]" type_base="&lt;a&gt; -&gt; &lt;b&gt;" uuid="{58ca7fb3-ff2a-4792-a59b-1e3202782e3a}">
        <label>Lambda Function to Map</label>
        <description>Lambda Function to Map</description>
      </input>
      <input key="List" scheme="hdf5" type="[[table]]" type_base="[&lt;a&gt;]" uuid="{b5e511f5-9bec-4782-94b2-ad49f0c37cb0}">
        <label>Argument List</label>
        <description>Argument List</description>
      </input>
      <output key="List" scheme="hdf5" type="[[table]]" type_base="[&lt;b&gt;]" uuid="{898ff5fa-dd43-4ff9-96f4-397e71a383d2}">
        <label>Output List</label>
        <description>Output List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.transposelist" uuid="{5677236f-cd26-42ae-b7c7-342eb8116951}" x="2050.0" y="2225.0">
    <label>Transpose list</label>
    <description>Swap the first and second layers of a nested list</description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="[[table]]" type_base="[[&lt;a&gt;]]" uuid="{5c3f0428-e8f5-4529-ae96-a5cbc8b93a05}">
        <label>List</label>
        <description>List</description>
      </input>
      <output key="out" scheme="hdf5" type="[[table]]" type_base="[[&lt;a&gt;]]" uuid="{acafaf16-b254-47d2-8281-2a014bc10b3d}">
        <label>Transposed List</label>
        <description>Transposed List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.transposelist" uuid="{58f7dc10-953f-4c6d-b3e1-b1d7292e804a}" x="2050.0" y="1975.0">
    <label>Transpose list</label>
    <description>Swap the first and second layers of a nested list</description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="[[table]]" type_base="[[&lt;a&gt;]]" uuid="{c286872d-2992-4bf6-b2bc-865dd8bf4423}">
        <label>List</label>
        <description>List</description>
      </input>
      <output key="out" scheme="hdf5" type="[[table]]" type_base="[[&lt;a&gt;]]" uuid="{0050dbda-e1d7-4e87-9218-9fdc0b98d414}">
        <label>Transposed List</label>
        <description>Transposed List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.conditionalerror" uuid="{9f0e52cf-107c-4bf7-a084-babf0aa34385}" x="2200.0" y="2225.0">
    <label>Conditional error/warning</label>
    <description>Raise an error if a predicate is True.</description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>Copyright (c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "predicate": {"description": "Error message is printed if this function returns True.", "label": "Predicate function:", "order": 0, "type": "string", "value": "lambda arg: len(arg) != 0", "editor": {"language": "python", "type": "code"}}, "error_msg": {"description": "Error message to display to the user.", "editor": null, "label": "Error message:", "order": 1, "type": "string", "value": "Wrong list length!"}, "error_type": {"description": "The level \"Error\" stops flow execution.", "label": "Severity:", "mode": "selected", "order": 2, "type": "list", "list": ["Error", "Warning", "Output"], "value": [0], "value_names": ["Error"], "editor": {"display": null, "edit": false, "filter": false, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="[[table]]" type_base="&lt;a&gt;" uuid="{41914edd-1bb5-4f95-8c46-63f5b137c847}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="out" scheme="hdf5" type="[[table]]" type_base="&lt;a&gt;" uuid="{0ee7fb46-dbb9-488a-9702-fc2f25f682a5}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.builtin.empty" uuid="{b5ab7ec8-f412-4959-b671-076a51a63d60}" x="1750.0" y="2225.0">
    <label>Empty</label>
    <description>Generate empty data of inferred or defined datatype</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;, Benedikt Ziegler &lt;benedikt.ziegler@combine.se&gt;</author>
    <copyright>(C) 2016 Combine Control Systems AB</copyright>
    <version>1.1</version>
    <parameters type="json">{"type": "group", "datatype": {"description": "Define the datatype of the output port.", "editor": null, "label": "Datatype", "order": 0, "type": "string", "value": "[table]"}, "fail_strategy": {"description": "How should the node handle the situation when the extract fails?", "label": "Strategy for handling extraction issues", "type": "string", "value": "skip", "editor": {"edit": false, "filter": false, "include_empty": false, "type": "combobox", "display": ["Error", "Skip item"], "options": ["error", "skip"]}}}</parameters>
    <ports>
      <output key="" scheme="hdf5" type="[table]" type_base="[table]" uuid="{87e73abd-d950-4dd7-a988-fd9f65445c1f}">
        <label>Output port containing empty data (must be connected or defined)</label>
        <description>Output port containing empty data (must be connected or defined)</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.random.randomtables" uuid="{c5fc1d40-c531-4dcd-ad5c-8d5861c6bbb2}" x="1750.0" y="1975.0">
    <label>Random Tables</label>
    <description>Random Tables generator.</description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2013 Combine Control Systems AB</copyright>
    <version>0.1</version>
    <parameters type="json">{"type": "group", "column_entries": {"description": "The number of columns in the generated table.", "label": "Columns:", "order": 0, "type": "integer", "value": 5, "editor": {"max": 1000000, "min": 0, "step": 1, "type": "spinbox"}}, "column_length": {"description": "The number of rows in the generated table.", "label": "Rows:", "order": 1, "type": "integer", "value": 5, "editor": {"max": 100000000, "min": 0, "step": 1, "type": "spinbox"}}, "mask_values": {"description": "If checked each value has a 50% chance to be masked.", "editor": null, "label": "Randomly mask values", "order": 2, "type": "boolean", "value": false}, "length": {"description": "The number of tables to be generated.", "label": "List length", "order": 3, "type": "integer", "value": 5, "editor": {"max": 10000, "min": 0, "step": 1, "type": "spinbox"}}}</parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="[table]" type_base="[table]" uuid="{746dc290-336c-4cfd-87d1-d34d7df734a9}">
        <label>Tables with random numbers. The specifications of the Tables are declared in the configuration.</label>
        <description>Tables with random numbers. The specifications of the Tables are declared in the configuration.</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.itemtolist" uuid="{c866a090-59b1-4fda-8796-2cc010f0fb8b}" x="1900.0" y="1975.0">
    <label>Item to List</label>
    <description></description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "n": {"description": "Choose number of times to repeat items.", "editor": null, "label": "Repeat number of times", "order": 0, "type": "integer", "value": 2}}</parameters>
    <ports>
      <input key="item" scheme="hdf5" type="[table]" type_base="&lt;a&gt;" uuid="{c6a1a106-2cf7-4b90-9124-e9f3e5d0d38b}">
        <label>Input Item</label>
        <description>Input Item</description>
      </input>
      <output key="list" scheme="hdf5" type="[[table]]" type_base="[&lt;a&gt;]" uuid="{5a9fa67d-7a49-4c7e-8e2d-18f8eb4b6b3b}">
        <label>Item as List</label>
        <description>Item as List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.itemtolist" uuid="{d006891f-1979-47e3-af25-3e731bebbca1}" x="1900.0" y="2225.0">
    <label>Item to List</label>
    <description></description>
    <author>Erik der Hagopian &lt;erik.hagopian@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "n": {"description": "Choose number of times to repeat items.", "editor": null, "label": "Repeat number of times", "order": 0, "type": "integer", "value": 2}}</parameters>
    <ports>
      <input key="item" scheme="hdf5" type="[table]" type_base="&lt;a&gt;" uuid="{ec667d3c-ea7f-426b-b260-0dbdccad0834}">
        <label>Input Item</label>
        <description>Input Item</description>
      </input>
      <output key="list" scheme="hdf5" type="[[table]]" type_base="[&lt;a&gt;]" uuid="{23b71464-7839-44fd-9fd8-2d3e1b2c92c5}">
        <label>Item as List</label>
        <description>Item as List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.list.transposelist" uuid="{d4650621-61d4-4d1c-b91a-66f4094fbb2d}" x="2050.0" y="2100.0">
    <label>Transpose list</label>
    <description>Swap the first and second layers of a nested list</description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>(C) 2015 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="[[table]]" type_base="[[&lt;a&gt;]]" uuid="{3da6679c-fc3a-4254-9537-e4270d38c4a8}">
        <label>List</label>
        <description>List</description>
      </input>
      <output key="out" scheme="hdf5" type="[[table]]" type_base="[[&lt;a&gt;]]" uuid="{68103702-1d8f-4240-8176-19381263c7cb}">
        <label>Transposed List</label>
        <description>Transposed List</description>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.conditionalerror" uuid="{e57f8bac-8e7a-4f33-9160-bd68853554cc}" x="2200.0" y="2100.0">
    <label>Conditional error/warning</label>
    <description>Raise an error if a predicate is True.</description>
    <author>Magnus Sand&#233;n &lt;magnus.sanden@combine.se&gt;</author>
    <copyright>Copyright (c) 2016 Combine Control Systems AB</copyright>
    <version>1.0</version>
    <parameters type="json">{"type": "group", "predicate": {"description": "Error message is printed if this function returns True.", "label": "Predicate function:", "order": 0, "type": "string", "value": "lambda arg: len(arg) != 0", "editor": {"language": "python", "type": "code"}}, "error_msg": {"description": "Error message to display to the user.", "editor": null, "label": "Error message:", "order": 1, "type": "string", "value": "Wrong list length!"}, "error_type": {"description": "The level \"Error\" stops flow execution.", "label": "Severity:", "mode": "selected", "order": 2, "type": "list", "list": ["Error", "Warning", "Output"], "value": [0], "value_names": ["Error"], "editor": {"display": null, "edit": false, "filter": false, "include_empty": false, "type": "combobox", "options": []}}}</parameters>
    <ports>
      <input key="in" scheme="hdf5" type="[[table]]" type_base="&lt;a&gt;" uuid="{04627ec9-7382-400a-9706-a54de5f45098}">
        <label>Input</label>
        <description>Input</description>
      </input>
      <output key="out" scheme="hdf5" type="[[table]]" type_base="&lt;a&gt;" uuid="{182b85d0-dc36-4cef-a75a-7779e67039a9}">
        <label>Output</label>
        <description>Output</description>
      </output>
    </ports>
  </node>
  <connection type="[[table]]" uuid="{017dcd9c-bf37-4031-b9d3-74784a61ed10}">
    <source node="{58f7dc10-953f-4c6d-b3e1-b1d7292e804a}" port="{0050dbda-e1d7-4e87-9218-9fdc0b98d414}"/>
    <destination node="{1f3ee194-0a8b-4415-83b2-bf4aa607a161}" port="{7e703952-68f5-4d24-a1c7-1a18eb4b53e9}"/>
  </connection>
  <connection type="[table]" uuid="{1d9a3422-024b-4f79-894c-3ad6e5cf1e72}">
    <source node="{c5fc1d40-c531-4dcd-ad5c-8d5861c6bbb2}" port="{746dc290-336c-4cfd-87d1-d34d7df734a9}"/>
    <destination node="{c866a090-59b1-4fda-8796-2cc010f0fb8b}" port="{c6a1a106-2cf7-4b90-9124-e9f3e5d0d38b}"/>
  </connection>
  <connection type="[[table]]" uuid="{23aa03ff-65fb-4b69-83fb-3f07f151e3e8}">
    <source node="{37e1b4a3-a12a-498d-93a5-9bd6b38310d2}" port="{c04361ee-36a8-47c1-aebd-64e6585da1ab}"/>
    <destination node="{d4650621-61d4-4d1c-b91a-66f4094fbb2d}" port="{3da6679c-fc3a-4254-9537-e4270d38c4a8}"/>
  </connection>
  <connection type="[table]" uuid="{566a7fb4-b711-48f9-835c-d3c1170eac9e}">
    <source node="{b5ab7ec8-f412-4959-b671-076a51a63d60}" port="{87e73abd-d950-4dd7-a988-fd9f65445c1f}"/>
    <destination node="{d006891f-1979-47e3-af25-3e731bebbca1}" port="{ec667d3c-ea7f-426b-b260-0dbdccad0834}"/>
  </connection>
  <connection type="[table] -&gt; [table]" uuid="{8e45fedd-7261-4afb-8844-cd34bc4ca324}">
    <source node="{d1fb9070-6265-4ac3-9540-1c2d18c25365}" port="{86189560-da29-4ea5-bd70-74cc6551ff12}"/>
    <destination node="{513a35cf-6100-42ee-a2a6-c02b6ba95cb3}" port="{58ca7fb3-ff2a-4792-a59b-1e3202782e3a}"/>
  </connection>
  <connection type="[[table]]" uuid="{a2ed9df1-4503-4ab7-8145-0d063926ef55}">
    <source node="{5677236f-cd26-42ae-b7c7-342eb8116951}" port="{acafaf16-b254-47d2-8281-2a014bc10b3d}"/>
    <destination node="{9f0e52cf-107c-4bf7-a084-babf0aa34385}" port="{41914edd-1bb5-4f95-8c46-63f5b137c847}"/>
  </connection>
  <connection type="[[table]]" uuid="{ace9945f-5fbf-4b67-9192-7299a7f96b48}">
    <source node="{d006891f-1979-47e3-af25-3e731bebbca1}" port="{23b71464-7839-44fd-9fd8-2d3e1b2c92c5}"/>
    <destination node="{5677236f-cd26-42ae-b7c7-342eb8116951}" port="{5c3f0428-e8f5-4529-ae96-a5cbc8b93a05}"/>
  </connection>
  <connection type="[[table]]" uuid="{be80682c-18e4-4178-aa65-2c9c0007e709}">
    <source node="{c866a090-59b1-4fda-8796-2cc010f0fb8b}" port="{5a9fa67d-7a49-4c7e-8e2d-18f8eb4b6b3b}"/>
    <destination node="{58f7dc10-953f-4c6d-b3e1-b1d7292e804a}" port="{c286872d-2992-4bf6-b2bc-865dd8bf4423}"/>
  </connection>
  <connection type="[[table]]" uuid="{c534e781-e24d-4306-806c-0aab708bf22e}">
    <source node="{1f3ee194-0a8b-4415-83b2-bf4aa607a161}" port="{bcb6ac91-aa62-404d-849d-0ffd08fba290}"/>
    <destination node="{513a35cf-6100-42ee-a2a6-c02b6ba95cb3}" port="{b5e511f5-9bec-4782-94b2-ad49f0c37cb0}"/>
  </connection>
  <connection type="[[table]]" uuid="{c89df20b-7a66-4e56-9adb-03391712fd15}">
    <source node="{d4650621-61d4-4d1c-b91a-66f4094fbb2d}" port="{68103702-1d8f-4240-8176-19381263c7cb}"/>
    <destination node="{e57f8bac-8e7a-4f33-9160-bd68853554cc}" port="{04627ec9-7382-400a-9706-a54de5f45098}"/>
  </connection>
</flow>

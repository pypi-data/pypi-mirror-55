<?xml version='1.0' encoding='US-ASCII'?>
<flow xmlns="http://www.sysess.org/sympathyfordata/workflow/1.0" cls="Flow" uuid="{daf7c421-e19d-4602-aa7d-a8d9971bd2c8}">
  <label></label>
  <ports/>
  <flow cls="Flow" source_uuid="{1c24355d-b764-4439-8a4f-0811e25923c5}" uuid="{134982f4-f54c-444b-8064-e35f73367cfd}" x="1550.0" y="1675.0" id="org.sysess.list.append.flow">
    <label></label>
    <ports>
      <input index="0" key="List" parent="True" scheme="hdf5" source_uuid="{9f3234d5-520f-498a-8d32-02dfcaaf5297}" type="[table]" uuid="{e3dfd297-e026-41bd-aebb-5793fbbaba2f}" x="975.0" y="1800.0">
        <label>List</label>
      </input>
      <input index="1" key="Item" parent="True" scheme="hdf5" source_uuid="{7ba53580-9cce-4547-826b-6f3418bd253d}" type="table" uuid="{c67a017b-ce5f-4e14-9a3f-cb858d09b607}" x="975.0" y="1875.0">
        <label>Item</label>
      </input>
      <output index="0" key="Longer list" parent="True" scheme="hdf5" source_uuid="{6424bf9a-6add-4e05-8235-4b670e8f2958}" type="[table]" uuid="{b3e62bf2-f4d5-4560-bf52-84f50bc7f654}" x="1350.0" y="1850.0">
        <label>Longer list</label>
      </output>
    </ports>
  </flow>
  <flow cls="Flow" uuid="{7c034733-94c4-424d-abe4-596caa8f164c}" x="1400.0" y="2075.0">
    <label>Dask</label>
    <ports/>
    <node id="org.sysess.sympathy.examples.dasktail" port_format="1.1" uuid="{028494a1-f93f-4ff0-a975-48ee2f76325a}" x="2000.0" y="1775.0">
      <label>Dask tail example</label>
      <version>1.0</version>
      <description>Node example demonstrating the tail of a table using dask.</description>
      <author>Erik der Hagopian</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{95edf9c5-0153-4a7e-a86b-c60997ef895f}">
          <label>Input Table</label>
        </input>
        <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{ab6f5050-afa7-4ee3-864f-95d68954d244}">
          <label>Output Table</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.examples.daskstack" port_format="1.1" uuid="{07ed3975-3c5a-4d7e-9edc-5c73bb91896b}" x="2150.0" y="1825.0">
      <label>Dask stack example</label>
      <version>1.0</version>
      <description>Node example demonstrating stacking tables using dask.</description>
      <author>Erik der Hagopian</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{6dfc2dce-5f1c-4dc9-83dc-9b83b21a21f7}">
          <label>Input Table</label>
        </input>
        <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{7b88c5ee-327c-49b2-ab6f-44dd373fd20e}">
          <label>Input Table</label>
        </input>
        <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{ba32f97e-2241-4caa-b70a-f4b501e0fedc}">
          <label>Output Table</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.random.randomtable" port_format="1.1" uuid="{1e664c62-fd7b-41d8-8084-1ce4637c6942}" x="1850.0" y="1850.0">
      <label>Random Table</label>
      <version>0.1</version>
      <description>Generate a Table with random numbers between 0 and 1.</description>
      <author>Erik der Hagopian</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">
      {
        "column_entries": {
          "editor": {
            "max": 1000000,
            "min": 0,
            "step": 1,
            "type": "spinbox"
          },
          "label": "Columns:",
          "order": 0,
          "type": "integer",
          "value": 5
        },
        "column_length": {
          "editor": {
            "max": 100000000,
            "min": 0,
            "step": 1,
            "type": "spinbox"
          },
          "label": "Rows:",
          "order": 1,
          "type": "integer",
          "value": 5
        },
        "mask_values": {
          "editor": null,
          "label": "Randomly mask values",
          "order": 2,
          "type": "boolean",
          "value": false
        },
        "type": "group"
      }
      </parameters>
      <ports>
        <output key="port0" scheme="hdf5" type="table" type_base="table" uuid="{f9fe4c82-9792-4bbb-b426-6231cc9d0a16}">
          <label>Table with random numbers.</label>
        </output>
      </ports>
    </node>
    <node id="org.sysess.sympathy.examples.daskmax" port_format="1.1" uuid="{c7df4268-b25a-4247-adbf-b944b6a185a9}" x="2350.0" y="1825.0">
      <label>Dask max example</label>
      <version>1.0</version>
      <description>Node example demonstrating column-wise max using dask.</description>
      <author>Erik der Hagopian</author>
      <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
      <parameters type="json">{"type": "group"}</parameters>
      <ports>
        <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{04a72c52-7cc4-4d85-b031-8890ebdda0c5}">
          <label>Input Table</label>
        </input>
        <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{551da465-7f7c-467d-93b4-2bcde470e55b}">
          <label>Output Table</label>
        </output>
      </ports>
    </node>
    <connection type="table" uuid="{75c12b45-a19f-42fc-9229-69e8fc58fb5a}">
      <source node="{07ed3975-3c5a-4d7e-9edc-5c73bb91896b}" port="{ba32f97e-2241-4caa-b70a-f4b501e0fedc}"/>
      <destination node="{c7df4268-b25a-4247-adbf-b944b6a185a9}" port="{04a72c52-7cc4-4d85-b031-8890ebdda0c5}"/>
    </connection>
    <connection type="table" uuid="{8bffeade-bd6b-4fec-8e64-989943335711}">
      <source node="{1e664c62-fd7b-41d8-8084-1ce4637c6942}" port="{f9fe4c82-9792-4bbb-b426-6231cc9d0a16}"/>
      <destination node="{07ed3975-3c5a-4d7e-9edc-5c73bb91896b}" port="{7b88c5ee-327c-49b2-ab6f-44dd373fd20e}"/>
    </connection>
    <connection type="table" uuid="{cbe53294-d991-4593-8eaa-f2dede7abb64}">
      <source node="{1e664c62-fd7b-41d8-8084-1ce4637c6942}" port="{f9fe4c82-9792-4bbb-b426-6231cc9d0a16}"/>
      <destination node="{028494a1-f93f-4ff0-a975-48ee2f76325a}" port="{95edf9c5-0153-4a7e-a86b-c60997ef895f}"/>
    </connection>
    <connection type="table" uuid="{d0afec4d-4e86-49ba-a32c-2320054d6ba4}">
      <source node="{028494a1-f93f-4ff0-a975-48ee2f76325a}" port="{ab6f5050-afa7-4ee3-864f-95d68954d244}"/>
      <destination node="{07ed3975-3c5a-4d7e-9edc-5c73bb91896b}" port="{6dfc2dce-5f1c-4dc9-83dc-9b83b21a21f7}"/>
    </connection>
  </flow>
  <node id="org.sysess.sympathy.data.table.conditionalerror" port_format="1.1" uuid="{0eec3514-e383-4ace-8313-856a2d790fb8}" x="1925.0" y="1675.0">
    <label>Conditional error/warning</label>
    <version>1.0</version>
    <description>Raise an error if a predicate is True.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "error_msg": {
        "editor": null,
        "label": "Error message:",
        "order": 1,
        "type": "string",
        "value": "Wrong value!"
      },
      "error_type": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Severity:",
        "list": ["Error", "Warning", "Output"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [0],
        "value_names": ["Error"]
      },
      "predicate": {
        "editor": {
          "language": "python",
          "type": "code"
        },
        "label": "Predicate function:",
        "order": 0,
        "type": "string",
        "value": "lambda arg: arg.get().strip() != \"1\""
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="in" scheme="hdf5" type="text" type_base="&lt;a&gt;" uuid="{27de4d1f-0b91-41f7-8d0e-df0b51c64b1f}">
        <label>Input</label>
      </input>
      <output key="out" scheme="hdf5" type="text" type_base="&lt;a&gt;" uuid="{251116cd-f919-4159-9289-c7e080864e15}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.random.randomtables" port_format="1.1" uuid="{199127bb-372d-4bdd-8126-5be5ce2dc8c4}" x="1250.0" y="1675.0">
    <label>Random Tables</label>
    <version>0.1</version>
    <description>Generate a list of Tables with randomnumbers between 0 and 1.</description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "column_entries": {
        "editor": {
          "max": 1000000,
          "min": 0,
          "step": 1,
          "type": "spinbox"
        },
        "label": "Columns:",
        "order": 0,
        "type": "integer",
        "value": 5
      },
      "column_length": {
        "editor": {
          "max": 100000000,
          "min": 0,
          "step": 1,
          "type": "spinbox"
        },
        "label": "Rows:",
        "order": 1,
        "type": "integer",
        "value": 5
      },
      "length": {
        "editor": {
          "max": 10000,
          "min": 0,
          "step": 1,
          "type": "spinbox"
        },
        "label": "List length",
        "order": 3,
        "type": "integer",
        "value": 5
      },
      "mask_values": {
        "editor": null,
        "label": "Randomly mask values",
        "order": 2,
        "type": "boolean",
        "value": false
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="port0" scheme="hdf5" type="[table]" type_base="[table]" uuid="{d5bb87bd-249e-4f3a-a006-39a9141af50a}">
        <label>Tables with random numbers.</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.examples.controller" port_format="1.1" uuid="{1c99408c-6b37-4aac-bfbe-2381be1727a3}" x="1550.0" y="1525.0">
    <label>Controller example</label>
    <version>1.0</version>
    <description>Node demonstrating controller usage</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "delivery": {
        "address": {
          "editor": null,
          "label": "Adress:",
          "order": 1,
          "type": "string",
          "value": ""
        },
        "delivery": {
          "editor": null,
          "label": "Drone delivery:",
          "order": 0,
          "type": "boolean",
          "value": false
        },
        "label": "Delivery",
        "order": 1,
        "type": "group"
      },
      "fruit": {
        "color": {
          "editor": null,
          "label": "Color:",
          "order": 1,
          "type": "string",
          "value": ""
        },
        "fruit": {
          "editor": {
            "display": null,
            "edit": false,
            "filter": false,
            "include_empty": false,
            "options": ["Apples", "Oranges"],
            "type": "combobox"
          },
          "label": "Apples or oranges?",
          "order": 0,
          "type": "string",
          "value": "Apples"
        },
        "label": "Fruit",
        "order": 0,
        "size": {
          "editor": {
            "display": null,
            "edit": false,
            "filter": false,
            "include_empty": false,
            "options": ["Small", "Big", "Really big"],
            "type": "combobox"
          },
          "label": "Size:",
          "order": 2,
          "type": "string",
          "value": "Small"
        },
        "type": "group"
      },
      "type": "group"
    }
    </parameters>
    <ports/>
  </node>
  <node id="org.sysess.sympathy.examples.progress" port_format="1.1" uuid="{361d0a89-0aa6-4f62-87f9-8303cc60cc76}" x="1700.0" y="1525.0">
    <label>Progress example</label>
    <version>1.0</version>
    <description>Node demonstrating progress usage</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "delay": {
        "editor": null,
        "label": "Delay:",
        "order": 0,
        "type": "float",
        "value": 0.005
      },
      "type": "group"
    }
    </parameters>
    <ports/>
  </node>
  <node id="org.sysess.sympathy.list.getitemlist" port_format="1.1" uuid="{46b98bec-bd0c-4132-bbd7-a6cd4f70bee3}" x="1675.0" y="1675.0">
    <label>Get Item List</label>
    <version>1.0</version>
    <description></description>
    <author>Erik der Hagopian</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "fail_strategy": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Action on index out of bounds",
        "list": ["Error", "Create Empty Item"],
        "mode": "selected",
        "order": 1,
        "type": "list",
        "value": [0],
        "value_names": ["Error"]
      },
      "index": {
        "editor": {
          "display": null,
          "edit": true,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Index",
        "list": [],
        "mode": "selected",
        "order": 0,
        "type": "list",
        "value": [],
        "value_names": ["3"]
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="list" scheme="hdf5" type="[table]" type_base="[&lt;a&gt;]" uuid="{521b04d5-571a-44b6-a1f8-c163bd73bbc3}">
        <label>Input List</label>
      </input>
      <output key="item" scheme="hdf5" type="table" type_base="&lt;a&gt;" uuid="{9bd1f5cc-36af-426a-9389-89f6f704aa7f}">
        <label>Output selected Item from List</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.conditionalerror" port_format="1.1" uuid="{5f04db5d-48a0-418f-b8a1-ce22f42350c3}" x="1550.0" y="1875.0">
    <label>Conditional error/warning</label>
    <version>1.0</version>
    <description>Raise an error if a predicate is True.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "error_msg": {
        "editor": null,
        "label": "Error message:",
        "order": 1,
        "type": "string",
        "value": "Wrong text!"
      },
      "error_type": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Severity:",
        "list": ["Error", "Warning", "Output"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [0],
        "value_names": ["Error"]
      },
      "predicate": {
        "editor": {
          "language": "python",
          "type": "code"
        },
        "label": "Predicate function:",
        "order": 0,
        "type": "string",
        "value": "lambda arg: arg.get().strip() != \"Custom hello world!\""
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="in" scheme="hdf5" type="text" type_base="&lt;a&gt;" uuid="{2359f84d-9f29-45cd-a2b8-242eadec8db4}">
        <label>Input</label>
      </input>
      <output key="out" scheme="hdf5" type="text" type_base="&lt;a&gt;" uuid="{28469f15-7008-42a3-96e0-c3d2ed22ee90}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.examples.helloworldcustomizable" port_format="1.1" uuid="{994137c9-497f-4f33-88ea-70c5086332b4}" x="1400.0" y="1875.0">
    <label>Hello world customizable example</label>
    <version>1.0</version>
    <description>Node demonstrating the basics of node creation.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "greeting": {
        "editor": null,
        "label": "Greeting:",
        "order": 0,
        "type": "string",
        "value": "Custom hello world!"
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <output key="__sy_out__" scheme="hdf5" type="text" type_base="text" uuid="{c2892170-3397-4a2c-b73e-d1d3cd0c0429}">
        <label>Output Text</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.examples.outputexample" port_format="1.1" uuid="{aa7bafe2-3dbf-4ffd-b56a-e5a2ae300a26}" x="1400.0" y="1775.0">
    <label>Output example</label>
    <version>1.0</version>
    <description>Node demonstrating how to write a table.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <output key="output" scheme="hdf5" type="table" type_base="table" uuid="{0d7d744d-efff-4f37-89f2-819b17635e46}">
        <label>Table with a column named 'Enumeration' with values 1-99</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.examples.helloworld" port_format="1.1" uuid="{b044564a-7393-4e9d-a70f-f96f6f416a31}" x="1400.0" y="1975.0">
    <label>Hello world example</label>
    <version></version>
    <description></description>
    <author></author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <output key="__sy_out__" scheme="hdf5" type="text" type_base="text" uuid="{9f3ea0ab-5193-4051-b2b9-e4364d059be5}">
        <label>Output Text</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.examples.adjust" port_format="1.1" uuid="{cff8cdf2-ece0-4f77-9b5c-f83e506bf391}" x="1800.0" y="1675.0">
    <label>Adjust example</label>
    <version>1.0</version>
    <description>Node demonstrating using adjust to set the available options in parameters from input data.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "column": {
        "editor": {
          "display": null,
          "edit": true,
          "filter": true,
          "include_empty": false,
          "options": ["Enumeration"],
          "type": "combobox"
        },
        "label": "Column",
        "order": 0,
        "type": "string",
        "value": "Enumeration"
      },
      "row": {
        "editor": {
          "display": null,
          "edit": true,
          "filter": false,
          "include_empty": false,
          "options": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99],
          "type": "combobox"
        },
        "label": "Row",
        "order": 1,
        "type": "integer",
        "value": 0
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="input" scheme="hdf5" type="table" type_base="table" uuid="{4633d1d4-93fd-41a4-acdb-129e899f18e6}">
        <label>Input Table</label>
      </input>
      <output key="__sy_out__" scheme="hdf5" type="text" type_base="text" uuid="{2a7a2703-9c54-4bd2-855f-4dfd01fe32f5}">
        <label>Output Text</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.data.table.conditionalerror" port_format="1.1" uuid="{f3fb3c9b-3ab6-4f46-a72b-74253f8af660}" x="1550.0" y="1975.0">
    <label>Conditional error/warning</label>
    <version>1.0</version>
    <description>Raise an error if a predicate is True.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "error_msg": {
        "editor": null,
        "label": "Error message:",
        "order": 1,
        "type": "string",
        "value": "Wrong text!"
      },
      "error_type": {
        "editor": {
          "display": null,
          "edit": false,
          "filter": false,
          "include_empty": false,
          "options": [],
          "type": "combobox"
        },
        "label": "Severity:",
        "list": ["Error", "Warning", "Output"],
        "mode": "selected",
        "order": 2,
        "type": "list",
        "value": [0],
        "value_names": ["Error"]
      },
      "predicate": {
        "editor": {
          "language": "python",
          "type": "code"
        },
        "label": "Predicate function:",
        "order": 0,
        "type": "string",
        "value": "lambda arg: arg.get().strip() != \"Hello world!\""
      },
      "type": "group"
    }
    </parameters>
    <ports>
      <input key="in" scheme="hdf5" type="text" type_base="&lt;a&gt;" uuid="{bebb567d-bfd9-42bc-a8d7-aba9baeaf98a}">
        <label>Input</label>
      </input>
      <output key="out" scheme="hdf5" type="text" type_base="&lt;a&gt;" uuid="{3f2b92d4-efba-4033-aeed-f6fa610b95bd}">
        <label>Output</label>
      </output>
    </ports>
  </node>
  <node id="org.sysess.sympathy.examples.allparameters" port_format="1.1" uuid="{f41502da-768b-41a7-86f8-977727b346a7}" x="1400.0" y="1525.0">
    <label>All parameters example</label>
    <version>1.0</version>
    <description>Node showing all different parameter types.</description>
    <author>Alexander Busck</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">
    {
      "lists": {
        "combo": {
          "editor": {
            "display": null,
            "edit": false,
            "filter": false,
            "include_empty": true,
            "options": [],
            "type": "combobox"
          },
          "label": "Combo box",
          "list": ["First option", "Second option", "Third option"],
          "mode": "selected",
          "order": 0,
          "type": "list",
          "value": [1],
          "value_names": ["Second option"]
        },
        "combo_with_filter": {
          "editor": {
            "display": null,
            "edit": false,
            "filter": false,
            "include_empty": true,
            "options": [],
            "type": "combobox"
          },
          "label": "Combo box with filter",
          "list": ["First option", "Second option", "Third option"],
          "mode": "selected",
          "order": 2,
          "type": "list",
          "value": [1],
          "value_names": ["Second option"]
        },
        "editcombo": {
          "editor": {
            "display": null,
            "edit": true,
            "filter": false,
            "include_empty": true,
            "options": [],
            "type": "combobox"
          },
          "label": "Editable combo box",
          "list": ["First option", "Second option", "Third option"],
          "mode": "selected",
          "order": 1,
          "type": "list",
          "value": [1],
          "value_names": ["Second option"]
        },
        "editmultilist": {
          "editor": {
            "edit": true,
            "filter": true,
            "mode": true,
            "selection": "multi",
            "type": "listview"
          },
          "label": "Editable list view with multiselect",
          "list": ["Element1", "Element2", "Element3"],
          "mode": "selected",
          "order": 4,
          "type": "list",
          "value": [0, 2],
          "value_names": ["Element1", "Element3"]
        },
        "label": "Lists",
        "multilist": {
          "editor": {
            "edit": false,
            "filter": true,
            "mode": true,
            "selection": "multi",
            "type": "listview"
          },
          "label": "List view with multiselect",
          "list": ["Element1", "Element2", "Element3"],
          "mode": "selected",
          "order": 3,
          "type": "list",
          "value": [0, 2],
          "value_names": ["Element1", "Element3"]
        },
        "order": 4,
        "type": "page"
      },
      "logics": {
        "boolflag": {
          "editor": null,
          "label": "Boolean",
          "order": 0,
          "type": "boolean",
          "value": true
        },
        "label": "Logics",
        "order": 2,
        "type": "page"
      },
      "numbers": {
        "float": {
          "combo_float1": {
            "editor": {
              "display": null,
              "edit": false,
              "filter": false,
              "include_empty": false,
              "options": [0.1, 0.2, 0.3],
              "type": "combobox"
            },
            "label": "Float with options",
            "order": 2,
            "type": "float",
            "value": 0.0
          },
          "combo_float2": {
            "editor": {
              "display": null,
              "edit": true,
              "filter": false,
              "include_empty": false,
              "options": [0.1, 0.2, 0.3],
              "type": "combobox"
            },
            "label": "Float with editable options",
            "order": 3,
            "type": "float",
            "value": 1.0
          },
          "label": "Floats",
          "order": 0,
          "spinfloat": {
            "editor": {
              "decimals": 4,
              "max": 4.0,
              "min": 0.0,
              "step": 0.1,
              "type": "spinbox"
            },
            "label": "Float in a spinbox",
            "order": 1,
            "type": "float",
            "value": 0.1234
          },
          "stringfloat": {
            "editor": null,
            "label": "Float in a line edit",
            "order": 0,
            "type": "float",
            "value": 0.1234
          },
          "type": "group"
        },
        "integer": {
          "combo_integer1": {
            "editor": {
              "display": null,
              "edit": false,
              "filter": false,
              "include_empty": false,
              "options": [1, 2, 3],
              "type": "combobox"
            },
            "label": "Integer with options",
            "order": 2,
            "type": "integer",
            "value": 1
          },
          "combo_integer2": {
            "editor": {
              "display": null,
              "edit": true,
              "filter": false,
              "include_empty": false,
              "options": [1, 2, 3],
              "type": "combobox"
            },
            "label": "Integer with editable options",
            "order": 3,
            "type": "integer",
            "value": 1
          },
          "label": "Integers",
          "order": 1,
          "spininteger": {
            "editor": {
              "max": 2000,
              "min": 0,
              "step": 10,
              "type": "spinbox"
            },
            "label": "Integer in a spinbox",
            "order": 1,
            "type": "integer",
            "value": 1234
          },
          "stringinteger": {
            "editor": {
              "max": 2000,
              "min": 0,
              "placeholder": "Number between 0 and 2000",
              "type": "lineedit"
            },
            "label": "Integer in a line edit",
            "order": 0,
            "type": "integer",
            "value": 1234
          },
          "type": "group"
        },
        "label": "Numbers",
        "order": 0,
        "type": "page"
      },
      "strings": {
        "label": "Strings",
        "order": 1,
        "path": {
          "directory": {
            "editor": {
              "states": null,
              "type": "dirname"
            },
            "label": "Directory",
            "order": 2,
            "type": "string",
            "value": "MyDirectory"
          },
          "filename": {
            "editor": {
              "filter": ["Image files (*.png *.xpm *.jpg)", "Text files (*.txt)", "Any files (*)"],
              "states": null,
              "type": "filename"
            },
            "label": "Filename",
            "order": 0,
            "type": "string",
            "value": "test.txt"
          },
          "label": "Paths",
          "order": 1,
          "save_filename": {
            "editor": {
              "filter": ["Image files (*.png *.xpm *.jpg)", "Text files (*.txt)", "Any files (*)"],
              "states": null,
              "type": "savename"
            },
            "label": "Save filename",
            "order": 1,
            "type": "string",
            "value": "test.txt"
          },
          "type": "group"
        },
        "strings": {
          "combo_string1": {
            "editor": {
              "display": null,
              "edit": false,
              "filter": false,
              "include_empty": false,
              "options": ["A", "B", "C"],
              "type": "combobox"
            },
            "label": "String with options",
            "order": 2,
            "type": "string",
            "value": "B"
          },
          "combo_string2": {
            "editor": {
              "display": null,
              "edit": false,
              "filter": true,
              "include_empty": true,
              "options": ["A", "B", "C"],
              "type": "combobox"
            },
            "label": "String with filtered options",
            "order": 3,
            "type": "string",
            "value": ""
          },
          "combo_string3": {
            "editor": {
              "display": ["First option (default)", "Second option", "Third option"],
              "edit": false,
              "filter": false,
              "include_empty": false,
              "options": ["opt1", "opt2", "opt3"],
              "type": "combobox"
            },
            "label": "String with key-value options",
            "order": 4,
            "type": "string",
            "value": "opt1"
          },
          "combo_string4": {
            "editor": {
              "display": null,
              "edit": true,
              "filter": false,
              "include_empty": false,
              "options": ["A", "B", "C"],
              "type": "combobox"
            },
            "label": "String with editable options",
            "order": 5,
            "type": "string",
            "value": "B"
          },
          "label": "Normal strings",
          "lineedit": {
            "editor": {
              "placeholder": "Hello World!",
              "type": "lineedit"
            },
            "label": "String in a line edit",
            "order": 0,
            "type": "string",
            "value": "Hello"
          },
          "order": 0,
          "textedit": {
            "editor": {
              "type": "textedit"
            },
            "label": "String in a text edit",
            "order": 1,
            "type": "string",
            "value": "This is a\nmulti-line\neditor"
          },
          "type": "group"
        },
        "type": "page"
      },
      "times": {
        "datetime": {
          "editor": null,
          "label": "Date Time",
          "order": 0,
          "type": "datetime",
          "value": "2001-01-01T00:00:00"
        },
        "label": "Times",
        "order": 3,
        "type": "page"
      },
      "type": "group"
    }
    </parameters>
    <ports/>
  </node>
  <node id="org.sysess.sympathy.examples.readwrite" port_format="1.1" uuid="{f686dac4-9833-4cae-a830-1f9d5c417a57}" x="1400.0" y="1675.0">
    <label>Read/write example</label>
    <version>1.0</version>
    <description>Node demonstrating how to read from/write to lists of tables.</description>
    <author>Magnus Sand&#233;n</author>
    <copyright>Copyright (c) 2011-2019, Combine Control Systems AB</copyright>
    <parameters type="json">{"type": "group"}</parameters>
    <ports>
      <input key="input" scheme="hdf5" type="[table]" type_base="[table]" uuid="{c096d78f-1d89-4d67-84c1-0d339da926d0}">
        <label>Input Tables</label>
      </input>
      <output key="output" scheme="hdf5" type="[table]" type_base="[table]" uuid="{6a2115a7-89d5-488f-a134-94a22b09b043}">
        <label>Output Tables</label>
      </output>
    </ports>
  </node>
  <connection type="text" uuid="{2d5050ed-08d6-4c0a-b7ae-80c7846d7bbc}">
    <source node="{cff8cdf2-ece0-4f77-9b5c-f83e506bf391}" port="{2a7a2703-9c54-4bd2-855f-4dfd01fe32f5}"/>
    <destination node="{0eec3514-e383-4ace-8313-856a2d790fb8}" port="{27de4d1f-0b91-41f7-8d0e-df0b51c64b1f}"/>
  </connection>
  <connection type="[table]" uuid="{33ea8062-16b4-44b7-95cd-171a65ee9025}">
    <source node="{134982f4-f54c-444b-8064-e35f73367cfd}" port="{b3e62bf2-f4d5-4560-bf52-84f50bc7f654}"/>
    <destination node="{46b98bec-bd0c-4132-bbd7-a6cd4f70bee3}" port="{521b04d5-571a-44b6-a1f8-c163bd73bbc3}"/>
  </connection>
  <connection type="table" uuid="{4501bc0a-8e6f-4e9c-a076-52648a19f173}">
    <source node="{aa7bafe2-3dbf-4ffd-b56a-e5a2ae300a26}" port="{0d7d744d-efff-4f37-89f2-819b17635e46}"/>
    <destination node="{134982f4-f54c-444b-8064-e35f73367cfd}" port="{c67a017b-ce5f-4e14-9a3f-cb858d09b607}"/>
  </connection>
  <connection type="table" uuid="{5d4b5e6f-35b9-4f91-a2ee-14789179b2e8}">
    <source node="{46b98bec-bd0c-4132-bbd7-a6cd4f70bee3}" port="{9bd1f5cc-36af-426a-9389-89f6f704aa7f}"/>
    <destination node="{cff8cdf2-ece0-4f77-9b5c-f83e506bf391}" port="{4633d1d4-93fd-41a4-acdb-129e899f18e6}"/>
  </connection>
  <connection type="[table]" uuid="{a6b26648-f58e-4281-be05-cd4dadd5c3bf}">
    <source node="{f686dac4-9833-4cae-a830-1f9d5c417a57}" port="{6a2115a7-89d5-488f-a134-94a22b09b043}"/>
    <destination node="{134982f4-f54c-444b-8064-e35f73367cfd}" port="{e3dfd297-e026-41bd-aebb-5793fbbaba2f}"/>
  </connection>
  <connection type="[table]" uuid="{ce4e2722-db29-4739-ab0b-656decadd83f}">
    <source node="{199127bb-372d-4bdd-8126-5be5ce2dc8c4}" port="{d5bb87bd-249e-4f3a-a006-39a9141af50a}"/>
    <destination node="{f686dac4-9833-4cae-a830-1f9d5c417a57}" port="{c096d78f-1d89-4d67-84c1-0d339da926d0}"/>
  </connection>
  <connection type="text" uuid="{fd09cb31-2d76-417d-a79f-434ced3da04e}">
    <source node="{b044564a-7393-4e9d-a70f-f96f6f416a31}" port="{9f3ea0ab-5193-4051-b2b9-e4364d059be5}"/>
    <destination node="{f3fb3c9b-3ab6-4f46-a72b-74253f8af660}" port="{bebb567d-bfd9-42bc-a8d7-aba9baeaf98a}"/>
  </connection>
  <connection type="text" uuid="{ff29e78c-b71d-4c40-a69b-c6e802fd4863}">
    <source node="{994137c9-497f-4f33-88ea-70c5086332b4}" port="{c2892170-3397-4a2c-b73e-d1d3cd0c0429}"/>
    <destination node="{5f04db5d-48a0-418f-b8a1-ce22f42350c3}" port="{2359f84d-9f29-45cd-a2b8-242eadec8db4}"/>
  </connection>
  <text color="Light" height="175.0" uuid="{f8741eca-2662-4b6b-8e25-2edaddcb6639}" width="500.0" x="1350.0" y="1450.0">These nodes are pretty pointless to run in the tests, since their execute methods are all `pass`</text>
</flow>

# coding: utf-8

"""
    Amphora Data Api

    API for interacting with the Amphora Data platform.  # noqa: E501

    The version of the OpenAPI document: 0.1.2
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SignalValueDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_property': 'str',
        'value_type': 'str',
        'value': 'str'
    }

    attribute_map = {
        '_property': 'property',
        'value_type': 'valueType',
        'value': 'value'
    }

    def __init__(self, _property=None, value_type=None, value=None):  # noqa: E501
        """SignalValueDto - a model defined in OpenAPI"""  # noqa: E501

        self.__property = None
        self._value_type = None
        self._value = None
        self.discriminator = None

        self._property = _property
        self.value_type = value_type
        self.value = value

    @property
    def _property(self):
        """Gets the _property of this SignalValueDto.  # noqa: E501

        The name of the property  # noqa: E501

        :return: The _property of this SignalValueDto.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this SignalValueDto.

        The name of the property  # noqa: E501

        :param _property: The _property of this SignalValueDto.  # noqa: E501
        :type: str
        """

        self.__property = _property

    @property
    def value_type(self):
        """Gets the value_type of this SignalValueDto.  # noqa: E501

        One of Numeric, String, or DateTime  # noqa: E501

        :return: The value_type of this SignalValueDto.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this SignalValueDto.

        One of Numeric, String, or DateTime  # noqa: E501

        :param value_type: The value_type of this SignalValueDto.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    @property
    def value(self):
        """Gets the value of this SignalValueDto.  # noqa: E501

        The value (as a string, eg '7')  # noqa: E501

        :return: The value of this SignalValueDto.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SignalValueDto.

        The value (as a string, eg '7')  # noqa: E501

        :param value: The value of this SignalValueDto.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignalValueDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

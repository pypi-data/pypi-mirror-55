# coding: utf-8

"""
    Amphora Data Api

    API for interacting with the Amphora Data platform.  # noqa: E501

    The version of the OpenAPI document: 0.1.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PropertyValuePair(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_property': 'str',
        'numeric_value': 'float',
        'string_value': 'str'
    }

    attribute_map = {
        '_property': 'property',
        'numeric_value': 'numericValue',
        'string_value': 'stringValue'
    }

    def __init__(self, _property=None, numeric_value=None, string_value=None):  # noqa: E501
        """PropertyValuePair - a model defined in OpenAPI"""  # noqa: E501

        self.__property = None
        self._numeric_value = None
        self._string_value = None
        self.discriminator = None

        self._property = _property
        self.numeric_value = numeric_value
        self.string_value = string_value

    @property
    def _property(self):
        """Gets the _property of this PropertyValuePair.  # noqa: E501


        :return: The _property of this PropertyValuePair.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this PropertyValuePair.


        :param _property: The _property of this PropertyValuePair.  # noqa: E501
        :type: str
        """
        if _property is None:
            raise ValueError("Invalid value for `_property`, must not be `None`")  # noqa: E501
        if _property is not None and len(_property) < 1:
            raise ValueError("Invalid value for `_property`, length must be greater than or equal to `1`")  # noqa: E501

        self.__property = _property

    @property
    def numeric_value(self):
        """Gets the numeric_value of this PropertyValuePair.  # noqa: E501


        :return: The numeric_value of this PropertyValuePair.  # noqa: E501
        :rtype: float
        """
        return self._numeric_value

    @numeric_value.setter
    def numeric_value(self, numeric_value):
        """Sets the numeric_value of this PropertyValuePair.


        :param numeric_value: The numeric_value of this PropertyValuePair.  # noqa: E501
        :type: float
        """

        self._numeric_value = numeric_value

    @property
    def string_value(self):
        """Gets the string_value of this PropertyValuePair.  # noqa: E501


        :return: The string_value of this PropertyValuePair.  # noqa: E501
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this PropertyValuePair.


        :param string_value: The string_value of this PropertyValuePair.  # noqa: E501
        :type: str
        """

        self._string_value = string_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PropertyValuePair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

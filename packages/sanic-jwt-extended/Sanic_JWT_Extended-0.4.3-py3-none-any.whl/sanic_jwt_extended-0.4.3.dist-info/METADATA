Metadata-Version: 2.1
Name: sanic-jwt-extended
Version: 0.4.3
Summary: Extended JWT integration with Sanic
Home-page: https://github.com/NovemberOscar/Sanic-JWT-Extended
License: MIT
Keywords: sanic,jwt,json web token
Author: Seonghyeon Kim
Author-email: kim@seonghyeon.dev
Requires-Python: >=3.6,<4.0
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Dist: PyJWT (>=1.6.4,<2.0.0)
Requires-Dist: sanic (>=0.7.0,<0.8.0)
Project-URL: Documentation, https://sanic-jwt-extended.readthedocs.io/en/latest/
Project-URL: Repository, https://github.com/NovemberOscar/Sanic-JWT-Extended
Description-Content-Type: text/markdown

# Sanic-JWT-Extended (NOW PREPARING 1.0 RELEASE WITH MAJOR CHANGES)
[![Downloads](https://pepy.tech/badge/sanic-jwt-extended)](https://pepy.tech/project/sanic-jwt-extended)
![PyPI](https://img.shields.io/pypi/v/sanic-jwt-extended.svg)
![PyPI - Python Version](https://img.shields.io/pypi/pyversions/sanic-jwt-extended.svg)
![code style](https://img.shields.io/badge/code%20style-black-black.svg)
[![Documentation Status](https://readthedocs.org/projects/sanic-jwt-extended/badge/?version=latest)](https://sanic-jwt-extended.readthedocs.io/en/latest/?badge=latest)

## What is Sanic-JWT-Extended?
Sanic-JWT-Extended is port of Flask-JWT-Extended for Sanic.

## When to use Sanic-JWT-Extended?
Sanic-JWT-Extended not only adds support for using JSON Web Tokens (JWT) to Sanic for protecting views,
but also many helpful (and **optional**) features  built in to make working with JSON Web Tokens
easier. These include:

* Support for adding custom claims to JSON Web Tokens
* [Refresh tokens](https://auth0.com/blog/refresh-tokens-what-are-they-and-when-to-use-them/)
* Token freshness and separate view decorators to only allow fresh tokens
* Role-based access control
* ~~built-in blacklist support~~ <= WIP

## Installation
```bash
pip install sanic-jwt-extended
```

## Usage
[View the documentation online](http://sanic-jwt-extended.readthedocs.io/en/latest/)

## Generating Documentation
You can generate a local copy of the documentation. After installing the requirements,
go to the `docs` directory and run:
```
$ make clean && make html
```


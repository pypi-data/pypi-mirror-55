#!/bin/bash

# NOTES: requirements
# gcloud components install kubectl
# gcloud auth configure-docker
#

set -e

ARGS=$@

VERSION=
PROG=$(basename $0)
DO_TEST=1
TEST_PORT=80

ROOTDIR=$(git rev-parse --show-toplevel)
if [ "$PWD" != "$ROOTDIR" ]; then
    echo "ERROR: current dir is not the clone's root directory"
    exit 1
fi

get_cluster_location() {
    LOCAL_CLUSTER_NAME=$1
    LOCAL_LOCATION=$(gcloud container clusters list | grep "$LOCAL_CLUSTER_NAME " | awk '{ print $2 }')
    echo $LOCAL_LOCATION
}

get_live_url() {
    N=$(pymconfig --name)
    echo "NOT IMPLEMENTED"
    exit -1
}

get_staging_url() {
    N=$(pymconfig --name)
    LOCAL_IP=$(kubectl get service | grep "${N}-staging " | awk '{ print $4 }')
    echo https://$LOCAL_IP
}

usage() {
    cat << EOF
USAGE: $PROG [--no-test] <version>

Deploy a Docker image to GKE in two steps, first to a staging service, then to
a live service if the tests against staging all passed.

OPTIONS:
  --no-test         Skip tests, but still deploy to staging first, then live.
  --live-url        Print the url of the live environment and exit.
  --staging-url     Print the url of the staging environment and exit.
  --debug           Debug verbosity.
  --help            This text.

EOF
}

parse_args() {
    while [ "$1" != "" ]; do
        case $1 in
            "--debug")         set -x; DEBUG='true';;
            "--no-test")       export DO_TEST=;;
            "-h" | "--help")   usage; exit 0;;
            "--live-url")      get_live_url; exit 0;;
            "--staging-url")   get_staging_url; exit 0;;
            *)                 VERSION=$1;;
        esac
        shift
    done
}

parse_args $ARGS

APP_NAME=$(pymconfig --name)
DOCKER_ROOT_REPO=$(pymconfig --docker-repo)
DOCKER_REPO=$DOCKER_ROOT_REPO/$APP_NAME
GCP_PROJECT=$DOCKER_ROOT_REPO
GCP_REGION=$(pymconfig --gcp-region)
GCP_CONCURRENCY=$(pymconfig --gcp-request-concurrency)
GCP_MEMORY=$(pymconfig --gcp-memory)
NAME_STAGING=${APP_NAME}-staging
NAME_LIVE=${APP_NAME}-live

# Stop previous versions?
# gcloud config set app/stop_previous_version true

do_apply_deployment() {
    LOCAL_NAME=$1

    CONTAINER_NAME=container-$APP_NAME

    echo "=> Creating pod config"
    DEP_FILE=.pym/deployment-$LOCAL_NAME.yaml
    cat <<EOF > $DEP_FILE
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: $LOCAL_NAME
  namespace: default
  labels:
    app: $LOCAL_NAME
spec:
  selector:
    matchLabels:
      run: $LOCAL_NAME
      app: $LOCAL_NAME
  template:
    metadata:
      labels:
        run: $LOCAL_NAME
        app: $LOCAL_NAME
    spec:
      terminationGracePeriodSeconds: 180
      containers:
      - name: $CONTAINER_NAME
        image: gcr.io/$DOCKER_REPO:${VERSION}
        livenessProbe:
          initialDelaySeconds: 120
          timeoutSeconds: 10
          periodSeconds: 90
          httpGet:
            path: /ping
            port: 8080
            scheme: HTTP
        ports:
        - containerPort: 8080
        env:
        - name: PORT
          value: "8080"
        - name: VERSION
          value: "${VERSION}"
        - name: PYM_ENV
          value: "${LOCAL_NAME}"
EOF

    for VAR in $(pymconfig --env-secrets)
    do
        echo "   Adding $VAR"
        VALUE=$(env | grep "^$VAR=" | cut -d '=' -f 2)
        if [ -z "$VALUE" ]; then
            echo "ERROR: variable $VAR has no value in env"
            exit 1
        fi
        echo "        - name: $VAR" >> $DEP_FILE
        echo "          value: \"$VALUE\"" >> $DEP_FILE
    done

    IS_DEPLOYED=$(kubectl get deployment | grep "$LOCAL_NAME " | wc -l)

    if [ "$IS_DEPLOYED" -eq "1" ]; then
        echo "=> Deployment already exists. Applying change..."
        kubectl apply -f $DEP_FILE

    else
        echo "=> Deployment is new. Creating it..."
        kubectl create --save-config -f $DEP_FILE
    fi
}

do_apply_service() {
    LOCAL_NAME=$1

    IS_DEPLOYED=$(kubectl get services -o wide | grep "$LOCAL_NAME " | wc -l)

    if [ "$IS_DEPLOYED" -eq "1" ]; then
        echo "=> The service already exists"
    else
        echo "=> The service does not exist. Creating it..."

        SRV_FILE=.pym/service-$LOCAL_NAME.yaml
        cat <<EOF > $SRV_FILE
apiVersion: v1
kind: Service
metadata:
  name: $LOCAL_NAME
  namespace: default
spec:
  type: LoadBalancer
  selector:
    app: $LOCAL_NAME
    run: $LOCAL_NAME
  ports:
  - port: 80
    protocol: TCP
    targetPort: 8080
EOF

        kubectl apply -f $SRV_FILE
    fi
}

#
# General settings
#

echo "=> Creating tmp dir .pym/"
mkdir -p .pym

# ------------------------------------------------------------------------------
#
# DEPLOY TO STAGING CLUSTER
#
# The staging cluster should have only 1 zone, have auto-scaling with minimum
# instance count = 1 and maximum = 2
#
# ------------------------------------------------------------------------------

echo "=> Configuring gcloud..."
gcloud config set project $GCP_PROJECT
gcloud config set compute/region $GCP_REGION

echo "=> Using $NAME_STAGING cluster..."
gcloud config set container/cluster $NAME_STAGING

# Using --zone since the staging environment is supposed to be in one zone only
LOCATION=$(get_cluster_location $NAME_STAGING)
gcloud container clusters get-credentials $NAME_STAGING --zone $LOCATION --project $GCP_PROJECT

# And create/apply deployment, service and ingress, when needed

echo ""
echo "=> Deploying $VERSION to $NAME_STAGING"

do_apply_deployment $NAME_STAGING
do_apply_service $NAME_STAGING

# Then wait for the deployment to be ready
echo "=> Waiting for deployment to get started..."
kubectl rollout status deployment/$NAME_STAGING

# Then wait for rollout to be complete
echo "=> Waiting for rollout to be complete..."
COUNT=2
while [ "$COUNT" -ne 1 ]; do
    sleep 1
    echo -n '*'
    COUNT=$(kubectl get pods -o jsonpath="{..image}" | tr -s '[[:space:]]' '\n' | grep $APP_NAME | sort | uniq | wc -l)
done
echo ''

# Wait for external IP to be assigned
echo "=> Waiting for external IP..."
IP="<pending>"
while [ "$IP" == "<pending>" ]; do
    sleep 1
    echo -n '*'
    IP=$(kubectl get service | grep "${NAME_STAGING} " | awk '{ print $4 }')
done
echo ''

echo "=> $NAME_STAGING is now live at $IP"

# ------------------------------------------------------------------------------
#
# RUN ACCEPTANCE TESTS
#
# ------------------------------------------------------------------------------

cd $ROOTDIR
if [ ! -z "$DO_TEST" ]; then
    URL=$(get_staging_url)
    echo ""
    echo "=> Executing tests against $NAME_STAGING"
    pymtest --host $URL --port $TEST_PORT --no-ssl-check
fi

RC=$?
if [ "$RC" -ne 0 ]; then
    echo "ERROR: Acceptance tests failed against $URL - deploy aborted"
    exit 1
fi

# deploy ${SERVICE_NAME}-live

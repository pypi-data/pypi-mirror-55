{"version":3,"sources":["webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/panels/config/ais_dom/dialog-manage-ais-cloudhook/dialog-manage-ais-cloudhook.ts"],"names":["HaIronFocusablesHelper","getTabbableNodes","node","result","this","_collectTabbableNodes","IronFocusablesHelper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","dom","getDistributedNodes","shadowRoot","root","i","length","paperDialogClass","customElements","get","haTabFixBehaviorImpl","_focusableNodes","define","mixinBehaviors","inputLabel","DialogManageAisCloudhook","LitElement","[object Object]","args","super","_defineProperty","properties","_params","hass","params","updateComplete","_dialog","open","render","html","webhook","webhookUrl","states","state","webhook_id","name","_copyClipboard","_restoreLabel","_closeDialog","querySelector","_paperInput","close","ev","paperInput","currentTarget","input","inputElement","setSelectionRange","value","document","execCommand","label","err","styles","haStyle","css"],"mappings":";0HAiBO,MAAMA,EAAyB,CAQpCC,iBAAkB,SAASC,GACzB,IAAIC,EAAS,GAIb,OAD0BC,KAAKC,sBAAsBH,EAAMC,GAElDG,IAAqBC,gBAAgBJ,GAEvCA,GAYTE,sBAAuB,SAASH,EAAMC,GAEpC,GACED,EAAKM,WAAaC,KAAKC,eACtBJ,IAAqBK,WAAWT,GAEjC,OAAO,EAET,IAoBIU,EApBAC,EAAuCX,EACvCY,EAAWR,IAAqBS,oBAAoBF,GACpDG,EAAYF,EAAW,EACvBA,GAAY,GACdX,EAAOc,KAAKJ,GAkBZD,EADwB,YAAtBC,EAAQK,WAAiD,SAAtBL,EAAQK,UAClCC,YAAIN,GAASO,sBAKbD,YAAIN,EAAQQ,YAAcR,EAAQS,MAAQT,GAASD,SAGhE,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAASY,OAAQD,IAEnCP,EAAYZ,KAAKC,sBAAsBO,EAASW,GAAIpB,IAAWa,EAEjE,OAAOA,ICjFLS,EAAmBC,eAAeC,IAAI,gBAGtCC,EAAuB,CAC3BC,sBACE,OAAO7B,EAAuBC,iBAAiBG,QAgBnDsB,eAAeI,OAAO,kBATf,cACGC,YAAe,CAACH,GAAuBH,8QCGjD,MAAMO,EACJ,oEAEK,MAAMC,UAAiCC,IAAWC,eAAAC,GAAAC,SAAAD,GAAAE,EAAAlC,KAAA,eAAAkC,EAAAlC,KAAA,kBAIvDmC,wBACE,MAAO,CACLC,QAAS,GACTC,KAAM,IAIVN,iBAAwBO,GACtBtC,KAAKoC,QAAUE,QAETtC,KAAKuC,eACXvC,KAAKwC,QAAQC,OAGLC,SACR,IAAK1C,KAAKoC,QACR,OAAOO,MAET,MAAMC,QAAEA,GAAY5C,KAAKoC,QAEnBS,EACJ,WAFa7C,KAAKqC,KAAKS,OAAO,oCAAoCC,MAE5C,2BAA6BH,EAAQI,WAC7D,OAAOL;;oCAEyBC,EAAQK;;;;;;;qBAOvBrB;qBACAiB;sBACC7C,KAAKkD;qBACNlD,KAAKmD;;;;;gCAKMnD,KAAKoD;;;MAMnCZ,cACE,OAAOxC,KAAKiB,WAAYoC,cAAc,mBAGxCC,kBACE,OAAOtD,KAAKiB,WAAYoC,cAAc,eAGhCD,eACNpD,KAAKwC,QAAQe,QAGPL,eAAeM,GAErB,MAAMC,EAAaD,EAAGE,cAChBC,EAASF,EAAWG,aACvBA,aACHD,EAAME,kBAAkB,EAAGF,EAAMG,MAAM1C,QACvC,IACE2C,SAASC,YAAY,UACrBP,EAAWQ,MAAQ,wBACnB,MAAOC,KAKHf,gBACNnD,KAAKsD,YAAYW,MAAQrC,EAG3BuC,oBACE,MAAO,CACLC,IACAC;;;;;;;;;;;;;UAwBN/C,eAAeI,OAAO,8BAA+BG","file":"chunk.c4d3fddd8fe6af8c7cf9.js","sourcesContent":["/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import {\n  html,\n  LitElement,\n  PropertyDeclarations,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"../../../../components/dialog/ha-paper-dialog\";\n// This is not a duplicate import, one is for types, one is for element.\n// tslint:disable-next-line\nimport { HaPaperDialog } from \"../../../../components/dialog/ha-paper-dialog\";\n// tslint:disable-next-line\nimport { PaperInputElement } from \"@polymer/paper-input/paper-input\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { WebhookDialogParams } from \"./show-dialog-manage-ais-cloudhook\";\n\nconst inputLabel =\n  \"Publiczny unikalny adres URL – kliknij, aby skopiować do schowka.\";\n\nexport class DialogManageAisCloudhook extends LitElement {\n  public hass!: HomeAssistant;\n  private _params?: WebhookDialogParams;\n\n  static get properties(): PropertyDeclarations {\n    return {\n      _params: {},\n      hass: {},\n    };\n  }\n\n  public async showDialog(params: WebhookDialogParams) {\n    this._params = params;\n    // Wait till dialog is rendered.\n    await this.updateComplete;\n    this._dialog.open();\n  }\n\n  protected render() {\n    if (!this._params) {\n      return html``;\n    }\n    const { webhook } = this._params;\n    const gateId = this.hass.states[\"sensor.ais_secure_android_id_dom\"].state;\n    const webhookUrl =\n      \"https://\" + gateId + \".paczka.pro/api/webhook/\" + webhook.webhook_id;\n    return html`\n      <ha-paper-dialog with-backdrop>\n        <h2>Wywołanie zwrotne dla ${webhook.name}</h2>\n        <div>\n          <p>\n            Wywołanie zwrotne HTTP (Webhook) jest dostępny pod następującym\n            adresem URL:\n          </p>\n          <paper-input\n            label=\"${inputLabel}\"\n            value=\"${webhookUrl}\"\n            @click=\"${this._copyClipboard}\"\n            @blur=\"${this._restoreLabel}\"\n          ></paper-input>\n        </div>\n\n        <div class=\"paper-dialog-buttons\">\n          <mwc-button @click=\"${this._closeDialog}\">ZAMKNIJ</mwc-button>\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private get _dialog(): HaPaperDialog {\n    return this.shadowRoot!.querySelector(\"ha-paper-dialog\")!;\n  }\n\n  private get _paperInput(): PaperInputElement {\n    return this.shadowRoot!.querySelector(\"paper-input\")!;\n  }\n\n  private _closeDialog() {\n    this._dialog.close();\n  }\n\n  private _copyClipboard(ev: FocusEvent) {\n    // paper-input -> iron-input -> input\n    const paperInput = ev.currentTarget as PaperInputElement;\n    const input = (paperInput.inputElement as any)\n      .inputElement as HTMLInputElement;\n    input.setSelectionRange(0, input.value.length);\n    try {\n      document.execCommand(\"kopiuj\");\n      paperInput.label = \"SKOPIOWANO DO SCHOWKA\";\n    } catch (err) {\n      // Copying failed. Oh no\n    }\n  }\n\n  private _restoreLabel() {\n    this._paperInput.label = inputLabel;\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        ha-paper-dialog {\n          width: 650px;\n        }\n        paper-input {\n          margin-top: -8px;\n        }\n        button.link {\n          color: var(--primary-color);\n        }\n        .paper-dialog-buttons a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-manage-ais-cloudhook\": DialogManageAisCloudhook;\n  }\n}\n\ncustomElements.define(\"dialog-manage-ais-cloudhook\", DialogManageAisCloudhook);\n"],"sourceRoot":""}
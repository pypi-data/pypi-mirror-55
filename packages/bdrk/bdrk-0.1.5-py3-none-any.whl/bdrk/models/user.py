# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'entity_id': 'str',
        'created_at': 'datetime',
        'email_address': 'str',
        'updated_at': 'datetime',
        'user_name': 'str'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'created_at': 'created_at',
        'email_address': 'email_address',
        'updated_at': 'updated_at',
        'user_name': 'user_name'
    }

    readonly_attributes = {
    }

    def __init__(self, entity_id=None, created_at=None, email_address=None, updated_at=None, user_name=None):  # noqa: E501
        """User - a model defined in OpenAPI"""  # noqa: E501

        self._entity_id = None
        self._created_at = None
        self._email_address = None
        self._updated_at = None
        self._user_name = None
        self.discriminator = None

        self.entity_id = entity_id
        if created_at is not None:
            self.created_at = created_at
        if email_address is not None:
            self.email_address = email_address
        if updated_at is not None:
            self.updated_at = updated_at
        if user_name is not None:
            self.user_name = user_name

    @classmethod
    def from_response(cls, entity_id=None, created_at=None, email_address=None, updated_at=None, user_name=None):  # noqa: E501
        """Instantiate User from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._entity_id = None
        self._created_at = None
        self._email_address = None
        self._updated_at = None
        self._user_name = None
        self.discriminator = None

        self.entity_id = entity_id
        if created_at is not None:
            self.created_at = created_at
        if email_address is not None:
            self.email_address = email_address
        if updated_at is not None:
            self.updated_at = updated_at
        if user_name is not None:
            self.user_name = user_name
        return self

    @property
    def entity_id(self):
        """Gets the entity_id of this User.  # noqa: E501


        :return: The entity_id of this User.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this User.


        :param entity_id: The entity_id of this User.  # noqa: E501
        :type: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501
        if entity_id is not None and not re.search(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', entity_id):  # noqa: E501
            raise ValueError(r"Invalid value for `entity_id`, must be a follow pattern or equal to `/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def created_at(self):
        """Gets the created_at of this User.  # noqa: E501


        :return: The created_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this User.


        :param created_at: The created_at of this User.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def email_address(self):
        """Gets the email_address of this User.  # noqa: E501


        :return: The email_address of this User.  # noqa: E501
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this User.


        :param email_address: The email_address of this User.  # noqa: E501
        :type: str
        """

        self._email_address = email_address

    @property
    def updated_at(self):
        """Gets the updated_at of this User.  # noqa: E501


        :return: The updated_at of this User.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.


        :param updated_at: The updated_at of this User.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def user_name(self):
        """Gets the user_name of this User.  # noqa: E501


        :return: The user_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this User.


        :param user_name: The user_name of this User.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

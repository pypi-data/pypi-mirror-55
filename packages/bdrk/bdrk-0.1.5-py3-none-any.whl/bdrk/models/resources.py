# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Resources(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'cpu': 'str',
        'ephemeral_storage': 'str',
        'gpu': 'str',
        'memory': 'str'
    }

    attribute_map = {
        'cpu': 'cpu',
        'ephemeral_storage': 'ephemeral_storage',
        'gpu': 'gpu',
        'memory': 'memory'
    }

    readonly_attributes = {
    }

    def __init__(self, cpu=None, ephemeral_storage=None, gpu=None, memory=None):  # noqa: E501
        """Resources - a model defined in OpenAPI"""  # noqa: E501

        self._cpu = None
        self._ephemeral_storage = None
        self._gpu = None
        self._memory = None
        self.discriminator = None

        self.cpu = cpu
        self.ephemeral_storage = ephemeral_storage
        self.gpu = gpu
        self.memory = memory

    @classmethod
    def from_response(cls, cpu=None, ephemeral_storage=None, gpu=None, memory=None):  # noqa: E501
        """Instantiate Resources from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._cpu = None
        self._ephemeral_storage = None
        self._gpu = None
        self._memory = None
        self.discriminator = None

        self.cpu = cpu
        self.ephemeral_storage = ephemeral_storage
        self.gpu = gpu
        self.memory = memory
        return self

    @property
    def cpu(self):
        """Gets the cpu of this Resources.  # noqa: E501


        :return: The cpu of this Resources.  # noqa: E501
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this Resources.


        :param cpu: The cpu of this Resources.  # noqa: E501
        :type: str
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")  # noqa: E501

        self._cpu = cpu

    @property
    def ephemeral_storage(self):
        """Gets the ephemeral_storage of this Resources.  # noqa: E501


        :return: The ephemeral_storage of this Resources.  # noqa: E501
        :rtype: str
        """
        return self._ephemeral_storage

    @ephemeral_storage.setter
    def ephemeral_storage(self, ephemeral_storage):
        """Sets the ephemeral_storage of this Resources.


        :param ephemeral_storage: The ephemeral_storage of this Resources.  # noqa: E501
        :type: str
        """
        if ephemeral_storage is None:
            raise ValueError("Invalid value for `ephemeral_storage`, must not be `None`")  # noqa: E501

        self._ephemeral_storage = ephemeral_storage

    @property
    def gpu(self):
        """Gets the gpu of this Resources.  # noqa: E501


        :return: The gpu of this Resources.  # noqa: E501
        :rtype: str
        """
        return self._gpu

    @gpu.setter
    def gpu(self, gpu):
        """Sets the gpu of this Resources.


        :param gpu: The gpu of this Resources.  # noqa: E501
        :type: str
        """
        if gpu is None:
            raise ValueError("Invalid value for `gpu`, must not be `None`")  # noqa: E501

        self._gpu = gpu

    @property
    def memory(self):
        """Gets the memory of this Resources.  # noqa: E501


        :return: The memory of this Resources.  # noqa: E501
        :rtype: str
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this Resources.


        :param memory: The memory of this Resources.  # noqa: E501
        :type: str
        """
        if memory is None:
            raise ValueError("Invalid value for `memory`, must not be `None`")  # noqa: E501

        self._memory = memory

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Resources):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

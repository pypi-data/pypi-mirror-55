# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PipelineBase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'entity_id': 'str',
        'config_file_path': 'str',
        'created_at': 'datetime',
        'created_by': 'User',
        'default_script_parameters': 'dict(str, str)',
        'pipeline_name': 'str',
        'pipeline_source': 'PipelineSource',
        'public_id': 'str',
        'secret_names': 'list[str]',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'config_file_path': 'config_file_path',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'default_script_parameters': 'default_script_parameters',
        'pipeline_name': 'pipeline_name',
        'pipeline_source': 'pipeline_source',
        'public_id': 'public_id',
        'secret_names': 'secret_names',
        'updated_at': 'updated_at'
    }

    readonly_attributes = {
    }

    def __init__(self, entity_id=None, config_file_path=None, created_at=None, created_by=None, default_script_parameters=None, pipeline_name=None, pipeline_source=None, public_id=None, secret_names=None, updated_at=None):  # noqa: E501
        """PipelineBase - a model defined in OpenAPI"""  # noqa: E501

        self._entity_id = None
        self._config_file_path = None
        self._created_at = None
        self._created_by = None
        self._default_script_parameters = None
        self._pipeline_name = None
        self._pipeline_source = None
        self._public_id = None
        self._secret_names = None
        self._updated_at = None
        self.discriminator = None

        self.entity_id = entity_id
        self.config_file_path = config_file_path
        self.created_at = created_at
        self.created_by = created_by
        self.default_script_parameters = default_script_parameters
        self.pipeline_name = pipeline_name
        self.pipeline_source = pipeline_source
        self.public_id = public_id
        self.secret_names = secret_names
        self.updated_at = updated_at

    @classmethod
    def from_response(cls, entity_id=None, config_file_path=None, created_at=None, created_by=None, default_script_parameters=None, pipeline_name=None, pipeline_source=None, public_id=None, secret_names=None, updated_at=None):  # noqa: E501
        """Instantiate PipelineBase from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._entity_id = None
        self._config_file_path = None
        self._created_at = None
        self._created_by = None
        self._default_script_parameters = None
        self._pipeline_name = None
        self._pipeline_source = None
        self._public_id = None
        self._secret_names = None
        self._updated_at = None
        self.discriminator = None

        self.entity_id = entity_id
        self.config_file_path = config_file_path
        self.created_at = created_at
        self.created_by = created_by
        self.default_script_parameters = default_script_parameters
        self.pipeline_name = pipeline_name
        self.pipeline_source = pipeline_source
        self.public_id = public_id
        self.secret_names = secret_names
        self.updated_at = updated_at
        return self

    @property
    def entity_id(self):
        """Gets the entity_id of this PipelineBase.  # noqa: E501


        :return: The entity_id of this PipelineBase.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this PipelineBase.


        :param entity_id: The entity_id of this PipelineBase.  # noqa: E501
        :type: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501
        if entity_id is not None and not re.search(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', entity_id):  # noqa: E501
            raise ValueError(r"Invalid value for `entity_id`, must be a follow pattern or equal to `/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def config_file_path(self):
        """Gets the config_file_path of this PipelineBase.  # noqa: E501


        :return: The config_file_path of this PipelineBase.  # noqa: E501
        :rtype: str
        """
        return self._config_file_path

    @config_file_path.setter
    def config_file_path(self, config_file_path):
        """Sets the config_file_path of this PipelineBase.


        :param config_file_path: The config_file_path of this PipelineBase.  # noqa: E501
        :type: str
        """
        if config_file_path is None:
            raise ValueError("Invalid value for `config_file_path`, must not be `None`")  # noqa: E501

        self._config_file_path = config_file_path

    @property
    def created_at(self):
        """Gets the created_at of this PipelineBase.  # noqa: E501


        :return: The created_at of this PipelineBase.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PipelineBase.


        :param created_at: The created_at of this PipelineBase.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this PipelineBase.  # noqa: E501


        :return: The created_by of this PipelineBase.  # noqa: E501
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PipelineBase.


        :param created_by: The created_by of this PipelineBase.  # noqa: E501
        :type: User
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def default_script_parameters(self):
        """Gets the default_script_parameters of this PipelineBase.  # noqa: E501


        :return: The default_script_parameters of this PipelineBase.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._default_script_parameters

    @default_script_parameters.setter
    def default_script_parameters(self, default_script_parameters):
        """Sets the default_script_parameters of this PipelineBase.


        :param default_script_parameters: The default_script_parameters of this PipelineBase.  # noqa: E501
        :type: dict(str, str)
        """
        if default_script_parameters is None:
            raise ValueError("Invalid value for `default_script_parameters`, must not be `None`")  # noqa: E501

        self._default_script_parameters = default_script_parameters

    @property
    def pipeline_name(self):
        """Gets the pipeline_name of this PipelineBase.  # noqa: E501


        :return: The pipeline_name of this PipelineBase.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_name

    @pipeline_name.setter
    def pipeline_name(self, pipeline_name):
        """Sets the pipeline_name of this PipelineBase.


        :param pipeline_name: The pipeline_name of this PipelineBase.  # noqa: E501
        :type: str
        """
        if pipeline_name is None:
            raise ValueError("Invalid value for `pipeline_name`, must not be `None`")  # noqa: E501

        self._pipeline_name = pipeline_name

    @property
    def pipeline_source(self):
        """Gets the pipeline_source of this PipelineBase.  # noqa: E501


        :return: The pipeline_source of this PipelineBase.  # noqa: E501
        :rtype: PipelineSource
        """
        return self._pipeline_source

    @pipeline_source.setter
    def pipeline_source(self, pipeline_source):
        """Sets the pipeline_source of this PipelineBase.


        :param pipeline_source: The pipeline_source of this PipelineBase.  # noqa: E501
        :type: PipelineSource
        """
        if pipeline_source is None:
            raise ValueError("Invalid value for `pipeline_source`, must not be `None`")  # noqa: E501

        self._pipeline_source = pipeline_source

    @property
    def public_id(self):
        """Gets the public_id of this PipelineBase.  # noqa: E501


        :return: The public_id of this PipelineBase.  # noqa: E501
        :rtype: str
        """
        return self._public_id

    @public_id.setter
    def public_id(self, public_id):
        """Sets the public_id of this PipelineBase.


        :param public_id: The public_id of this PipelineBase.  # noqa: E501
        :type: str
        """
        if public_id is None:
            raise ValueError("Invalid value for `public_id`, must not be `None`")  # noqa: E501

        self._public_id = public_id

    @property
    def secret_names(self):
        """Gets the secret_names of this PipelineBase.  # noqa: E501


        :return: The secret_names of this PipelineBase.  # noqa: E501
        :rtype: list[str]
        """
        return self._secret_names

    @secret_names.setter
    def secret_names(self, secret_names):
        """Sets the secret_names of this PipelineBase.


        :param secret_names: The secret_names of this PipelineBase.  # noqa: E501
        :type: list[str]
        """
        if secret_names is None:
            raise ValueError("Invalid value for `secret_names`, must not be `None`")  # noqa: E501

        self._secret_names = secret_names

    @property
    def updated_at(self):
        """Gets the updated_at of this PipelineBase.  # noqa: E501


        :return: The updated_at of this PipelineBase.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PipelineBase.


        :param updated_at: The updated_at of this PipelineBase.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PipelineBase):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class CreatePipelineRunSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'environment_public_id': 'str',
        'resources': 'PipelineResourcesSchema',
        'run_source_commit': 'str',
        'script_parameters': 'object',
        'secrets_override': 'object'
    }

    attribute_map = {
        'environment_public_id': 'environment_public_id',
        'resources': 'resources',
        'run_source_commit': 'run_source_commit',
        'script_parameters': 'script_parameters',
        'secrets_override': 'secrets_override'
    }

    readonly_attributes = {
    }

    def __init__(self, environment_public_id=None, resources=None, run_source_commit=None, script_parameters=None, secrets_override=None):  # noqa: E501
        """CreatePipelineRunSchema - a model defined in OpenAPI"""  # noqa: E501

        self._environment_public_id = None
        self._resources = None
        self._run_source_commit = None
        self._script_parameters = None
        self._secrets_override = None
        self.discriminator = None

        self.environment_public_id = environment_public_id
        if resources is not None:
            self.resources = resources
        if run_source_commit is not None:
            self.run_source_commit = run_source_commit
        if script_parameters is not None:
            self.script_parameters = script_parameters
        if secrets_override is not None:
            self.secrets_override = secrets_override

    @classmethod
    def from_response(cls, environment_public_id=None, resources=None, run_source_commit=None, script_parameters=None, secrets_override=None):  # noqa: E501
        """Instantiate CreatePipelineRunSchema from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._environment_public_id = None
        self._resources = None
        self._run_source_commit = None
        self._script_parameters = None
        self._secrets_override = None
        self.discriminator = None

        self.environment_public_id = environment_public_id
        if resources is not None:
            self.resources = resources
        if run_source_commit is not None:
            self.run_source_commit = run_source_commit
        if script_parameters is not None:
            self.script_parameters = script_parameters
        if secrets_override is not None:
            self.secrets_override = secrets_override
        return self

    @property
    def environment_public_id(self):
        """Gets the environment_public_id of this CreatePipelineRunSchema.  # noqa: E501


        :return: The environment_public_id of this CreatePipelineRunSchema.  # noqa: E501
        :rtype: str
        """
        return self._environment_public_id

    @environment_public_id.setter
    def environment_public_id(self, environment_public_id):
        """Sets the environment_public_id of this CreatePipelineRunSchema.


        :param environment_public_id: The environment_public_id of this CreatePipelineRunSchema.  # noqa: E501
        :type: str
        """
        if environment_public_id is None:
            raise ValueError("Invalid value for `environment_public_id`, must not be `None`")  # noqa: E501
        if environment_public_id is not None and not re.search(r'^([a-zA-Z0-9\-]+)$', environment_public_id):  # noqa: E501
            raise ValueError(r"Invalid value for `environment_public_id`, must be a follow pattern or equal to `/^([a-zA-Z0-9\-]+)$/`")  # noqa: E501

        self._environment_public_id = environment_public_id

    @property
    def resources(self):
        """Gets the resources of this CreatePipelineRunSchema.  # noqa: E501

        Resources required for running pipeline  # noqa: E501

        :return: The resources of this CreatePipelineRunSchema.  # noqa: E501
        :rtype: PipelineResourcesSchema
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this CreatePipelineRunSchema.

        Resources required for running pipeline  # noqa: E501

        :param resources: The resources of this CreatePipelineRunSchema.  # noqa: E501
        :type: PipelineResourcesSchema
        """

        self._resources = resources

    @property
    def run_source_commit(self):
        """Gets the run_source_commit of this CreatePipelineRunSchema.  # noqa: E501


        :return: The run_source_commit of this CreatePipelineRunSchema.  # noqa: E501
        :rtype: str
        """
        return self._run_source_commit

    @run_source_commit.setter
    def run_source_commit(self, run_source_commit):
        """Sets the run_source_commit of this CreatePipelineRunSchema.


        :param run_source_commit: The run_source_commit of this CreatePipelineRunSchema.  # noqa: E501
        :type: str
        """

        self._run_source_commit = run_source_commit

    @property
    def script_parameters(self):
        """Gets the script_parameters of this CreatePipelineRunSchema.  # noqa: E501

        Object mapping parameter name to overridden value  # noqa: E501

        :return: The script_parameters of this CreatePipelineRunSchema.  # noqa: E501
        :rtype: object
        """
        return self._script_parameters

    @script_parameters.setter
    def script_parameters(self, script_parameters):
        """Sets the script_parameters of this CreatePipelineRunSchema.

        Object mapping parameter name to overridden value  # noqa: E501

        :param script_parameters: The script_parameters of this CreatePipelineRunSchema.  # noqa: E501
        :type: object
        """

        self._script_parameters = script_parameters

    @property
    def secrets_override(self):
        """Gets the secrets_override of this CreatePipelineRunSchema.  # noqa: E501


        :return: The secrets_override of this CreatePipelineRunSchema.  # noqa: E501
        :rtype: object
        """
        return self._secrets_override

    @secrets_override.setter
    def secrets_override(self, secrets_override):
        """Sets the secrets_override of this CreatePipelineRunSchema.


        :param secrets_override: The secrets_override of this CreatePipelineRunSchema.  # noqa: E501
        :type: object
        """

        self._secrets_override = secrets_override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePipelineRunSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

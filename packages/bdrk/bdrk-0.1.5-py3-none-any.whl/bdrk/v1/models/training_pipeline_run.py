# coding: utf-8

"""
    Bedrock

    API documentation for Bedrock platform  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class TrainingPipelineRun(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict):       The key is attribute name
                                  and the value is attribute type.
      attribute_map (dict):       The key is attribute name
                                  and the value is json key in definition.
      readonly_attributes (dict): Set of readonly attributes (will not be
                                  serialised in request body).
    """
    openapi_types = {
        'entity_id': 'str',
        'config_file_path': 'str',
        'created_at': 'datetime',
        'created_by': 'User',
        'environment': 'EnvironmentWithIds',
        'log_file_name': 'str',
        'metrics': 'dict(str, str)',
        'pipeline': 'PipelineBase',
        'resources': 'Resources',
        'run_source': 'PipelineSource',
        'run_source_commit': 'str',
        'script_parameters': 'dict(str, str)',
        'status': 'str',
        'updated_at': 'datetime',
        'artefact_id': 'str'
    }

    attribute_map = {
        'entity_id': 'entity_id',
        'config_file_path': 'config_file_path',
        'created_at': 'created_at',
        'created_by': 'created_by',
        'environment': 'environment',
        'log_file_name': 'log_file_name',
        'metrics': 'metrics',
        'pipeline': 'pipeline',
        'resources': 'resources',
        'run_source': 'run_source',
        'run_source_commit': 'run_source_commit',
        'script_parameters': 'script_parameters',
        'status': 'status',
        'updated_at': 'updated_at',
        'artefact_id': 'artefact_id'
    }

    readonly_attributes = {
    }

    def __init__(self, entity_id=None, config_file_path=None, created_at=None, created_by=None, environment=None, log_file_name=None, metrics=None, pipeline=None, resources=None, run_source=None, run_source_commit=None, script_parameters=None, status=None, updated_at=None, artefact_id=None):  # noqa: E501
        """TrainingPipelineRun - a model defined in OpenAPI"""  # noqa: E501

        self._entity_id = None
        self._config_file_path = None
        self._created_at = None
        self._created_by = None
        self._environment = None
        self._log_file_name = None
        self._metrics = None
        self._pipeline = None
        self._resources = None
        self._run_source = None
        self._run_source_commit = None
        self._script_parameters = None
        self._status = None
        self._updated_at = None
        self._artefact_id = None
        self.discriminator = None

        self.entity_id = entity_id
        self.config_file_path = config_file_path
        self.created_at = created_at
        self.created_by = created_by
        self.environment = environment
        if log_file_name is not None:
            self.log_file_name = log_file_name
        self.metrics = metrics
        self.pipeline = pipeline
        self.resources = resources
        self.run_source = run_source
        self.run_source_commit = run_source_commit
        self.script_parameters = script_parameters
        self.status = status
        self.updated_at = updated_at
        if artefact_id is not None:
            self.artefact_id = artefact_id

    @classmethod
    def from_response(cls, entity_id=None, config_file_path=None, created_at=None, created_by=None, environment=None, log_file_name=None, metrics=None, pipeline=None, resources=None, run_source=None, run_source_commit=None, script_parameters=None, status=None, updated_at=None, artefact_id=None):  # noqa: E501
        """Instantiate TrainingPipelineRun from response"""  # noqa: E501
        self = cls.__new__(cls)

        self._entity_id = None
        self._config_file_path = None
        self._created_at = None
        self._created_by = None
        self._environment = None
        self._log_file_name = None
        self._metrics = None
        self._pipeline = None
        self._resources = None
        self._run_source = None
        self._run_source_commit = None
        self._script_parameters = None
        self._status = None
        self._updated_at = None
        self._artefact_id = None
        self.discriminator = None

        self.entity_id = entity_id
        self.config_file_path = config_file_path
        self.created_at = created_at
        self.created_by = created_by
        self.environment = environment
        if log_file_name is not None:
            self.log_file_name = log_file_name
        self.metrics = metrics
        self.pipeline = pipeline
        self.resources = resources
        self.run_source = run_source
        self.run_source_commit = run_source_commit
        self.script_parameters = script_parameters
        self.status = status
        self.updated_at = updated_at
        if artefact_id is not None:
            self.artefact_id = artefact_id
        return self

    @property
    def entity_id(self):
        """Gets the entity_id of this TrainingPipelineRun.  # noqa: E501


        :return: The entity_id of this TrainingPipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this TrainingPipelineRun.


        :param entity_id: The entity_id of this TrainingPipelineRun.  # noqa: E501
        :type: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")  # noqa: E501
        if entity_id is not None and not re.search(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', entity_id):  # noqa: E501
            raise ValueError(r"Invalid value for `entity_id`, must be a follow pattern or equal to `/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._entity_id = entity_id

    @property
    def config_file_path(self):
        """Gets the config_file_path of this TrainingPipelineRun.  # noqa: E501


        :return: The config_file_path of this TrainingPipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._config_file_path

    @config_file_path.setter
    def config_file_path(self, config_file_path):
        """Sets the config_file_path of this TrainingPipelineRun.


        :param config_file_path: The config_file_path of this TrainingPipelineRun.  # noqa: E501
        :type: str
        """
        if config_file_path is None:
            raise ValueError("Invalid value for `config_file_path`, must not be `None`")  # noqa: E501

        self._config_file_path = config_file_path

    @property
    def created_at(self):
        """Gets the created_at of this TrainingPipelineRun.  # noqa: E501


        :return: The created_at of this TrainingPipelineRun.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TrainingPipelineRun.


        :param created_at: The created_at of this TrainingPipelineRun.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_by(self):
        """Gets the created_by of this TrainingPipelineRun.  # noqa: E501


        :return: The created_by of this TrainingPipelineRun.  # noqa: E501
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TrainingPipelineRun.


        :param created_by: The created_by of this TrainingPipelineRun.  # noqa: E501
        :type: User
        """
        if created_by is None:
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def environment(self):
        """Gets the environment of this TrainingPipelineRun.  # noqa: E501


        :return: The environment of this TrainingPipelineRun.  # noqa: E501
        :rtype: EnvironmentWithIds
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this TrainingPipelineRun.


        :param environment: The environment of this TrainingPipelineRun.  # noqa: E501
        :type: EnvironmentWithIds
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")  # noqa: E501

        self._environment = environment

    @property
    def log_file_name(self):
        """Gets the log_file_name of this TrainingPipelineRun.  # noqa: E501


        :return: The log_file_name of this TrainingPipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._log_file_name

    @log_file_name.setter
    def log_file_name(self, log_file_name):
        """Sets the log_file_name of this TrainingPipelineRun.


        :param log_file_name: The log_file_name of this TrainingPipelineRun.  # noqa: E501
        :type: str
        """

        self._log_file_name = log_file_name

    @property
    def metrics(self):
        """Gets the metrics of this TrainingPipelineRun.  # noqa: E501


        :return: The metrics of this TrainingPipelineRun.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this TrainingPipelineRun.


        :param metrics: The metrics of this TrainingPipelineRun.  # noqa: E501
        :type: dict(str, str)
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501

        self._metrics = metrics

    @property
    def pipeline(self):
        """Gets the pipeline of this TrainingPipelineRun.  # noqa: E501


        :return: The pipeline of this TrainingPipelineRun.  # noqa: E501
        :rtype: PipelineBase
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline):
        """Sets the pipeline of this TrainingPipelineRun.


        :param pipeline: The pipeline of this TrainingPipelineRun.  # noqa: E501
        :type: PipelineBase
        """
        if pipeline is None:
            raise ValueError("Invalid value for `pipeline`, must not be `None`")  # noqa: E501

        self._pipeline = pipeline

    @property
    def resources(self):
        """Gets the resources of this TrainingPipelineRun.  # noqa: E501


        :return: The resources of this TrainingPipelineRun.  # noqa: E501
        :rtype: Resources
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this TrainingPipelineRun.


        :param resources: The resources of this TrainingPipelineRun.  # noqa: E501
        :type: Resources
        """
        if resources is None:
            raise ValueError("Invalid value for `resources`, must not be `None`")  # noqa: E501

        self._resources = resources

    @property
    def run_source(self):
        """Gets the run_source of this TrainingPipelineRun.  # noqa: E501


        :return: The run_source of this TrainingPipelineRun.  # noqa: E501
        :rtype: PipelineSource
        """
        return self._run_source

    @run_source.setter
    def run_source(self, run_source):
        """Sets the run_source of this TrainingPipelineRun.


        :param run_source: The run_source of this TrainingPipelineRun.  # noqa: E501
        :type: PipelineSource
        """
        if run_source is None:
            raise ValueError("Invalid value for `run_source`, must not be `None`")  # noqa: E501

        self._run_source = run_source

    @property
    def run_source_commit(self):
        """Gets the run_source_commit of this TrainingPipelineRun.  # noqa: E501


        :return: The run_source_commit of this TrainingPipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._run_source_commit

    @run_source_commit.setter
    def run_source_commit(self, run_source_commit):
        """Sets the run_source_commit of this TrainingPipelineRun.


        :param run_source_commit: The run_source_commit of this TrainingPipelineRun.  # noqa: E501
        :type: str
        """
        if run_source_commit is None:
            raise ValueError("Invalid value for `run_source_commit`, must not be `None`")  # noqa: E501

        self._run_source_commit = run_source_commit

    @property
    def script_parameters(self):
        """Gets the script_parameters of this TrainingPipelineRun.  # noqa: E501


        :return: The script_parameters of this TrainingPipelineRun.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._script_parameters

    @script_parameters.setter
    def script_parameters(self, script_parameters):
        """Sets the script_parameters of this TrainingPipelineRun.


        :param script_parameters: The script_parameters of this TrainingPipelineRun.  # noqa: E501
        :type: dict(str, str)
        """
        if script_parameters is None:
            raise ValueError("Invalid value for `script_parameters`, must not be `None`")  # noqa: E501

        self._script_parameters = script_parameters

    @property
    def status(self):
        """Gets the status of this TrainingPipelineRun.  # noqa: E501


        :return: The status of this TrainingPipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TrainingPipelineRun.


        :param status: The status of this TrainingPipelineRun.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["Accepted", "Rejected", "Queued", "Running", "Failed", "Succeeded", "Unknown", "Stopping", "Stopped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this TrainingPipelineRun.  # noqa: E501


        :return: The updated_at of this TrainingPipelineRun.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this TrainingPipelineRun.


        :param updated_at: The updated_at of this TrainingPipelineRun.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def artefact_id(self):
        """Gets the artefact_id of this TrainingPipelineRun.  # noqa: E501


        :return: The artefact_id of this TrainingPipelineRun.  # noqa: E501
        :rtype: str
        """
        return self._artefact_id

    @artefact_id.setter
    def artefact_id(self, artefact_id):
        """Sets the artefact_id of this TrainingPipelineRun.


        :param artefact_id: The artefact_id of this TrainingPipelineRun.  # noqa: E501
        :type: str
        """
        if artefact_id is not None and not re.search(r'^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$', artefact_id):  # noqa: E501
            raise ValueError(r"Invalid value for `artefact_id`, must be a follow pattern or equal to `/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/`")  # noqa: E501

        self._artefact_id = artefact_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrainingPipelineRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

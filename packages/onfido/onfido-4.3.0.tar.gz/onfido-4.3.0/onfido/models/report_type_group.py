# coding: utf-8

"""
    Onfido API

    The Onfido API is used to submit check requests.  # noqa: E501

    OpenAPI spec version: 2.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReportTypeGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'group_only': 'bool',
        'report_types': 'list[ReportType]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'group_only': 'group_only',
        'report_types': 'report_types'
    }

    def __init__(self, id=None, name=None, group_only=None, report_types=None):  # noqa: E501
        """ReportTypeGroup - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._group_only = None
        self._report_types = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if group_only is not None:
            self.group_only = group_only
        if report_types is not None:
            self.report_types = report_types

    @property
    def id(self):
        """Gets the id of this ReportTypeGroup.  # noqa: E501

        The unique identifier for the group.  # noqa: E501

        :return: The id of this ReportTypeGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReportTypeGroup.

        The unique identifier for the group.  # noqa: E501

        :param id: The id of this ReportTypeGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReportTypeGroup.  # noqa: E501

        The group’s name, as specified under your account.  # noqa: E501

        :return: The name of this ReportTypeGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReportTypeGroup.

        The group’s name, as specified under your account.  # noqa: E501

        :param name: The name of this ReportTypeGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def group_only(self):
        """Gets the group_only of this ReportTypeGroup.  # noqa: E501

        If false, individual reports in that group can be requested; if true, all reports must be requested together.  # noqa: E501

        :return: The group_only of this ReportTypeGroup.  # noqa: E501
        :rtype: bool
        """
        return self._group_only

    @group_only.setter
    def group_only(self, group_only):
        """Sets the group_only of this ReportTypeGroup.

        If false, individual reports in that group can be requested; if true, all reports must be requested together.  # noqa: E501

        :param group_only: The group_only of this ReportTypeGroup.  # noqa: E501
        :type: bool
        """

        self._group_only = group_only

    @property
    def report_types(self):
        """Gets the report_types of this ReportTypeGroup.  # noqa: E501

        A list of report types included in this group.  # noqa: E501

        :return: The report_types of this ReportTypeGroup.  # noqa: E501
        :rtype: list[ReportType]
        """
        return self._report_types

    @report_types.setter
    def report_types(self, report_types):
        """Sets the report_types of this ReportTypeGroup.

        A list of report types included in this group.  # noqa: E501

        :param report_types: The report_types of this ReportTypeGroup.  # noqa: E501
        :type: list[ReportType]
        """

        self._report_types = report_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportTypeGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

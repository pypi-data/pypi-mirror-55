"""SConsider.site_tools.generateScript.

SConsider-specific stand alone script to execute programs

"""

# -------------------------------------------------------------------------
# Copyright (c) 2009, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------

import os
import datetime
import tempfile
import SCons.Action
import SCons.Builder
import SomeUtils


def generateShellScript(scriptFile, env, binpath):
    pwd = 'pwd -P'
    if env['PLATFORM'] == 'darwin':
        libpathvariable = 'DYLD_LIBRARY_PATH'
    else:
        libpathvariable = 'LD_LIBRARY_PATH'
    if 'mingw' in env['TOOLS']:
        pwd = 'pwd'
        libpathvariable = 'PATH'

    scriptText = """#!/bin/sh
# -------------------------------------------------------------------------
# Copyright (c) """ + datetime.date.today().strftime('%Y') + """, Peter Sommerlad and IFS Institute for Software
# at HSR Rapperswil, Switzerland
# All rights reserved.
#
# This library/application is free software; you can redistribute and/or
# modify it under the terms of the license that is included with this
# library/application in the file license.txt.
# -------------------------------------------------------------------------
# Autogenerated by SConsider; do not edit!
GDBSERVERPORT=2345

MYNAME=\"`basename \"$0\"`\"
SCRIPTPATH=\"`dirname \"$0\"`\"
SCRIPTPATH=\"`cd \"$SCRIPTPATH\" 2>/dev/null && """ + pwd + """`\"
STARTPATH=\"`""" + pwd + """`\"

LIBDIR=\"""" + env['LIBDIR'] + """\"
BINDIR=\"""" + env['BINDIR'] + """\"
SCRIPTDIR=\"""" + env['SCRIPTDIR'] + """\"
CONFIGDIR=\"""" + env['CONFIGDIR'] + """\"
VARIANTDIR=\"""" + env['VARIANTDIR'] + """\"
BASEOUTDIR=\"""" + env['BASEOUTDIR'].abspath + """\"
RELTARGETDIR=\"""" + env['RELTARGETDIR'] + """\"
BINARYNAME=\"""" + os.path.basename(binpath) + """\"

doChangeDir=1
doDebug=0
doDebugServer=0
doTrace=0

showhelp()
{
    echo ''
    echo 'usage: '$MYNAME' [options]'
    echo 'where options are:'
    echo ' -d            : run under debugger control (gdb)'
    echo ' -e            : run under debugger control in your IDE (gdbserver)'
    echo ' -S            : do not change directory before executing target, eg. Stay in current directory'
    echo ' -v            : verbose mode'
    echo .
    exit 3;
}

while getopts ":deSv-" opt
do
    case $opt in
        :)
            echo "ERROR: -$OPTARG parameter missing, exiting!";
            showhelp;
        ;;
        d)
            doDebug=1;
        ;;
        e)
            doDebugServer=1;
        ;;
        S)
            doChangeDir=0;
        ;;
        v)
            doTrace=1;
        ;;
        -)
            break;
        ;;
        \?)
            showhelp;
        ;;
    esac
done

shift `expr $OPTIND - 1`

# find base directory for a given path
# param $1 path to start from
# param $2 is the path segment to search for
# param $3 variable to store resulting base path into
searchBaseDirUp()
{
    start_dir=\"${1}\";
    searchSegment=\"${2}\";
    ret_var=${3};
    basePath=\"`cd \"$start_dir\" &&
        while [ ! -d \"${searchSegment}\" ] && [ \"\`pwd\`\" != / ]; do
            cd .. 2>/dev/null;
        done;
        """ + pwd + """
    `\";
    test -d "${basePath}" || basePath="";
    eval ${ret_var}="\\\"$basePath\\\"";
}

# find the base directory
LIBDIR_BASE="${STARTPATH}"
searchBaseDirUp "${SCRIPTPATH}" "${LIBDIR}" LIBDIR_BASE

test -n "${LIBDIR_BASE}" || ( echo "Base directory not found containing [$LIBDIR], exiting."; exit 1 )

ABS_LIBDIR="${LIBDIR_BASE}/${LIBDIR}"
test -d "${ABS_LIBDIR}/${VARIANTDIR}" && ABS_LIBDIR="${ABS_LIBDIR}/$VARIANTDIR"

""" + libpathvariable + """="${ABS_LIBDIR}":$""" + libpathvariable + """
export """ + libpathvariable + """

BINDIR_BASE="${STARTPATH}"
searchBaseDirUp "${SCRIPTPATH}" "${BINDIR}" BINDIR_BASE

test -n "${BINDIR_BASE}" || ( echo "Base directory not found containing [$BINDIR], exiting."; exit 1 )

ABS_BINDIR="${BINDIR_BASE}/${BINDIR}"
test -d "${ABS_BINDIR}/${VARIANTDIR}" && ABS_BINDIR="${ABS_BINDIR}/$VARIANTDIR"

# param $1 is the name of the generated file
# param $2 the progam to debug
# param $3 arguments to pass to the debugged progam, do not forget to quote them!
# param $4 run executable within script or not, default 1, set to 0 to execute it manually
#
generateGdbCommandFile()
{
    outputfile="${1}";
    executable="${2}";
    arguments="${3}";
    runAsServer=${4:-1};
    # <<-EOF ignore tabs, nice for formatting heredocs
cat > ${outputfile} <<-EOF
	handle SIGSTOP nostop nopass
	handle SIGLWP  nostop pass
	handle SIGTERM nostop pass
	#handle SIGINT  nostop pass
	set environment PATH=${PATH}
	set environment COAST_ROOT=${COAST_ROOT}
	set environment COAST_PATH=${COAST_PATH}
	set environment """ + libpathvariable + """=${""" + libpathvariable + """}
	#set environment LOGDIR=${LOGDIR}
	#set environment PID_FILE=${PID_FILE}
	set auto-solib-add 1
	#convert to Windows path on mingw (msys supplies it automatically to non-msys tools)
	file \"""" + ("`cmd //c echo ${executable}`" if "mingw" in env["TOOLS"] else "${executable}") + """\"
	set args "${arguments}"
EOF
    if [ $runAsServer -eq 1 ]; then
cat >> ${outputfile} <<-EOF
	run
	where
	continue
	shell rm ${outputfile}
	quit
EOF
    fi;
}

CMD="${ABS_BINDIR}/${BINARYNAME}"
test -x "${CMD}" || ( echo "binary [${CMD}] is not executable, aborting!"; exit 1 )

test ${doChangeDir} -eq 1 -a -d "${BINDIR_BASE}" && cd "${BINDIR_BASE}"

test ${doTrace} -eq 1 && ( cat <<EOF
Executing command [${CMD}]
`test -z "$@" || echo " with arguments   [$@]"`
 in directory     [`pwd`]
EOF
)

if [ ${doDebug:-0} -eq 1 ]; then
    cfg_gdbcommands=\"""" + (tempfile.gettempdir() + os.sep).replace('\\', '/') + """`basename "$0"`_$$";
    generateGdbCommandFile "${cfg_gdbcommands}" "$CMD" "$@" 0
    test ${doTrace} -eq 1 && echo "Generated gdb command file:"
    test ${doTrace} -eq 1 && cat ${cfg_gdbcommands}
    gdb --command ${cfg_gdbcommands}
elif [ ${doDebugServer:-0} -eq 1 ]; then
    gdbserver :${GDBSERVERPORT} "${CMD}"
else
    "$CMD" "$@"
fi

exit $?
"""
    scriptFile.write(scriptText)


def generatePosixScript(target, source, env):
    for t, s in zip(target, source):
        scriptFile = open(str(t), 'w')
        generateShellScript(scriptFile, env, s.get_path())
        scriptFile.close()
    return 0


def generateScriptEmitter(target, source, env):
    target = []
    for src in source:
        target.append(
            env['BASEOUTDIR'].Dir(
                env['RELTARGETDIR']).Dir(
                env['SCRIPTDIR']).Dir(
                env['VARIANTDIR']).File(
                    os.path.basename(
                        src.abspath)))
    return (target, source)


def generateWrapperScript(env, target):
    return env.Depends(
        env.GenerateScriptBuilder(target),
        SomeUtils.getPyFilename(__file__))


def generate(env):
    GenerateScriptAction = SCons.Action.Action(
        generatePosixScript,
        "Creating wrapper script for '$TARGET'")
    GenerateScriptBuilder = SCons.Builder.Builder(
        action=[
            GenerateScriptAction,
            SCons.Defaults.Chmod(
                '$TARGET',
                0o755)],
        emitter=generateScriptEmitter,
        single_source=1)

    env.Append(BUILDERS={'GenerateScriptBuilder': GenerateScriptBuilder})
    env.AddMethod(generateWrapperScript, "GenerateWrapperScript")


def exists(env):
    return 1

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cxtgeo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cxtgeo')
    _cxtgeo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cxtgeo', [dirname(__file__)])
        except ImportError:
            import _cxtgeo
            return _cxtgeo
        try:
            _mod = imp.load_module('_cxtgeo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cxtgeo = swig_import_helper()
    del swig_import_helper
else:
    import _cxtgeo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def new_intpointer():
    return _cxtgeo.new_intpointer()
new_intpointer = _cxtgeo.new_intpointer

def copy_intpointer(value):
    return _cxtgeo.copy_intpointer(value)
copy_intpointer = _cxtgeo.copy_intpointer

def delete_intpointer(obj):
    return _cxtgeo.delete_intpointer(obj)
delete_intpointer = _cxtgeo.delete_intpointer

def intpointer_assign(obj, value):
    return _cxtgeo.intpointer_assign(obj, value)
intpointer_assign = _cxtgeo.intpointer_assign

def intpointer_value(obj):
    return _cxtgeo.intpointer_value(obj)
intpointer_value = _cxtgeo.intpointer_value

def new_longpointer():
    return _cxtgeo.new_longpointer()
new_longpointer = _cxtgeo.new_longpointer

def copy_longpointer(value):
    return _cxtgeo.copy_longpointer(value)
copy_longpointer = _cxtgeo.copy_longpointer

def delete_longpointer(obj):
    return _cxtgeo.delete_longpointer(obj)
delete_longpointer = _cxtgeo.delete_longpointer

def longpointer_assign(obj, value):
    return _cxtgeo.longpointer_assign(obj, value)
longpointer_assign = _cxtgeo.longpointer_assign

def longpointer_value(obj):
    return _cxtgeo.longpointer_value(obj)
longpointer_value = _cxtgeo.longpointer_value

def new_floatpointer():
    return _cxtgeo.new_floatpointer()
new_floatpointer = _cxtgeo.new_floatpointer

def copy_floatpointer(value):
    return _cxtgeo.copy_floatpointer(value)
copy_floatpointer = _cxtgeo.copy_floatpointer

def delete_floatpointer(obj):
    return _cxtgeo.delete_floatpointer(obj)
delete_floatpointer = _cxtgeo.delete_floatpointer

def floatpointer_assign(obj, value):
    return _cxtgeo.floatpointer_assign(obj, value)
floatpointer_assign = _cxtgeo.floatpointer_assign

def floatpointer_value(obj):
    return _cxtgeo.floatpointer_value(obj)
floatpointer_value = _cxtgeo.floatpointer_value

def new_doublepointer():
    return _cxtgeo.new_doublepointer()
new_doublepointer = _cxtgeo.new_doublepointer

def copy_doublepointer(value):
    return _cxtgeo.copy_doublepointer(value)
copy_doublepointer = _cxtgeo.copy_doublepointer

def delete_doublepointer(obj):
    return _cxtgeo.delete_doublepointer(obj)
delete_doublepointer = _cxtgeo.delete_doublepointer

def doublepointer_assign(obj, value):
    return _cxtgeo.doublepointer_assign(obj, value)
doublepointer_assign = _cxtgeo.doublepointer_assign

def doublepointer_value(obj):
    return _cxtgeo.doublepointer_value(obj)
doublepointer_value = _cxtgeo.doublepointer_value

def new_charpointer():
    return _cxtgeo.new_charpointer()
new_charpointer = _cxtgeo.new_charpointer

def copy_charpointer(value):
    return _cxtgeo.copy_charpointer(value)
copy_charpointer = _cxtgeo.copy_charpointer

def delete_charpointer(obj):
    return _cxtgeo.delete_charpointer(obj)
delete_charpointer = _cxtgeo.delete_charpointer

def charpointer_assign(obj, value):
    return _cxtgeo.charpointer_assign(obj, value)
charpointer_assign = _cxtgeo.charpointer_assign

def charpointer_value(obj):
    return _cxtgeo.charpointer_value(obj)
charpointer_value = _cxtgeo.charpointer_value

def new_intarray(nelements):
    return _cxtgeo.new_intarray(nelements)
new_intarray = _cxtgeo.new_intarray

def delete_intarray(ary):
    return _cxtgeo.delete_intarray(ary)
delete_intarray = _cxtgeo.delete_intarray

def intarray_getitem(ary, index):
    return _cxtgeo.intarray_getitem(ary, index)
intarray_getitem = _cxtgeo.intarray_getitem

def intarray_setitem(ary, index, value):
    return _cxtgeo.intarray_setitem(ary, index, value)
intarray_setitem = _cxtgeo.intarray_setitem

def new_longarray(nelements):
    return _cxtgeo.new_longarray(nelements)
new_longarray = _cxtgeo.new_longarray

def delete_longarray(ary):
    return _cxtgeo.delete_longarray(ary)
delete_longarray = _cxtgeo.delete_longarray

def longarray_getitem(ary, index):
    return _cxtgeo.longarray_getitem(ary, index)
longarray_getitem = _cxtgeo.longarray_getitem

def longarray_setitem(ary, index, value):
    return _cxtgeo.longarray_setitem(ary, index, value)
longarray_setitem = _cxtgeo.longarray_setitem

def new_floatarray(nelements):
    return _cxtgeo.new_floatarray(nelements)
new_floatarray = _cxtgeo.new_floatarray

def delete_floatarray(ary):
    return _cxtgeo.delete_floatarray(ary)
delete_floatarray = _cxtgeo.delete_floatarray

def floatarray_getitem(ary, index):
    return _cxtgeo.floatarray_getitem(ary, index)
floatarray_getitem = _cxtgeo.floatarray_getitem

def floatarray_setitem(ary, index, value):
    return _cxtgeo.floatarray_setitem(ary, index, value)
floatarray_setitem = _cxtgeo.floatarray_setitem

def new_doublearray(nelements):
    return _cxtgeo.new_doublearray(nelements)
new_doublearray = _cxtgeo.new_doublearray

def delete_doublearray(ary):
    return _cxtgeo.delete_doublearray(ary)
delete_doublearray = _cxtgeo.delete_doublearray

def doublearray_getitem(ary, index):
    return _cxtgeo.doublearray_getitem(ary, index)
doublearray_getitem = _cxtgeo.doublearray_getitem

def doublearray_setitem(ary, index, value):
    return _cxtgeo.doublearray_setitem(ary, index, value)
doublearray_setitem = _cxtgeo.doublearray_setitem

def new_chararray(nelements):
    return _cxtgeo.new_chararray(nelements)
new_chararray = _cxtgeo.new_chararray

def delete_chararray(ary):
    return _cxtgeo.delete_chararray(ary)
delete_chararray = _cxtgeo.delete_chararray

def chararray_getitem(ary, index):
    return _cxtgeo.chararray_getitem(ary, index)
chararray_getitem = _cxtgeo.chararray_getitem

def chararray_setitem(ary, index, value):
    return _cxtgeo.chararray_setitem(ary, index, value)
chararray_setitem = _cxtgeo.chararray_setitem

def swig_carr_to_numpy_1d(np, carr):
    return _cxtgeo.swig_carr_to_numpy_1d(np, carr)
swig_carr_to_numpy_1d = _cxtgeo.swig_carr_to_numpy_1d

def swig_carr_to_numpy_f1d(npf, carrf):
    return _cxtgeo.swig_carr_to_numpy_f1d(npf, carrf)
swig_carr_to_numpy_f1d = _cxtgeo.swig_carr_to_numpy_f1d

def swig_carr_to_numpy_i1d(npi, carri):
    return _cxtgeo.swig_carr_to_numpy_i1d(npi, carri)
swig_carr_to_numpy_i1d = _cxtgeo.swig_carr_to_numpy_i1d

def swig_numpy_to_carr_1d(npinput, cxarr):
    return _cxtgeo.swig_numpy_to_carr_1d(npinput, cxarr)
swig_numpy_to_carr_1d = _cxtgeo.swig_numpy_to_carr_1d

def swig_numpy_to_carr_f1d(npinputf, cxarrf):
    return _cxtgeo.swig_numpy_to_carr_f1d(npinputf, cxarrf)
swig_numpy_to_carr_f1d = _cxtgeo.swig_numpy_to_carr_f1d

def swig_numpy_to_carr_i1d(npinputi, cxarri):
    return _cxtgeo.swig_numpy_to_carr_i1d(npinputi, cxarri)
swig_numpy_to_carr_i1d = _cxtgeo.swig_numpy_to_carr_i1d
_GNU_SOURCE = _cxtgeo._GNU_SOURCE
PI = _cxtgeo.PI
M_PI = _cxtgeo.M_PI
PIHALF = _cxtgeo.PIHALF
FLOATEPS = _cxtgeo.FLOATEPS
VERYLARGEFLOAT = _cxtgeo.VERYLARGEFLOAT
VERYSMALLFLOAT = _cxtgeo.VERYSMALLFLOAT
VERYLARGEPOSITIVE = _cxtgeo.VERYLARGEPOSITIVE
VERYLARGENEGATIVE = _cxtgeo.VERYLARGENEGATIVE
UNDEF = _cxtgeo.UNDEF
UNDEF_LIMIT = _cxtgeo.UNDEF_LIMIT
UNDEF_INT = _cxtgeo.UNDEF_INT
UNDEF_INT_LIMIT = _cxtgeo.UNDEF_INT_LIMIT
UNDEF_MAP = _cxtgeo.UNDEF_MAP
UNDEF_INT_MAP = _cxtgeo.UNDEF_INT_MAP
UNDEF_MAP_LIMIT = _cxtgeo.UNDEF_MAP_LIMIT
UNDEF_INT_MAP_LIMIT = _cxtgeo.UNDEF_INT_MAP_LIMIT
UNDEF_MAP_STORM = _cxtgeo.UNDEF_MAP_STORM
UNDEF_MAP_IRAP = _cxtgeo.UNDEF_MAP_IRAP
UNDEF_MAP_IRAPB = _cxtgeo.UNDEF_MAP_IRAPB
UNDEF_MAP_ZMAP = _cxtgeo.UNDEF_MAP_ZMAP
UNDEF_MAP_IRAPB_LIMIT = _cxtgeo.UNDEF_MAP_IRAPB_LIMIT
UNDEF_CUBE_RMS = _cxtgeo.UNDEF_CUBE_RMS
UNDEF_POINT = _cxtgeo.UNDEF_POINT
UNDEF_POINT_LIMIT = _cxtgeo.UNDEF_POINT_LIMIT
UNDEF_POINT_RMS = _cxtgeo.UNDEF_POINT_RMS
UNDEF_POINT_IRAP = _cxtgeo.UNDEF_POINT_IRAP
LAST_POINT = _cxtgeo.LAST_POINT
LAST_POINT_LIMIT = _cxtgeo.LAST_POINT_LIMIT
MAXPSTACK = _cxtgeo.MAXPSTACK
ROFFSTRLEN = _cxtgeo.ROFFSTRLEN
ECLNAMELEN = _cxtgeo.ECLNAMELEN
ECLTYPELEN = _cxtgeo.ECLTYPELEN
ECLINTEHEADLEN = _cxtgeo.ECLINTEHEADLEN
ECLDOUBHEADLEN = _cxtgeo.ECLDOUBHEADLEN
ECLLOGIHEADLEN = _cxtgeo.ECLLOGIHEADLEN
ECLNUMBLOCKLEN = _cxtgeo.ECLNUMBLOCKLEN
ECLCHABLOCKLEN = _cxtgeo.ECLCHABLOCKLEN
UNDEF_ROFFBYTE = _cxtgeo.UNDEF_ROFFBYTE
UNDEF_ROFFINT = _cxtgeo.UNDEF_ROFFINT
UNDEF_ROFFFLOAT = _cxtgeo.UNDEF_ROFFFLOAT
UNDEF_ECLINT = _cxtgeo.UNDEF_ECLINT
UNDEF_ECLFLOAT = _cxtgeo.UNDEF_ECLFLOAT

def xtgverbose(arg1):
    return _cxtgeo.xtgverbose(arg1)
xtgverbose = _cxtgeo.xtgverbose

def xtg_silent(value):
    return _cxtgeo.xtg_silent(value)
xtg_silent = _cxtgeo.xtg_silent

def xtg_verbose_file(filename):
    return _cxtgeo.xtg_verbose_file(filename)
xtg_verbose_file = _cxtgeo.xtg_verbose_file

def xtg_speak(arg1, arg2, arg3):
    return _cxtgeo.xtg_speak(arg1, arg2, arg3)
xtg_speak = _cxtgeo.xtg_speak

def xtg_warn(arg1, arg2, arg3):
    return _cxtgeo.xtg_warn(arg1, arg2, arg3)
xtg_warn = _cxtgeo.xtg_warn

def xtg_error(arg1, arg2):
    return _cxtgeo.xtg_error(arg1, arg2)
xtg_error = _cxtgeo.xtg_error

def xtg_shout(arg1, arg2):
    return _cxtgeo.xtg_shout(arg1, arg2)
xtg_shout = _cxtgeo.xtg_shout

def xtg_fopen(filename, mode):
    return _cxtgeo.xtg_fopen(filename, mode)
xtg_fopen = _cxtgeo.xtg_fopen

def xtg_fopen_bytestream(swig_bytes, mode):
    return _cxtgeo.xtg_fopen_bytestream(swig_bytes, mode)
xtg_fopen_bytestream = _cxtgeo.xtg_fopen_bytestream

def xtg_fclose(fhandle):
    return _cxtgeo.xtg_fclose(fhandle)
xtg_fclose = _cxtgeo.xtg_fclose

def x_interp_map_nodes(x_v, y_v, z_v, x, y, method, debug):
    return _cxtgeo.x_interp_map_nodes(x_v, y_v, z_v, x, y, method, debug)
x_interp_map_nodes = _cxtgeo.x_interp_map_nodes

def x_ijk2ib(i, j, k, nx, ny, nz, ia_start):
    return _cxtgeo.x_ijk2ib(i, j, k, nx, ny, nz, ia_start)
x_ijk2ib = _cxtgeo.x_ijk2ib

def x_ijk2ic(i, j, k, nx, ny, nz, ia_start):
    return _cxtgeo.x_ijk2ic(i, j, k, nx, ny, nz, ia_start)
x_ijk2ic = _cxtgeo.x_ijk2ic

def x_ib2ijk(ib, i, j, k, nx, ny, nz, ia_start):
    return _cxtgeo.x_ib2ijk(ib, i, j, k, nx, ny, nz, ia_start)
x_ib2ijk = _cxtgeo.x_ib2ijk

def x_ic2ijk(ic, i, j, k, nx, ny, nz, ia_start):
    return _cxtgeo.x_ic2ijk(ic, i, j, k, nx, ny, nz, ia_start)
x_ic2ijk = _cxtgeo.x_ic2ijk

def x_vector_info2(x1, x2, y1, y2, vlen, xangle_radian, xangle_degrees, option, debug):
    return _cxtgeo.x_vector_info2(x1, x2, y1, y2, vlen, xangle_radian, xangle_degrees, option, debug)
x_vector_info2 = _cxtgeo.x_vector_info2

def x_vector_linint2(x0, y0, z0, x1, y1, z1, dist, option, debug):
    return _cxtgeo.x_vector_linint2(x0, y0, z0, x1, y1, z1, dist, option, debug)
x_vector_linint2 = _cxtgeo.x_vector_linint2

def x_diff_angle(ang1, ang2, option, debug):
    return _cxtgeo.x_diff_angle(ang1, ang2, option, debug)
x_diff_angle = _cxtgeo.x_diff_angle

def x_avg_angles(angles, nsize):
    return _cxtgeo.x_avg_angles(angles, nsize)
x_avg_angles = _cxtgeo.x_avg_angles

def x_conv_int2float(n, v1, v2, debug):
    return _cxtgeo.x_conv_int2float(n, v1, v2, debug)
x_conv_int2float = _cxtgeo.x_conv_int2float

def x_conv_int2double(n, v1, v2, debug):
    return _cxtgeo.x_conv_int2double(n, v1, v2, debug)
x_conv_int2double = _cxtgeo.x_conv_int2double

def x_conv_double2float(n, v1, v2, debug):
    return _cxtgeo.x_conv_double2float(n, v1, v2, debug)
x_conv_double2float = _cxtgeo.x_conv_double2float

def x_rotation_conv(ain, aimode, mode, option, debug):
    return _cxtgeo.x_rotation_conv(ain, aimode, mode, option, debug)
x_rotation_conv = _cxtgeo.x_rotation_conv

def surf_import_irap_bin(fhandle, mode, swig_np_dbl_aout_v1, option):
    return _cxtgeo.surf_import_irap_bin(fhandle, mode, swig_np_dbl_aout_v1, option)
surf_import_irap_bin = _cxtgeo.surf_import_irap_bin

def surf_import_irap_ascii(fc, mode, swig_np_dbl_aout_v1, option):
    return _cxtgeo.surf_import_irap_ascii(fc, mode, swig_np_dbl_aout_v1, option)
surf_import_irap_ascii = _cxtgeo.surf_import_irap_ascii

def surf_import_ijxyz(fc, mode, swig_np_int_aout_v1, swig_np_int_aout_v2, swig_np_dbl_aout_v1, option):
    return _cxtgeo.surf_import_ijxyz(fc, mode, swig_np_int_aout_v1, swig_np_int_aout_v2, swig_np_dbl_aout_v1, option)
surf_import_ijxyz = _cxtgeo.surf_import_ijxyz

def surf_import_ijxyz_tmpl(fc, swig_np_int_in_v1, swig_np_int_in_v2, swig_np_dbl_aout_v1, option):
    return _cxtgeo.surf_import_ijxyz_tmpl(fc, swig_np_int_in_v1, swig_np_int_in_v2, swig_np_dbl_aout_v1, option)
surf_import_ijxyz_tmpl = _cxtgeo.surf_import_ijxyz_tmpl

def surf_export_irap_bin(fc, mx, my, xori, yori, xinc, yinc, rot, swig_np_dbl_in_v1, option):
    return _cxtgeo.surf_export_irap_bin(fc, mx, my, xori, yori, xinc, yinc, rot, swig_np_dbl_in_v1, option)
surf_export_irap_bin = _cxtgeo.surf_export_irap_bin

def surf_export_irap_ascii(fc, mx, my, xori, yori, xinc, yinc, rot, swig_np_dbl_in_v1, zmin, zmax, option):
    return _cxtgeo.surf_export_irap_ascii(fc, mx, my, xori, yori, xinc, yinc, rot, swig_np_dbl_in_v1, zmin, zmax, option)
surf_export_irap_ascii = _cxtgeo.surf_export_irap_ascii

def surf_export_zmap_ascii(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option):
    return _cxtgeo.surf_export_zmap_ascii(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option)
surf_export_zmap_ascii = _cxtgeo.surf_export_zmap_ascii

def surf_export_storm_bin(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option):
    return _cxtgeo.surf_export_storm_bin(fc, mx, my, xori, yori, xinc, yinc, swig_np_dbl_in_v1, zmin, zmax, option)
surf_export_storm_bin = _cxtgeo.surf_export_storm_bin

def surf_export_ijxyz(fc, mx, my, xori, yori, xinc, yinc, rot, yflip, swig_np_int_in_v1, swig_np_int_in_v2, swig_np_dbl_in_v1, option):
    return _cxtgeo.surf_export_ijxyz(fc, mx, my, xori, yori, xinc, yinc, rot, yflip, swig_np_int_in_v1, swig_np_int_in_v2, swig_np_dbl_in_v1, option)
surf_export_ijxyz = _cxtgeo.surf_export_ijxyz

def surf_swapaxes(nx, ny, yflip, xori, xinc, yori, yinc, rotation, swig_np_dbl_inplace_v1, option, debug):
    return _cxtgeo.surf_swapaxes(nx, ny, yflip, xori, xinc, yori, yinc, rotation, swig_np_dbl_inplace_v1, option, debug)
surf_swapaxes = _cxtgeo.surf_swapaxes

def surf_zminmax(nx, ny, p_map_v, zmin, zmax, debug):
    return _cxtgeo.surf_zminmax(nx, ny, p_map_v, zmin, zmax, debug)
surf_zminmax = _cxtgeo.surf_zminmax

def surf_xyz_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, swig_np_dbl_in_v1, flag):
    return _cxtgeo.surf_xyz_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, swig_np_dbl_in_v1, flag)
surf_xyz_from_ij = _cxtgeo.surf_xyz_from_ij

def surf_xyori_from_ij(i, j, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, flag, debug):
    return _cxtgeo.surf_xyori_from_ij(i, j, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_deg, flag, debug)
surf_xyori_from_ij = _cxtgeo.surf_xyori_from_ij

def surf_get_z_from_ij(ic, jc, x, y, nx, ny, xinc, yinc, xori, yori, p_map_v):
    return _cxtgeo.surf_get_z_from_ij(ic, jc, x, y, nx, ny, xinc, yinc, xori, yori, p_map_v)
surf_get_z_from_ij = _cxtgeo.surf_get_z_from_ij

def surf_get_z_from_xy(x, y, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v1):
    return _cxtgeo.surf_get_z_from_xy(x, y, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v1)
surf_get_z_from_xy = _cxtgeo.surf_get_z_from_xy

def surf_get_zv_from_xyv(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v3):
    return _cxtgeo.surf_get_zv_from_xyv(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, nx, ny, xori, yori, xinc, yinc, yflip, rot_deg, swig_np_dbl_in_v3)
surf_get_zv_from_xyv = _cxtgeo.surf_get_zv_from_xyv

def surf_xy_as_values(xori, xinc, yori, yinc, nx, ny, rot_deg, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, flag, debug):
    return _cxtgeo.surf_xy_as_values(xori, xinc, yori, yinc, nx, ny, rot_deg, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, flag, debug)
surf_xy_as_values = _cxtgeo.surf_xy_as_values

def surf_slice_grd3d(mcol, mrow, xori, xinc, yori, yinc, rotation, yflip, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, p_prop_v, buffer, option, debug):
    return _cxtgeo.surf_slice_grd3d(mcol, mrow, xori, xinc, yori, yinc, rotation, yflip, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, p_prop_v, buffer, option, debug)
surf_slice_grd3d = _cxtgeo.surf_slice_grd3d

def surf_resample(nx1, ny1, xori1, xinc1, yori1, yinc1, yflip1, rota1, swig_np_dbl_in_v1, nx2, ny2, xori2, xinc2, yori2, yinc2, yflip2, rota2, swig_np_dbl_inplace_v1, option):
    return _cxtgeo.surf_resample(nx1, ny1, xori1, xinc1, yori1, yinc1, yflip1, rota1, swig_np_dbl_in_v1, nx2, ny2, xori2, xinc2, yori2, yinc2, yflip2, rota2, swig_np_dbl_inplace_v1, option)
surf_resample = _cxtgeo.surf_resample

def surf_get_dist_values(xori, xinc, yori, yinc, nx, ny, rot_deg, x0, y0, azimuth, swig_np_dbl_inplace_v1, flag):
    return _cxtgeo.surf_get_dist_values(xori, xinc, yori, yinc, nx, ny, rot_deg, x0, y0, azimuth, swig_np_dbl_inplace_v1, flag)
surf_get_dist_values = _cxtgeo.surf_get_dist_values

def surf_slice_cube(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, option1, option2, debug):
    return _cxtgeo.surf_slice_cube(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, swig_np_dbl_aout_v1, option1, option2, debug)
surf_slice_cube = _cxtgeo.surf_slice_cube

def surf_slice_cube_window(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, zincr, nzincr, swig_np_dbl_aout_v1, nattr, option1, option2, debug):
    return _cxtgeo.surf_slice_cube_window(ncx, ncy, ncz, cxori, cxinc, cyori, cyinc, czori, czinc, crotation, yflip, swig_np_flt_in_v1, mx, my, xori, xinc, yori, yinc, mapflip, mrotation, swig_np_dbl_in_v1, zincr, nzincr, swig_np_dbl_aout_v1, nattr, option1, option2, debug)
surf_slice_cube_window = _cxtgeo.surf_slice_cube_window

def surf_sample_grd3d_lay(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, klayer, mx, my, xori, xstep, yori, ystep, rotation, swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, option):
    return _cxtgeo.surf_sample_grd3d_lay(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, klayer, mx, my, xori, xstep, yori, ystep, rotation, swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, option)
surf_sample_grd3d_lay = _cxtgeo.surf_sample_grd3d_lay

def surf_setval_poly(xori, xinc, yori, yinc, ncol, nrow, yflip, rot_deg, swig_np_dbl_inplace_v1, swig_np_dbl_in_v1, swig_np_dbl_in_v2, value, flag, debug):
    return _cxtgeo.surf_setval_poly(xori, xinc, yori, yinc, ncol, nrow, yflip, rot_deg, swig_np_dbl_inplace_v1, swig_np_dbl_in_v1, swig_np_dbl_in_v2, value, flag, debug)
surf_setval_poly = _cxtgeo.surf_setval_poly

def pol_import_irap(i1, i2, p_xp_v, p_yp_v, p_zp_v, file, debug):
    return _cxtgeo.pol_import_irap(i1, i2, p_xp_v, p_yp_v, p_zp_v, file, debug)
pol_import_irap = _cxtgeo.pol_import_irap

def pol_chk_point_inside(x, y, p_xp_v, p_yp_v, np, debug):
    return _cxtgeo.pol_chk_point_inside(x, y, p_xp_v, p_yp_v, np, debug)
pol_chk_point_inside = _cxtgeo.pol_chk_point_inside

def pol_do_points_inside(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, swig_np_dbl_in_v3, swig_np_dbl_in_v4, new_value, option, inside, debug):
    return _cxtgeo.pol_do_points_inside(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_inplace_v1, swig_np_dbl_in_v3, swig_np_dbl_in_v4, new_value, option, inside, debug)
pol_do_points_inside = _cxtgeo.pol_do_points_inside

def polys_chk_point_inside(x, y, p_xp_v, p_yp_v, np1, np2, debug):
    return _cxtgeo.polys_chk_point_inside(x, y, p_xp_v, p_yp_v, np1, np2, debug)
polys_chk_point_inside = _cxtgeo.polys_chk_point_inside

def pol_close(np, p_x_v, p_y_v, p_z_v, dist, option, debug):
    return _cxtgeo.pol_close(np, p_x_v, p_y_v, p_z_v, dist, option, debug)
pol_close = _cxtgeo.pol_close

def pol_set_entry(i, x, y, z, npmax, p_x_v, p_y_v, p_z_v, option, debug):
    return _cxtgeo.pol_set_entry(i, x, y, z, npmax, p_x_v, p_y_v, p_z_v, option, debug)
pol_set_entry = _cxtgeo.pol_set_entry

def pol_geometrics(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, debug):
    return _cxtgeo.pol_geometrics(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, debug)
pol_geometrics = _cxtgeo.pol_geometrics

def pol_info(nlen, xv, yv, zv, xmin, xmax, ymin, ymax, closed, debug):
    return _cxtgeo.pol_info(nlen, xv, yv, zv, xmin, xmax, ymin, ymax, closed, debug)
pol_info = _cxtgeo.pol_info

def pol_refine(np, npmax, p_x_v, p_y_v, p_z_v, dist, option, debug):
    return _cxtgeo.pol_refine(np, npmax, p_x_v, p_y_v, p_z_v, dist, option, debug)
pol_refine = _cxtgeo.pol_refine

def pol_extend(np, p_x_v, p_y_v, p_z_v, dist, mode, xang, option, debug):
    return _cxtgeo.pol_extend(np, p_x_v, p_y_v, p_z_v, dist, mode, xang, option, debug)
pol_extend = _cxtgeo.pol_extend

def pol_resample(nlen, xv, yv, zv, smpl, next, nbuf, nolen, xov, yov, zov, hlen, option, debug):
    return _cxtgeo.pol_resample(nlen, xv, yv, zv, smpl, next, nbuf, nolen, xov, yov, zov, hlen, option, debug)
pol_resample = _cxtgeo.pol_resample

def pol_resampling(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, smpl, hext, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, option, debug):
    return _cxtgeo.pol_resampling(swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, smpl, hext, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, swig_np_dbl_aout_v4, option, debug)
pol_resampling = _cxtgeo.pol_resampling

def sucu_ij_from_xy(i, j, rx, ry, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag):
    return _cxtgeo.sucu_ij_from_xy(i, j, rx, ry, x, y, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag)
sucu_ij_from_xy = _cxtgeo.sucu_ij_from_xy

def cube_scan_segy_hdr(file, gn_bitsheader, gn_formatcode, gf_segyformat, gn_samplespertrace, gn_measuresystem, option, outfile):
    return _cxtgeo.cube_scan_segy_hdr(file, gn_bitsheader, gn_formatcode, gf_segyformat, gn_samplespertrace, gn_measuresystem, option, outfile)
cube_scan_segy_hdr = _cxtgeo.cube_scan_segy_hdr

def cube_import_storm(nx, ny, nz, file, lstart, swig_np_flt_aout_v1, option):
    return _cxtgeo.cube_import_storm(nx, ny, nz, file, lstart, swig_np_flt_aout_v1, option)
cube_import_storm = _cxtgeo.cube_import_storm

def cube_import_segy(file, hbitoffset, formatcode, segyformat, samplespertrace, nx, ny, nz, p_val_v, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, minval, maxval, optscan, option, outfile):
    return _cxtgeo.cube_import_segy(file, hbitoffset, formatcode, segyformat, samplespertrace, nx, ny, nz, p_val_v, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, minval, maxval, optscan, option, outfile)
cube_import_segy = _cxtgeo.cube_import_segy

def cube_import_rmsregular(iline, ndef, ndefsum, nx, ny, nz, val_v, vmin, vmax, file, ierr):
    return _cxtgeo.cube_import_rmsregular(iline, ndef, ndefsum, nx, ny, nz, val_v, vmin, vmax, file, ierr)
cube_import_rmsregular = _cxtgeo.cube_import_rmsregular

def cube_export_segy(sfile, nx, ny, nz, swig_np_flt_in_v1, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, ilinesp, xlinesp, tracidp, option):
    return _cxtgeo.cube_export_segy(sfile, nx, ny, nz, swig_np_flt_in_v1, xori, xinc, yori, yinc, zori, zinc, rotation, yflip, zflip, ilinesp, xlinesp, tracidp, option)
cube_export_segy = _cxtgeo.cube_export_segy

def cube_export_rmsregular(nx, ny, nz, xmin, ymin, zmin, xinc, yinc, zinc, rotation, yflip, swig_np_flt_in_v1, file):
    return _cxtgeo.cube_export_rmsregular(nx, ny, nz, xmin, ymin, zmin, xinc, yinc, zinc, rotation, yflip, swig_np_flt_in_v1, file)
cube_export_rmsregular = _cxtgeo.cube_export_rmsregular

def cube_swapaxes(nx, ny, nz, yflip, xori, xinc, yori, yinc, rotation, swig_np_flt_inplace_v1, swig_np_int_inplace_v1, option):
    return _cxtgeo.cube_swapaxes(nx, ny, nz, yflip, xori, xinc, yori, yinc, rotation, swig_np_flt_inplace_v1, swig_np_int_inplace_v1, option)
cube_swapaxes = _cxtgeo.cube_swapaxes

def cube_coord_val_ijk(i, j, k, nx, ny, nz, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, p_val_v, x, y, z, value, option):
    return _cxtgeo.cube_coord_val_ijk(i, j, k, nx, ny, nz, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, p_val_v, x, y, z, value, option)
cube_coord_val_ijk = _cxtgeo.cube_coord_val_ijk

def cube_xy_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag):
    return _cxtgeo.cube_xy_from_ij(i, j, xori, xinc, yori, yinc, nx, ny, yflip, rot_azi_deg, flag)
cube_xy_from_ij = _cxtgeo.cube_xy_from_ij

def cube_ijk_from_xyz(i, j, k, rx, ry, rz, x, y, z, xori, xinc, yori, yinc, zori, zinc, nx, ny, nz, rot_deg, yflip, flag):
    return _cxtgeo.cube_ijk_from_xyz(i, j, k, rx, ry, rz, x, y, z, xori, xinc, yori, yinc, zori, zinc, nx, ny, nz, rot_deg, yflip, flag)
cube_ijk_from_xyz = _cxtgeo.cube_ijk_from_xyz

def cube_value_ijk(i, j, k, nx, ny, nz, p_val_v, value):
    return _cxtgeo.cube_value_ijk(i, j, k, nx, ny, nz, p_val_v, value)
cube_value_ijk = _cxtgeo.cube_value_ijk

def cube_value_xyz_cell(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option):
    return _cxtgeo.cube_value_xyz_cell(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option)
cube_value_xyz_cell = _cxtgeo.cube_value_xyz_cell

def cube_value_xyz_interp(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option):
    return _cxtgeo.cube_value_xyz_interp(x, y, z, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, p_val_v, value, option)
cube_value_xyz_interp = _cxtgeo.cube_value_xyz_interp

def cube_vertical_val_list(i, j, nx, ny, nz, p_val_v, p_vertical_v):
    return _cxtgeo.cube_vertical_val_list(i, j, nx, ny, nz, p_val_v, p_vertical_v)
cube_vertical_val_list = _cxtgeo.cube_vertical_val_list

def cube_resample_cube(ncx1, ncy1, ncz1, cxori1, cxinc1, cyori1, cyinc1, czori1, czinc1, crotation1, yflip1, swig_np_flt_inplace_v1, ncx2, ncy2, ncz2, cxori2, cxinc2, cyori2, cyinc2, czori2, czinc2, crotation2, yflip2, swig_np_flt_in_v1, option1, option2, ovalue):
    return _cxtgeo.cube_resample_cube(ncx1, ncy1, ncz1, cxori1, cxinc1, cyori1, cyinc1, czori1, czinc1, crotation1, yflip1, swig_np_flt_inplace_v1, ncx2, ncy2, ncz2, cxori2, cxinc2, cyori2, cyinc2, czori2, czinc2, crotation2, yflip2, swig_np_flt_in_v1, option1, option2, ovalue)
cube_resample_cube = _cxtgeo.cube_resample_cube

def cube_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, swig_np_flt_in_v1, swig_np_dbl_aout_v1, option):
    return _cxtgeo.cube_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, xori, xinc, yori, yinc, zori, zinc, rot_deg, yflip, nx, ny, nz, swig_np_flt_in_v1, swig_np_dbl_aout_v1, option)
cube_get_randomline = _cxtgeo.cube_get_randomline

def grd3d_from_cube(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, xori, yori, zori, xinc, yinc, zinc, rotation, yflip, option, debug):
    return _cxtgeo.grd3d_from_cube(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, xori, yori, zori, xinc, yinc, zinc, rotation, yflip, option, debug)
grd3d_from_cube = _cxtgeo.grd3d_from_cube

def grd3d_calc_dxdy(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, dx, dy, option1, option2, debug):
    return _cxtgeo.grd3d_calc_dxdy(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, dx, dy, option1, option2, debug)
grd3d_calc_dxdy = _cxtgeo.grd3d_calc_dxdy

def grd3d_calc_dz(nx, ny, nz, p_zcorn_v, p_actnum_v, p_dz_v, flip, option, debug):
    return _cxtgeo.grd3d_calc_dz(nx, ny, nz, p_zcorn_v, p_actnum_v, p_dz_v, flip, option, debug)
grd3d_calc_dz = _cxtgeo.grd3d_calc_dz

def grd3d_calc_xyz(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_x_v, p_y_v, p_z_v, option, debug):
    return _cxtgeo.grd3d_calc_xyz(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_x_v, p_y_v, p_z_v, option, debug)
grd3d_calc_xyz = _cxtgeo.grd3d_calc_xyz

def grd3d_scan_roffbinary(fc, rectypes, reclengths, recstarts, maxkw, debug):
    return _cxtgeo.grd3d_scan_roffbinary(fc, rectypes, reclengths, recstarts, maxkw, debug)
grd3d_scan_roffbinary = _cxtgeo.grd3d_scan_roffbinary

def grd3d_conv_roxapi_grid(nx, ny, nz, nxyz, cact, crds, p_coord_v, p_zcorn_v, p_actnum_v, debug):
    return _cxtgeo.grd3d_conv_roxapi_grid(nx, ny, nz, nxyz, cact, crds, p_coord_v, p_zcorn_v, p_actnum_v, debug)
grd3d_conv_roxapi_grid = _cxtgeo.grd3d_conv_roxapi_grid

def grd3d_imp_roffbin_arr(fc, swap, nx, ny, nz, bytepos, dtype, swig_np_flt_inplace_v1, swig_np_int_inplace_v1, debug):
    return _cxtgeo.grd3d_imp_roffbin_arr(fc, swap, nx, ny, nz, bytepos, dtype, swig_np_flt_inplace_v1, swig_np_int_inplace_v1, debug)
grd3d_imp_roffbin_arr = _cxtgeo.grd3d_imp_roffbin_arr

def grd3d_imp_roffbin_ilist(fc, swap, bytepos, swig_np_int_inplace_v1, debug):
    return _cxtgeo.grd3d_imp_roffbin_ilist(fc, swap, bytepos, swig_np_int_inplace_v1, debug)
grd3d_imp_roffbin_ilist = _cxtgeo.grd3d_imp_roffbin_ilist

def grd3d_imp_roffbin_fvec(fc, swp, bpos, fvc, nv):
    return _cxtgeo.grd3d_imp_roffbin_fvec(fc, swp, bpos, fvc, nv)
grd3d_imp_roffbin_fvec = _cxtgeo.grd3d_imp_roffbin_fvec

def grd3d_imp_roffbin_ivec(fc, swp, bpos, ivc, nv):
    return _cxtgeo.grd3d_imp_roffbin_ivec(fc, swp, bpos, ivc, nv)
grd3d_imp_roffbin_ivec = _cxtgeo.grd3d_imp_roffbin_ivec

def grd3d_imp_roffbin_bvec(fc, swp, bpos, bvc, nv):
    return _cxtgeo.grd3d_imp_roffbin_bvec(fc, swp, bpos, bvc, nv)
grd3d_imp_roffbin_bvec = _cxtgeo.grd3d_imp_roffbin_bvec

def grd3d_imp_roffbin_data(fc, swap, dtype, bytepos, pidata, pfdata, debug):
    return _cxtgeo.grd3d_imp_roffbin_data(fc, swap, dtype, bytepos, pidata, pfdata, debug)
grd3d_imp_roffbin_data = _cxtgeo.grd3d_imp_roffbin_data

def grd3d_import_roff_grid(num_act, num_subgrds, p_coord_v, p_zcorn_v, p_actnum_v, p_subgrd_v, nnsub, filename, debug):
    return _cxtgeo.grd3d_import_roff_grid(num_act, num_subgrds, p_coord_v, p_zcorn_v, p_actnum_v, p_subgrd_v, nnsub, filename, debug)
grd3d_import_roff_grid = _cxtgeo.grd3d_import_roff_grid

def grd3d_imp_prop_roffbin(filename, scanmode, p_type, p_nx, p_ny, p_nz, p_ncodes, prop_name, p_int_v, p_double_v, p_codevalues_v, option, debug):
    return _cxtgeo.grd3d_imp_prop_roffbin(filename, scanmode, p_type, p_nx, p_ny, p_nz, p_ncodes, prop_name, p_int_v, p_double_v, p_codevalues_v, option, debug)
grd3d_imp_prop_roffbin = _cxtgeo.grd3d_imp_prop_roffbin

def grd3d_export_roff_grid(mode, nx, ny, nz, num_subgrds, isubgrd_to_export, xoffset, yoffset, zoffset, p_coord_v, p_zcorn_v, p_actnum_v, p_subgrd_v, filename, debug):
    return _cxtgeo.grd3d_export_roff_grid(mode, nx, ny, nz, num_subgrds, isubgrd_to_export, xoffset, yoffset, zoffset, p_coord_v, p_zcorn_v, p_actnum_v, p_subgrd_v, filename, debug)
grd3d_export_roff_grid = _cxtgeo.grd3d_export_roff_grid

def grd3d_export_roff_end(mode, filename, debug):
    return _cxtgeo.grd3d_export_roff_end(mode, filename, debug)
grd3d_export_roff_end = _cxtgeo.grd3d_export_roff_end

def grd3d_scan_roff_bingrid(nx, ny, nz, nsubs, filename):
    return _cxtgeo.grd3d_scan_roff_bingrid(nx, ny, nz, nsubs, filename)
grd3d_scan_roff_bingrid = _cxtgeo.grd3d_scan_roff_bingrid

def grd3d_scan_roff_binpar(parname, filename, ndcodes, debug):
    return _cxtgeo.grd3d_scan_roff_binpar(parname, filename, ndcodes, debug)
grd3d_scan_roff_binpar = _cxtgeo.grd3d_scan_roff_binpar

def grd3d_export_roff_pstart(mode, nx, ny, nz, filename, debug):
    return _cxtgeo.grd3d_export_roff_pstart(mode, nx, ny, nz, filename, debug)
grd3d_export_roff_pstart = _cxtgeo.grd3d_export_roff_pstart

def grd3d_export_roff_prop(mode, nx, ny, nz, num_subgrds, isubgrd_to_export, p_subgrd_v, pname, ptype, p_int_v, p_double_v, ncodes, codenames, codevalues, filename, debug):
    return _cxtgeo.grd3d_export_roff_prop(mode, nx, ny, nz, num_subgrds, isubgrd_to_export, p_subgrd_v, pname, ptype, p_int_v, p_double_v, ncodes, codenames, codevalues, filename, debug)
grd3d_export_roff_prop = _cxtgeo.grd3d_export_roff_prop

def grd3d_scan_eclbinary(fc, rectype, reclengths, recstarts, maxkw, debug):
    return _cxtgeo.grd3d_scan_eclbinary(fc, rectype, reclengths, recstarts, maxkw, debug)
grd3d_scan_eclbinary = _cxtgeo.grd3d_scan_eclbinary

def grd3d_read_eclrecord(fc, recstart, rectype, swig_np_int_inplace_v1, swig_np_flt_inplace_v1, swig_np_dbl_inplace_v1):
    return _cxtgeo.grd3d_read_eclrecord(fc, recstart, rectype, swig_np_int_inplace_v1, swig_np_flt_inplace_v1, swig_np_dbl_inplace_v1)
grd3d_read_eclrecord = _cxtgeo.grd3d_read_eclrecord

def grd3d_roff2xtgeo_coord(nx, ny, nz, xoffset, yoffset, zoffset, xscale, yscale, zscale, p_cornerlines_v, p_coord_v):
    return _cxtgeo.grd3d_roff2xtgeo_coord(nx, ny, nz, xoffset, yoffset, zoffset, xscale, yscale, zscale, p_cornerlines_v, p_coord_v)
grd3d_roff2xtgeo_coord = _cxtgeo.grd3d_roff2xtgeo_coord

def grd3d_roff2xtgeo_zcorn(nx, ny, nz, xoffset, yoffset, zoffset, xscale, yscale, zscale, p_splitenz_v, p_zdata_v, p_zcorn_v):
    return _cxtgeo.grd3d_roff2xtgeo_zcorn(nx, ny, nz, xoffset, yoffset, zoffset, xscale, yscale, zscale, p_splitenz_v, p_zdata_v, p_zcorn_v)
grd3d_roff2xtgeo_zcorn = _cxtgeo.grd3d_roff2xtgeo_zcorn

def grd3d_roff2xtgeo_actnum(nx, ny, nz, iact, p_actnum_v, option):
    return _cxtgeo.grd3d_roff2xtgeo_actnum(nx, ny, nz, iact, p_actnum_v, option)
grd3d_roff2xtgeo_actnum = _cxtgeo.grd3d_roff2xtgeo_actnum

def grd3d_write_eclrecord(fc, recname, rectype, intv, floatv, doublev, nrecs, debug):
    return _cxtgeo.grd3d_write_eclrecord(fc, recname, rectype, intv, floatv, doublev, nrecs, debug)
grd3d_write_eclrecord = _cxtgeo.grd3d_write_eclrecord

def grd3d_write_eclinput(fc, recname, rectype, intv, floatv, doublev, nrecs, fmt, ncolumns, debug):
    return _cxtgeo.grd3d_write_eclinput(fc, recname, rectype, intv, floatv, doublev, nrecs, fmt, ncolumns, debug)
grd3d_write_eclinput = _cxtgeo.grd3d_write_eclinput

def grd3d_zcorn_convert(nx, ny, nz, zcorn, p_zcorn_v, option):
    return _cxtgeo.grd3d_zcorn_convert(nx, ny, nz, zcorn, p_zcorn_v, option)
grd3d_zcorn_convert = _cxtgeo.grd3d_zcorn_convert

def grd3d_ecl_tsteps(fc, seqnums, day, mon, year, nmax, debug):
    return _cxtgeo.grd3d_ecl_tsteps(fc, seqnums, day, mon, year, nmax, debug)
grd3d_ecl_tsteps = _cxtgeo.grd3d_ecl_tsteps

def grd3d_imp_ecl_egrid(fc, nx, ny, nz, bpos_mapaxes, bpos_coord, bpos_zcorn, bpos_actnum, p_coord_v, p_zcorn_v, actnum_v, nact, option):
    return _cxtgeo.grd3d_imp_ecl_egrid(fc, nx, ny, nz, bpos_mapaxes, bpos_coord, bpos_zcorn, bpos_actnum, p_coord_v, p_zcorn_v, actnum_v, nact, option)
grd3d_imp_ecl_egrid = _cxtgeo.grd3d_imp_ecl_egrid

def grd3d_import_grdecl(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nact, filename, debug):
    return _cxtgeo.grd3d_import_grdecl(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nact, filename, debug)
grd3d_import_grdecl = _cxtgeo.grd3d_import_grdecl

def grd3d_import_grdecl_prop(filename, nx, ny, nz, pname, swig_np_dbl_aout_v1, option, debug):
    return _cxtgeo.grd3d_import_grdecl_prop(filename, nx, ny, nz, pname, swig_np_dbl_aout_v1, option, debug)
grd3d_import_grdecl_prop = _cxtgeo.grd3d_import_grdecl_prop

def grd3d_export_grdecl(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, filename, mode, debug):
    return _cxtgeo.grd3d_export_grdecl(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, filename, mode, debug)
grd3d_export_grdecl = _cxtgeo.grd3d_export_grdecl

def grd3d_export_egrid(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, filename, mode, debug):
    return _cxtgeo.grd3d_export_egrid(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, filename, mode, debug)
grd3d_export_egrid = _cxtgeo.grd3d_export_egrid

def grd3d_export_grdeclprop(nx, ny, nz, formatspec, propname, p_fprop_v, filename, filemode, debug):
    return _cxtgeo.grd3d_export_grdeclprop(nx, ny, nz, formatspec, propname, p_fprop_v, filename, filemode, debug)
grd3d_export_grdeclprop = _cxtgeo.grd3d_export_grdeclprop

def grd3d_export_grdeclprop2(nx, ny, nz, ptype, p_iprop_v, p_fprop_v, p_dprop_v, pname, filename, mode, flag, debug):
    return _cxtgeo.grd3d_export_grdeclprop2(nx, ny, nz, ptype, p_iprop_v, p_fprop_v, p_dprop_v, pname, filename, mode, flag, debug)
grd3d_export_grdeclprop2 = _cxtgeo.grd3d_export_grdeclprop2

def grd3d_conv_grid_roxapi(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, debug):
    return _cxtgeo.grd3d_conv_grid_roxapi(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, swig_np_dbl_aout_v1, swig_np_dbl_aout_v2, swig_np_dbl_aout_v3, debug)
grd3d_conv_grid_roxapi = _cxtgeo.grd3d_conv_grid_roxapi

def grd3d_copy(ncol, nrow, nlay, p_coord1_v, p_zcorn1_v, p_actnum1_v, p_coord2_v, p_zcorn2_v, p_actnum2_v, iflag, debug):
    return _cxtgeo.grd3d_copy(ncol, nrow, nlay, p_coord1_v, p_zcorn1_v, p_actnum1_v, p_coord2_v, p_zcorn2_v, p_actnum2_v, iflag, debug)
grd3d_copy = _cxtgeo.grd3d_copy

def grd3d_crop_geometry(nx, ny, nz, p_coord1_v, p_zcorn1_v, p_actnum1_v, p_coord2_v, p_zcorn2_v, p_actnum2_v, ic1, ic2, jc1, jc2, kc1, kc2, nactive, iflag, debug):
    return _cxtgeo.grd3d_crop_geometry(nx, ny, nz, p_coord1_v, p_zcorn1_v, p_actnum1_v, p_coord2_v, p_zcorn2_v, p_actnum2_v, ic1, ic2, jc1, jc2, kc1, kc2, nactive, iflag, debug)
grd3d_crop_geometry = _cxtgeo.grd3d_crop_geometry

def grd3d_reduce_onelayer(nx, ny, nz, p_zcorn1_v, p_zcorn2_v, p_actnum1_v, p_actnum2_v, nactive, iflag, debug):
    return _cxtgeo.grd3d_reduce_onelayer(nx, ny, nz, p_zcorn1_v, p_zcorn2_v, p_actnum1_v, p_actnum2_v, nactive, iflag, debug)
grd3d_reduce_onelayer = _cxtgeo.grd3d_reduce_onelayer

def grd3d_refine_vert(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzref, p_zcornhyb_v, p_actnumhyb_v, p_num_act, rfac, option, debug):
    return _cxtgeo.grd3d_refine_vert(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzref, p_zcornhyb_v, p_actnumhyb_v, p_num_act, rfac, option, debug)
grd3d_refine_vert = _cxtgeo.grd3d_refine_vert

def grd3d_convert_hybrid(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzhyb, p_zcornhyb_v, p_actnumhyb_v, p_num_act, toplevel, botlevel, ndiv, debug):
    return _cxtgeo.grd3d_convert_hybrid(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzhyb, p_zcornhyb_v, p_actnumhyb_v, p_num_act, toplevel, botlevel, ndiv, debug)
grd3d_convert_hybrid = _cxtgeo.grd3d_convert_hybrid

def grd3d_convert_hybrid2(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzhyb, p_zcornhyb_v, p_actnumhyb_v, p_num_act, toplevel, botlevel, ndiv, p_region_v, region, debug):
    return _cxtgeo.grd3d_convert_hybrid2(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, nzhyb, p_zcornhyb_v, p_actnumhyb_v, p_num_act, toplevel, botlevel, ndiv, p_region_v, region, debug)
grd3d_convert_hybrid2 = _cxtgeo.grd3d_convert_hybrid2

def grd3d_make_z_consistent(nx, ny, nz, p_zcorn_v, p_actnum_v, zsep, debug):
    return _cxtgeo.grd3d_make_z_consistent(nx, ny, nz, p_zcorn_v, p_actnum_v, zsep, debug)
grd3d_make_z_consistent = _cxtgeo.grd3d_make_z_consistent

def grd3d_translate(nx, ny, nz, xflip, yflip, zflip, xshift, yshift, zshift, p_coord_v, p_zcorn_v, debug):
    return _cxtgeo.grd3d_translate(nx, ny, nz, xflip, yflip, zflip, xshift, yshift, zshift, p_coord_v, p_zcorn_v, debug)
grd3d_translate = _cxtgeo.grd3d_translate

def grd3d_point_val_crange(x, y, z, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, p_val_v, value, imin, imax, jmin, jmax, kmin, kmax, ibs, option, debug):
    return _cxtgeo.grd3d_point_val_crange(x, y, z, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, p_val_v, value, imin, imax, jmin, jmax, kmin, kmax, ibs, option, debug)
grd3d_point_val_crange = _cxtgeo.grd3d_point_val_crange

def grd3d_point_in_cell(ibstart, kzonly, x, y, z, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, maxrad, sflag, nradsearch, option, debug):
    return _cxtgeo.grd3d_point_in_cell(ibstart, kzonly, x, y, z, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, maxrad, sflag, nradsearch, option, debug)
grd3d_point_in_cell = _cxtgeo.grd3d_point_in_cell

def grd3d_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, mcol, mrow, xori, yori, xinc, yinc, rotation, yflip, maptopi, maptopj, mapbasi, mapbasj, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, p_val_v, p_zcornone_v, p_actnumone_v, swig_np_dbl_aout_v1, option, debug):
    return _cxtgeo.grd3d_get_randomline(swig_np_dbl_in_v1, swig_np_dbl_in_v2, zmin, zmax, nzsam, mcol, mrow, xori, yori, xinc, yinc, rotation, yflip, maptopi, maptopj, mapbasi, mapbasj, nx, ny, nz, p_coor_v, p_zcorn_v, p_actnum_v, p_val_v, p_zcornone_v, p_actnumone_v, swig_np_dbl_aout_v1, option, debug)
grd3d_get_randomline = _cxtgeo.grd3d_get_randomline

def grd3d_collapse_inact(nx, ny, nz, p_zcorn_v, p_actnum_v, debug):
    return _cxtgeo.grd3d_collapse_inact(nx, ny, nz, p_zcorn_v, p_actnum_v, debug)
grd3d_collapse_inact = _cxtgeo.grd3d_collapse_inact

def grd3d_midpoint(i, j, k, nx, ny, nz, p_coord_v, p_zcorn_v, x, y, z, debug):
    return _cxtgeo.grd3d_midpoint(i, j, k, nx, ny, nz, p_coord_v, p_zcorn_v, x, y, z, debug)
grd3d_midpoint = _cxtgeo.grd3d_midpoint

def grd3d_inact_outside_pol(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, k1, k2, force_close, option, debug):
    return _cxtgeo.grd3d_inact_outside_pol(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, k1, k2, force_close, option, debug)
grd3d_inact_outside_pol = _cxtgeo.grd3d_inact_outside_pol

def grd3d_setval_poly(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_val_v, value, option, debug):
    return _cxtgeo.grd3d_setval_poly(swig_np_dbl_in_v1, swig_np_dbl_in_v2, nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_val_v, value, option, debug)
grd3d_setval_poly = _cxtgeo.grd3d_setval_poly

def grd3d_geometrics(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, xori, yori, zori, xmin, xmax, ymin, ymax, zmin, zmax, rotation, dx, dy, dz, option1, option2, debug):
    return _cxtgeo.grd3d_geometrics(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, xori, yori, zori, xmin, xmax, ymin, ymax, zmin, zmax, rotation, dx, dy, dz, option1, option2, debug)
grd3d_geometrics = _cxtgeo.grd3d_geometrics

def grd3d_inact_by_dz(nx, ny, nz, p_zcorn_v, p_actnum_v, threshold, flip, debug):
    return _cxtgeo.grd3d_inact_by_dz(nx, ny, nz, p_zcorn_v, p_actnum_v, threshold, flip, debug)
grd3d_inact_by_dz = _cxtgeo.grd3d_inact_by_dz

def grd3d_check_cell_splits(ncol, nrow, nlay, p_coord_v, p_zcorn_v, ib1, ib2, debug):
    return _cxtgeo.grd3d_check_cell_splits(ncol, nrow, nlay, p_coord_v, p_zcorn_v, ib1, ib2, debug)
grd3d_check_cell_splits = _cxtgeo.grd3d_check_cell_splits

def grd3d_adj_cells(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, p_prop1, nprop1, val1, val2, p_prop2, nprop2, iflag1, iflag2, debug):
    return _cxtgeo.grd3d_adj_cells(ncol, nrow, nlay, p_coord_v, p_zcorn_v, p_actnum_v, p_prop1, nprop1, val1, val2, p_prop2, nprop2, iflag1, iflag2, debug)
grd3d_adj_cells = _cxtgeo.grd3d_adj_cells

def grd3d_corners(i, j, k, nx, ny, nz, p_coord_v, p_zcorn_v, corners, debug):
    return _cxtgeo.grd3d_corners(i, j, k, nx, ny, nz, p_coord_v, p_zcorn_v, corners, debug)
grd3d_corners = _cxtgeo.grd3d_corners

def grd3d_zminmax(i, j, k, nx, ny, nz, p_zcorn_v, option, debug):
    return _cxtgeo.grd3d_zminmax(i, j, k, nx, ny, nz, p_zcorn_v, option, debug)
grd3d_zminmax = _cxtgeo.grd3d_zminmax

def grd3d_get_all_corners(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, x5, y5, z5, x6, y6, z6, x7, y7, z7, x8, y8, z8, option, debug):
    return _cxtgeo.grd3d_get_all_corners(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, x5, y5, z5, x6, y6, z6, x7, y7, z7, x8, y8, z8, option, debug)
grd3d_get_all_corners = _cxtgeo.grd3d_get_all_corners

def grd3d_rpt_zlog_vs_zon(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_zon_v, nval, p_utme_v, p_utmn_v, p_tvds_v, p_zlog_v, zlmin, zlmax, p_zcorn_onelay_v, p_actnum_onelay_v, results, iflag, debug):
    return _cxtgeo.grd3d_rpt_zlog_vs_zon(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_zon_v, nval, p_utme_v, p_utmn_v, p_tvds_v, p_zlog_v, zlmin, zlmax, p_zcorn_onelay_v, p_actnum_onelay_v, results, iflag, debug)
grd3d_rpt_zlog_vs_zon = _cxtgeo.grd3d_rpt_zlog_vs_zon

def grd3d_well_ijk(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_zcorn_onelay_v, p_actnum_onelay_v, nval, p_utme_v, p_utmn_v, p_tvds_v, ivector, jvector, kvector, iflag, debug):
    return _cxtgeo.grd3d_well_ijk(nx, ny, nz, p_coord_v, p_zcorn_v, p_actnum_v, p_zcorn_onelay_v, p_actnum_onelay_v, nval, p_utme_v, p_utmn_v, p_tvds_v, ivector, jvector, kvector, iflag, debug)
grd3d_well_ijk = _cxtgeo.grd3d_well_ijk

def well_geometrics(np, xv, yv, zv, md, incl, az, option):
    return _cxtgeo.well_geometrics(np, xv, yv, zv, md, incl, az, option)
well_geometrics = _cxtgeo.well_geometrics

def well_trunc_parallel(swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, xtol, ytol, ztol, itol, atol, option):
    return _cxtgeo.well_trunc_parallel(swig_np_dbl_inplace_v1, swig_np_dbl_inplace_v2, swig_np_dbl_inplace_v3, swig_np_dbl_in_v1, swig_np_dbl_in_v2, swig_np_dbl_in_v3, xtol, ytol, ztol, itol, atol, option)
well_trunc_parallel = _cxtgeo.well_trunc_parallel
# This file is compatible with both classic and new-style classes.



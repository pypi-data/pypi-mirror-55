#!/usr/bin/env python
from setuptools import setup
setup(
  name = 'cs.threads',
  description = 'threading and communication/synchronisation conveniences',
  author = 'Cameron Simpson',
  author_email = 'cs@cskk.id.au',
  version = '20191102',
  url = 'https://bitbucket.org/cameron_simpson/css/commits/all',
  classifiers = ['Programming Language :: Python', 'Programming Language :: Python :: 2', 'Programming Language :: Python :: 3', 'Development Status :: 4 - Beta', 'Intended Audience :: Developers', 'Operating System :: OS Independent', 'Topic :: Software Development :: Libraries :: Python Modules', 'License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)'],
  include_package_data = True,
  install_requires = ['cs.deco', 'cs.excutils', 'cs.logutils', 'cs.pfx', 'cs.py.func', 'cs.py3', 'cs.queues', 'cs.seq'],
  keywords = ['python2', 'python3'],
  license = 'GNU General Public License v3 or later (GPLv3+)',
  long_description = '*Latest release 20191102*:\n@locked: report slow-to-acquire locks, add initial_timeout and lockattr decorator keyword parameters.\n\nThread related convenience classes and functions.\n\n## Class `AdjustableSemaphore`\n\nA semaphore whose value may be tuned after instantiation.\n\n## Function `bg(func, daemon=None, name=None, no_start=False, no_logexc=False, args=None, kwargs=None)`\n\nDispatch the callable `func` in its own `Thread`;\nreturn the `Thread`.\n\nParameters:\n* `func`: a callable for the `Thread` target.\n* `daemon`: optional argument specifying the `.daemon` attribute.\n* `name`: optional argument specifying the `Thread` name,\n  default: the name of `func`.\n* `no_start`: optional argument, default `False`.\n  If true, do not start the `Thread`.\n* `no_logexc`: if false (default `False`), wrap `func` in `@logexc`.\n* `args`, `kwargs`: passed to the `Thread` constructor\n\n## Class `LockableMixin`\n\nTrite mixin to control access to an object via its ._lock attribute.\nExposes the ._lock as the property .lock.\nPresents a context manager interface for obtaining an object\'s lock.\n\n## Function `locked(*da, **dkw)`\n\nA decorator for functions that must run within a lock.\n\nDecorator keyword arguments:\n* `initial_timeout`:\n  the initial lock attempt timeout;\n  if this is `>0` and exceeded a warning is issued\n  and then an indefinite attempt is made.\n  Default: `2.0`\n* `lockattr`:\n  the name of the attribute of `self`\n  which references the lock object.\n  Default `\'_lock\'`\n\n## Function `locked_property(func, lock_name=\'_lock\', prop_name=None, unset_object=None)`\n\nA thread safe property whose value is cached.\nThe lock is taken if the value needs to computed.\n\n## Class `PriorityLock`\n\nA priority based mutex which is acquired by and released to waiters\nin priority order.\n\nThe initialiser sets a default priority, itself defaulting to `0`.\n\nThe `acquire()` method accepts an optional `priority` value\nwhich specifies the priority of the acquire request;\nlower values have higher priorities.\n`acquire` returns a new `PriorityLockSubLock`.\n\nNote that internally this allocates a `threading.Lock` per acquirer.\n\nWhen `acquire` is called, if the `PriorityLock` is taken\nthen the acquirer blocks on their personal `Lock`.\n\nWhen `release()` is called the highest priority `Lock` is released.\n\nWithin a priority level `acquire`s are served in FIFO order.\n\nUsed as a context manager, the mutex is obtained at the default priority.\nThe `priority()` method offers a context manager\nwith a specified priority.\nBoth context managers return the `PriorityLockSubLock`\nallocated by the `acquire`.\n\n### Method `PriorityLock.__init__(self, default_priority=0, name=None)`\n\nInitialise the `PriorityLock`.\n\nParameters:\n* `default_priority`: the default `acquire` priority,\n  default `0`.\n* `name`: optional identifying name\n\n## Class `PriorityLockSubLock`\n\nMRO: `PriorityLockSubLock`, `builtins.tuple`  \nThe record for the per-`acquire`r `Lock` held by `PriorityLock.acquire`.\n\n## Function `via(cmanager, func, *a, **kw)`\n\nReturn a callable that calls the supplied `func` inside a\nwith statement using the context manager `cmanager`.\nThis intended use case is aimed at deferred function calls.\n\n## Class `WorkerThreadPool`\n\nMRO: `cs.resources.MultiOpenMixin`  \nA pool of worker threads to run functions.\n\n### Method `WorkerThreadPool.__init__(self, name=None, max_spare=4)`\n\nInitialise the WorkerThreadPool.\n\nParameters:\n* `name`: optional name for the pool\n* `max_spare`: maximum size of each idle pool (daemon and non-daemon)\n\n## Class `WTPoolEntry`\n\nMRO: `builtins.tuple`  \nWTPoolEntry(thread, queue)\n\n\n\n# Release Log\n\n*Release 20191102*:\n@locked: report slow-to-acquire locks, add initial_timeout and lockattr decorator keyword parameters.\n\n*Release 20190923.2*:\nFix annoying docstring typo.\n\n*Release 20190923.1*:\nDocstring updates.\n\n*Release 20190923*:\nRemove dependence on cs.obj.\n\n*Release 20190921*:\nNew PriorityLock class for a mutex which releases in (priority,fifo) order.\n\n*Release 20190812*:\nbg: compute default name before wrapping `func` in @logexc.\n\n*Release 20190729*:\nbg: provide default `name`, run callable inside Pfx, add optional no_logexc=False param preventing @logec wrapper if true.\n\n*Release 20190422*:\nbg(): new optional `no_start=False` keyword argument, preventing Thread.start if true\n\n*Release 20190102*:\nDrop some unused classes.\nNew LockableMixin, presenting a context manager and a .lock property.\n\n*Release 20160828*:\nUse "install_requires" instead of "requires" in DISTINFO.\n\n*Release 20160827*:\nReplace bare "excepts" with "except BaseException".\nDoc updates. Other minor improvements.\n\n*Release 20150115*:\nFirst PyPI release.',
  long_description_content_type = 'text/markdown',
  package_dir = {'': 'lib/python'},
  py_modules = ['cs.threads'],
)

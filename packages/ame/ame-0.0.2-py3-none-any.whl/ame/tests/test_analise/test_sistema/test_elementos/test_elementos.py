import unittest

import numpy as np
from typing import List, Tuple

from ame import Estrutura
from pathlib import Path

PP = 'PP2'
ARQS = [(PP, 'e1.ame')]


def estruturas() -> List[Tuple[str, Estrutura]]:
    ests = []
    for i in ARQS:
        arq = str(Path(__file__).parent.parent.parent.parent.joinpath(f'exemplos\\{i[1]}'))
        ests.append((i[0], Estrutura(arq)))
    return ests


class TestElemento(unittest.TestCase):
    def test_espelhar_matriz_triangular(self):
        e = estruturas()[0][1]

        barra = e.elementos[0]
        # Testes
        matriz_inf = np.array([[1, 0, 0],
                               [6, 3, 0],
                               [4, 8, 7]])
        matriz_sup = matriz_inf.T
        matriz_diag = np.array([[1, 6, 4],
                                [6, 3, 8],
                                [4, 8, 7]])

        self.assertTrue(np.array_equal(barra.espelhar_matriz_triangular(matriz_inf), matriz_diag))
        self.assertTrue(np.array_equal(barra.espelhar_matriz_triangular(matriz_sup), matriz_diag))

        # Testes erros
        with self.assertRaisesRegex(AttributeError, 'A matriz a ser espelhada deve ser triangular superior ou '
                                                    'inferior!'):
            barra.espelhar_matriz_triangular(matriz_diag)

    def test_graus_liberdade(self):
        dados = [[1, 2, 3, 7, 8, 9],
                 [7, 8, 9, 10, 11, 12],
                 [4, 5, 6, 10, 11, 12],
                 [10, 11, 12, 13, 14, 15]]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.graus_liberdade(), j)

    def test_comprimento(self):
        dados = [2,
                 4.47213595499958,
                 4,
                 1.4142135623730951]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertAlmostEqual(i.comprimento(), j)

    def test_seno_inclinacao(self):
        dados = [1,
                 0.4472135954999579,
                 1,
                 0.7071067811865475]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertAlmostEqual(i.seno_angulo_inclinacao(), j)

    def test_cosseno_inclinacao(self):
        dados = [0,
                 0.8944271909999159,
                 0,
                 0.7071067811865475]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertAlmostEqual(i.cosseno_angulo_inclinacao(), j)


class TestPP2(unittest.TestCase):
    def test_graus_liberdade_livres(self):
        dados = [[3, 7, 8, 9],
                 [7, 8, 9, 10, 11, 12],
                 [10, 11, 12],
                 [10, 11, 12, 13, 14, 15]]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.graus_liberdade_livres(), j)

    def test_graus_liberdade_impedidos(self):
        dados = [[1, 2],
                 [],
                 [4, 5, 6],
                 []]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.graus_liberdade_impedidos(), j)

    def test_forcas_aplicadas_nos_global(self):
        dados = [np.array([[0], [0], [0], [0], [0], [0]]),
                 np.array([[0.0], [0.0], [0.0], [-5000.0], [1000.0], [13000.0]]),
                 np.array([[0.0], [0.0], [0.0], [-5000.0], [1000.0], [13000.0]]),
                 np.array([[-5000.0], [1000.0], [13000.0], [0.0], [0.0], [0.0]])]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertTrue(np.array_equal(i.forcas_aplicadas_nos_global(), j))

    def test_deslocamentos(self):
        dados = [[[0.0], [0.0], [0.010756869758238894], [-0.012364850776379367], [-0.0004058289346022399],
                  [-0.0029664633519087386]],
                 [[-0.012364850776379367], [-0.0004058289346022399], [-0.0029664633519087386], [-0.012689919032664103],
                  [1.0606240535392592e-05], [0.005536676195008725]],
                 [[0.0], [0.0], [0.0], [-0.012689919032664103], [1.0606240535392592e-05], [0.005536676195008725]],
                 [[-0.012689919032664103], [1.0606240535392592e-05], [0.005536676195008725], [-0.017923906367813363],
                  [0.005248129418523512], [0.005135448277088667]]]

        e = estruturas()[0][1]
        desloc = e.deslocamentos()

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.deslocamentos(desloc).tolist(), j)

    def test_esforcos(self):
        dados = [[[0.0, -6998.519977215627, 9.094947017729282e-13, -1390.3794940546077],
                  [0.10526315789473684, -6998.519977215627, -146.35573621627358, -1390.3794940546077],
                  [0.21052631578947367, -6998.519977215627, -292.7114724325481, -1390.3794940546077],
                  [0.3157894736842105, -6998.519977215627, -439.06720864882254, -1390.3794940546077],
                  [0.42105263157894735, -6998.519977215627, -585.4229448650971, -1390.3794940546077],
                  [0.5263157894736842, -6998.519977215627, -731.7786810813715, -1390.3794940546077],
                  [0.631578947368421, -6998.519977215627, -878.134417297646, -1390.3794940546077],
                  [0.7368421052631579, -6998.519977215627, -1024.4901535139204, -1390.3794940546077],
                  [0.8421052631578947, -6998.519977215627, -1170.845889730195, -1390.3794940546077],
                  [0.9473684210526315, -6998.519977215627, -1317.2016259464694, -1390.3794940546077],
                  [1.0526315789473684, -6998.519977215627, -1463.5573621627439, -1390.3794940546077],
                  [1.1578947368421053, -6998.519977215627, -1609.9130983790185, -1390.3794940546077],
                  [1.263157894736842, -6998.519977215627, -1756.268834595293, -1390.3794940546077],
                  [1.3684210526315788, -6998.519977215627, -1902.6245708115673, -1390.3794940546077],
                  [1.4736842105263157, -6998.519977215627, -2048.9803070278417, -1390.3794940546077],
                  [1.5789473684210527, -6998.519977215627, -2195.3360432441164, -1390.3794940546077],
                  [1.6842105263157894, -6998.519977215627, -2341.691779460391, -1390.3794940546077],
                  [1.789473684210526, -6998.519977215627, -2488.047515676665, -1390.3794940546077],
                  [1.894736842105263, -6998.519977215627, -2634.40325189294, -1390.3794940546077],
                  [2.0, -6998.519977215627, -2780.7589881092144, -1390.3794940546077]],
                 [[0.0, -4373.426507479986, -2780.7589881092154, 5637.869951732213],
                  [0.23537557657892524, -4608.8020840589115, -1509.1437595931097, 5167.118798574363],
                  [0.4707511531578505, -4844.177660637836, -348.33185517672723, 4696.3676454165125],
                  [0.7061267297367757, -5079.553237216762, 701.6767251399324, 4225.616492258661],
                  [0.941502306315701, -5314.928813795686, 1640.881981356869, 3754.865339100811],
                  [1.1768778828946262, -5550.304390374612, 2469.2839134740825, 3284.1141859429604],
                  [1.4122534594735514, -5785.679966953538, 3186.8825214915732, 2813.36303278511],
                  [1.6476290360524768, -6021.055543532462, 3793.6778054093406, 2342.6118796272594],
                  [1.883004612631402, -6256.431120111388, 4289.669765227385, 1871.8607264694092],
                  [2.118380189210327, -6491.806696690313, 4674.858400945707, 1401.109573311559],
                  [2.3537557657892525, -6727.182273269238, 4949.2437125643055, 930.3584201537078],
                  [2.589131342368178, -6962.557849848164, 5112.82570008318, 459.6072669958576],
                  [2.824506918947103, -7197.933426427089, 5165.604363502333, -11.143886161992668],
                  [3.059882495526028, -7433.309003006014, 5107.579702821762, -481.8950393198438],
                  [3.2952580721049536, -7668.6845795849395, 4938.751718041469, -952.6461924776941],
                  [3.5306336486838785, -7904.060156163865, 4659.1204091614545, -1423.3973456355443],
                  [3.766009225262804, -8139.43573274279, 4268.6857761817155, -1894.1484987933945],
                  [4.001384801841729, -8374.811309321714, 3767.4478191022554, -2364.899651951245],
                  [4.236760378420654, -8610.186885900639, 3155.4065379230706, -2835.650805109095],
                  [4.47213595499958, -8845.562462479566, 2432.5619326441556, -3306.401958266946]],
                 [[0.0, 1291.4131960292682, 15106.425154526052, -9488.300162385853],
                  [0.21052631578947367, 1291.4131960292682, 13197.530937514071, -8646.194899227958],
                  [0.42105263157894735, 1291.4131960292682, 11465.922039061648, -7804.0896360700635],
                  [0.631578947368421, 1291.4131960292682, 9911.598459168783, -6961.9843729121685],
                  [0.8421052631578947, 1291.4131960292682, 8534.560197835473, -6119.879109754274],
                  [1.0526315789473684, 1291.4131960292682, 7334.80725506172, -5277.773846596379],
                  [1.263157894736842, 1291.4131960292682, 6312.339630847524, -4435.668583438484],
                  [1.4736842105263157, 1291.4131960292682, 5467.157325192885, -3593.5633202805902],
                  [1.6842105263157894, 1291.4131960292682, 4799.260338097803, -2751.458057122695],
                  [1.894736842105263, 1291.4131960292682, 4308.648669562274, -1909.3527939648002],
                  [2.1052631578947367, 1291.4131960292682, 3995.3223195863065, -1067.247530806906],
                  [2.3157894736842106, 1291.4131960292682, 3859.2812881698937, -225.14226764901105],
                  [2.526315789473684, 1291.4131960292682, 3900.5255753130386, 616.962995508884],
                  [2.7368421052631575, 1291.4131960292682, 4119.055181015741, 1459.0682586667772],
                  [2.9473684210526314, 1291.4131960292682, 4514.870105277998, 2301.173521824672],
                  [3.1578947368421053, 1291.4131960292682, 5087.970348099818, 3143.278784982569],
                  [3.3684210526315788, 1291.4131960292682, 5838.355909481186, 3985.3840481404623],
                  [3.578947368421052, 1291.4131960292682, 6766.026789422111, 4827.4893112983555],
                  [3.789473684210526, 1291.4131960292682, 7870.9829879225945, 5669.594574456252],
                  [4.0, 1291.4131960292682, 9153.224504982642, 6511.699837614147]],
                 [[0.0, 1000.0000000002328, -1414.2135623732358, 2000.0000000000582],
                  [0.0744322927564787, 947.3684210528644, -1269.2664659527204, 1894.7368421053213],
                  [0.1488645855129574, 894.736842105496, -1132.1543477170974, 1789.4736842105845],
                  [0.2232968782694361, 842.1052631581275, -1002.8772076663669, 1684.2105263158478],
                  [0.2977291710259148, 789.4736842107591, -881.4350458005289, 1578.947368421111],
                  [0.37216146378239345, 736.8421052633907, -767.8278621195834, 1473.684210526374],
                  [0.4465937565388722, 684.2105263160222, -662.0556566235304, 1368.4210526316372],
                  [0.5210260492953509, 631.5789473686539, -564.1184293123698, 1263.1578947369003],
                  [0.5954583420518296, 578.9473684212853, -474.0161801861019, 1157.8947368421636],
                  [0.6698906348083082, 526.315789473917, -391.7489092447264, 1052.6315789474265],
                  [0.7443229275647869, 473.68421052654855, -317.3166164882434, 947.3684210526899],
                  [0.8187552203212657, 421.0526315791801, -250.71930191665285, 842.105263157953],
                  [0.8931875130777444, 368.4210526318117, -191.95696552995457, 736.8421052632161],
                  [0.967619805834223, 315.78947368444324, -141.02960732814915, 631.5789473684792],
                  [1.0420520985907018, 263.1578947370748, -97.93722731123603, 526.3157894737424],
                  [1.1164843913471805, 210.52631578970636, -62.67982547921554, 421.0526315790055],
                  [1.1909166841036591, 157.89473684233792, -35.25740183208757, 315.78947368426884],
                  [1.2653489768601378, 105.2631578949696, -15.669956369851889, 210.52631578953196],
                  [1.3397812696166165, 52.631578947601156, -3.9174890925089585, 105.26315789479509],
                  [1.4142135623730951, 2.32716956816148e-10, -5.843503458891064e-11, 5.820766091346741e-11]]]

        e = estruturas()[0][1]
        desloc = e.deslocamentos()

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.esforcos(desloc).tolist(), j)

    def test_matriz_rigidez_local(self):
        dados = [[[17245000.0, 0.0, 0.0, -17245000.0, 0.0, 0.0], [0.0, 303945.0, 303945.0, 0.0, -303945.0, 303945.0],
                  [0.0, 303945.0, 405260.0, 0.0, -303945.0, 202630.0], [-17245000.0, 0.0, 0.0, 17245000.0, 0.0, 0.0],
                  [0.0, -303945.0, -303945.0, 0.0, 303945.0, -303945.0],
                  [0.0, 303945.0, 202630.0, 0.0, -303945.0, 405260.0]],
                 [[63240027.32605355, 0.0, 0.0, -63240027.32605355, 0.0, 0.0],
                  [0.0, 222922.4715061449, 498469.79999999993, 0.0, -222922.4715061449, 498469.79999999993],
                  [0.0, 498469.79999999993, 1486149.8100409661, 0.0, -498469.79999999993, 743074.9050204831],
                  [-63240027.32605355, 0.0, 0.0, 63240027.32605355, 0.0, 0.0],
                  [0.0, -222922.4715061449, -498469.79999999993, 0.0, 222922.4715061449, -498469.79999999993],
                  [0.0, 498469.79999999993, 743074.9050204831, 0.0, -498469.79999999993, 1486149.8100409661]],
                 [[121759750.0, 0.0, 0.0, -121759750.0, 0.0, 0.0],
                  [0.0, 920655.0, 1841310.0, 0.0, -920655.0, 1841310.0],
                  [0.0, 1841310.0, 4910160.0, 0.0, -1841310.0, 2455080.0],
                  [-121759750.0, 0.0, 0.0, 121759750.0, 0.0, 0.0],
                  [0.0, -920655.0, -1841310.0, 0.0, 920655.0, -1841310.0],
                  [0.0, 1841310.0, 2455080.0, 0.0, -1841310.0, 4910160.0]],
                 [[199982525.64161697, 0.0, 0.0, -199982525.64161697, 0.0, 0.0],
                  [0.0, 7049427.515934041, 4984697.999999998, 0.0, -7049427.515934041, 4984697.999999998],
                  [0.0, 4984697.999999998, 4699618.343956028, 0.0, -4984697.999999998, 2349809.171978014],
                  [-199982525.64161697, 0.0, 0.0, 199982525.64161697, 0.0, 0.0],
                  [0.0, -7049427.515934041, -4984697.999999998, 0.0, 7049427.515934041, -4984697.999999998],
                  [0.0, 4984697.999999998, 2349809.171978014, 0.0, -4984697.999999998, 4699618.343956028]]]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.matriz_rigidez_local().tolist(), j)

    def test_matriz_rotacao(self):
        dados = [[[0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, -1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]],
                 [[0.8944271909999159, 0.4472135954999579, 0.0, 0.0, 0.0, 0.0],
                  [-0.4472135954999579, 0.8944271909999159, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.8944271909999159, 0.4472135954999579, 0.0],
                  [0.0, 0.0, 0.0, -0.4472135954999579, 0.8944271909999159, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]],
                 [[0.0, 1.0, 0.0, 0.0, 0.0, 0.0], [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.0, 1.0, 0.0], [0.0, 0.0, 0.0, -1.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]],
                 [[0.7071067811865475, 0.7071067811865475, 0.0, 0.0, 0.0, 0.0],
                  [-0.7071067811865475, 0.7071067811865475, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.0, 0.0, 0.0, 0.0],
                  [0.0, 0.0, 0.0, 0.7071067811865475, 0.7071067811865475, 0.0],
                  [0.0, 0.0, 0.0, -0.7071067811865475, 0.7071067811865475, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]]]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.matriz_rotacao().tolist(), j)

    def test_matriz_rigidez_global(self):
        dados = [[[303945.0, 0.0, -303945.0, -303945.0, 0.0, -303945.0], [0.0, 17245000.0, 0.0, 0.0, -17245000.0, 0.0],
                  [-303945.0, 0.0, 405260.0, 303945.0, 0.0, 202630.0],
                  [-303945.0, 0.0, 303945.0, 303945.0, 0.0, 303945.0], [0.0, -17245000.0, 0.0, 0.0, 17245000.0, 0.0],
                  [-303945.0, 0.0, 202630.0, 303945.0, 0.0, 405260.0]], [
                     [50636606.35514407, 25206841.94181896, -222922.4715061449, -50636606.35514407, -25206841.94181896,
                      -222922.4715061449],
                     [25206841.94181896, 12826343.442415625, 445844.9430122898, -25206841.94181896, -12826343.442415625,
                      445844.9430122898],
                     [-222922.4715061449, 445844.9430122898, 1486149.8100409661, 222922.4715061449, -445844.9430122898,
                      743074.9050204831],
                     [-50636606.35514407, -25206841.94181896, 222922.4715061449, 50636606.35514407, 25206841.94181896,
                      222922.4715061449],
                     [-25206841.94181896, -12826343.442415625, -445844.9430122898, 25206841.94181896,
                      12826343.442415625, -445844.9430122898],
                     [-222922.4715061449, 445844.9430122898, 743074.9050204831, 222922.4715061449, -445844.9430122898,
                      1486149.8100409661]], [[920655.0, 0.0, -1841310.0, -920655.0, 0.0, -1841310.0],
                                             [0.0, 121759750.0, 0.0, 0.0, -121759750.0, 0.0],
                                             [-1841310.0, 0.0, 4910160.0, 1841310.0, 0.0, 2455080.0],
                                             [-920655.0, 0.0, 1841310.0, 920655.0, 0.0, 1841310.0],
                                             [0.0, -121759750.0, 0.0, 0.0, 121759750.0, 0.0],
                                             [-1841310.0, 0.0, 2455080.0, 1841310.0, 0.0, 4910160.0]], [
                     [103515976.5787755, 96466549.06284145, -3524713.7579670195, -103515976.5787755, -96466549.06284145,
                      -3524713.7579670195],
                     [96466549.06284145, 103515976.5787755, 3524713.7579670195, -96466549.06284145, -103515976.5787755,
                      3524713.7579670195],
                     [-3524713.7579670195, 3524713.7579670195, 4699618.343956028, 3524713.7579670195,
                      -3524713.7579670195, 2349809.171978014],
                     [-103515976.5787755, -96466549.06284145, 3524713.7579670195, 103515976.5787755, 96466549.06284145,
                      3524713.7579670195],
                     [-96466549.06284145, -103515976.5787755, -3524713.7579670195, 96466549.06284145, 103515976.5787755,
                      -3524713.7579670195],
                     [-3524713.7579670195, 3524713.7579670195, 2349809.171978014, 3524713.7579670195,
                      -3524713.7579670195, 4699618.343956028]]]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.matriz_rigidez_global().tolist(), j)

    def test_forcas_equivalentes_nos_local(self):
        dados = [[[0.0], [0.0], [0.0], [0.0], [0.0], [0.0]],
                 [[2236.06797749979], [-4472.13595499958], [-3333.333333333334], [2236.06797749979],
                  [-4472.13595499958], [3333.333333333334]],
                 [[0.0], [8000.0], [5333.333333333333], [0.0], [8000.0], [-5333.333333333333]],
                 [[500.00000000000006], [-1000.0], [-235.70226039551585], [500.00000000000006], [-1000.0],
                  [235.70226039551585]]]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.forcas_equivalentes_nos_local().tolist(), j)

    def test_forcas_equivalentes_nos_global(self):
        dados = [[[0.0], [0.0], [0.0], [0.0], [0.0], [0.0]],
                 [[4000.0], [-3000.0], [-3333.333333333334], [4000.0], [-3000.0], [3333.333333333334]],
                 [[-8000.0], [0.0], [5333.333333333333], [-8000.0], [0.0], [-5333.333333333333]],
                 [[1060.6601717798212], [-353.55339059327366], [-235.70226039551585], [1060.6601717798212],
                  [-353.55339059327366], [235.70226039551585]]]

        e = estruturas()[0][1]

        for i, j in zip(e.elementos, dados):
            self.assertEqual(i.forcas_equivalentes_nos_global().tolist(), j)


if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    SPMO Service

    The Software Project Management Ontology (SPMO) is defined as a layer over the Software Process Ontology, addressing aspects related to scope, time & duration, and cost estimation of intended processes, as well as aspects related to tracking planned versus performed processes.  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TrackedStakeholderParticipation_(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'uuid': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'cost': 'str',
        'duration': 'str',
        'progress_index': 'str',
        'stakeholder': 'int',
        'tracked_activity': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'uuid': 'uuid',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'cost': 'cost',
        'duration': 'duration',
        'progress_index': 'progress_index',
        'stakeholder': 'stakeholder',
        'tracked_activity': 'tracked_activity'
    }

    def __init__(self, id=None, name=None, description=None, uuid=None, start_date=None, end_date=None, cost=None, duration=None, progress_index=None, stakeholder=None, tracked_activity=None):  # noqa: E501
        """TrackedStakeholderParticipation_ - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._uuid = None
        self._start_date = None
        self._end_date = None
        self._cost = None
        self._duration = None
        self._progress_index = None
        self._stakeholder = None
        self._tracked_activity = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if description is not None:
            self.description = description
        if uuid is not None:
            self.uuid = uuid
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if cost is not None:
            self.cost = cost
        if duration is not None:
            self.duration = duration
        if progress_index is not None:
            self.progress_index = progress_index
        if stakeholder is not None:
            self.stakeholder = stakeholder
        if tracked_activity is not None:
            self.tracked_activity = tracked_activity

    @property
    def id(self):
        """Gets the id of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The id of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TrackedStakeholderParticipation_.


        :param id: The id of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The name of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TrackedStakeholderParticipation_.


        :param name: The name of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The description of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TrackedStakeholderParticipation_.


        :param description: The description of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def uuid(self):
        """Gets the uuid of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The uuid of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this TrackedStakeholderParticipation_.


        :param uuid: The uuid of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def start_date(self):
        """Gets the start_date of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The start_date of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TrackedStakeholderParticipation_.


        :param start_date: The start_date of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The end_date of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TrackedStakeholderParticipation_.


        :param end_date: The end_date of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def cost(self):
        """Gets the cost of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The cost of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this TrackedStakeholderParticipation_.


        :param cost: The cost of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: str
        """

        self._cost = cost

    @property
    def duration(self):
        """Gets the duration of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The duration of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TrackedStakeholderParticipation_.


        :param duration: The duration of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def progress_index(self):
        """Gets the progress_index of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The progress_index of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: str
        """
        return self._progress_index

    @progress_index.setter
    def progress_index(self, progress_index):
        """Sets the progress_index of this TrackedStakeholderParticipation_.


        :param progress_index: The progress_index of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: str
        """

        self._progress_index = progress_index

    @property
    def stakeholder(self):
        """Gets the stakeholder of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The stakeholder of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: int
        """
        return self._stakeholder

    @stakeholder.setter
    def stakeholder(self, stakeholder):
        """Sets the stakeholder of this TrackedStakeholderParticipation_.


        :param stakeholder: The stakeholder of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: int
        """

        self._stakeholder = stakeholder

    @property
    def tracked_activity(self):
        """Gets the tracked_activity of this TrackedStakeholderParticipation_.  # noqa: E501


        :return: The tracked_activity of this TrackedStakeholderParticipation_.  # noqa: E501
        :rtype: int
        """
        return self._tracked_activity

    @tracked_activity.setter
    def tracked_activity(self, tracked_activity):
        """Sets the tracked_activity of this TrackedStakeholderParticipation_.


        :param tracked_activity: The tracked_activity of this TrackedStakeholderParticipation_.  # noqa: E501
        :type: int
        """

        self._tracked_activity = tracked_activity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackedStakeholderParticipation_, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackedStakeholderParticipation_):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

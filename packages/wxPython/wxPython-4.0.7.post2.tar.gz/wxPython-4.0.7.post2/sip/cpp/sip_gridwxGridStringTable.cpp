/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.16
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_grid.h"

        #include <wx/grid.h>

        #include <wx/grid.h>
        #include <wx/grid.h>
        #include <wx/grid.h>
        #include <wx/grid.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxGridStringTable : public  ::wxGridStringTable
{
public:
    sipwxGridStringTable();
    sipwxGridStringTable(int,int);
    virtual ~sipwxGridStringTable();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool IsEmptyCell(int,int) SIP_OVERRIDE;
     ::wxString GetValue(int,int) SIP_OVERRIDE;
    void SetValue(int,int,const  ::wxString&) SIP_OVERRIDE;
     ::wxString GetTypeName(int,int) SIP_OVERRIDE;
    bool CanGetValueAs(int,int,const  ::wxString&) SIP_OVERRIDE;
    bool CanSetValueAs(int,int,const  ::wxString&) SIP_OVERRIDE;
    long GetValueAsLong(int,int) SIP_OVERRIDE;
    double GetValueAsDouble(int,int) SIP_OVERRIDE;
    bool GetValueAsBool(int,int) SIP_OVERRIDE;
    void SetValueAsLong(int,int,long) SIP_OVERRIDE;
    void SetValueAsDouble(int,int,double) SIP_OVERRIDE;
    void SetValueAsBool(int,int,bool) SIP_OVERRIDE;
    void Clear() SIP_OVERRIDE;
    bool InsertRows(size_t,size_t) SIP_OVERRIDE;
    bool AppendRows(size_t) SIP_OVERRIDE;
    bool DeleteRows(size_t,size_t) SIP_OVERRIDE;
    bool InsertCols(size_t,size_t) SIP_OVERRIDE;
    bool AppendCols(size_t) SIP_OVERRIDE;
    bool DeleteCols(size_t,size_t) SIP_OVERRIDE;
     ::wxString GetRowLabelValue(int) SIP_OVERRIDE;
     ::wxString GetColLabelValue(int) SIP_OVERRIDE;
    void SetRowLabelValue(int,const  ::wxString&) SIP_OVERRIDE;
    void SetColLabelValue(int,const  ::wxString&) SIP_OVERRIDE;
     ::wxGridCellAttr* GetAttr(int,int, ::wxGridCellAttr::wxAttrKind) SIP_OVERRIDE;
    void SetAttr( ::wxGridCellAttr*,int,int) SIP_OVERRIDE;
    void SetRowAttr( ::wxGridCellAttr*,int) SIP_OVERRIDE;
    void SetColAttr( ::wxGridCellAttr*,int) SIP_OVERRIDE;
    int GetNumberRows() SIP_OVERRIDE;
    int GetNumberCols() SIP_OVERRIDE;
    void SetView( ::wxGrid*) SIP_OVERRIDE;
     ::wxGrid* GetView() const SIP_OVERRIDE;
    bool CanHaveAttributes() SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxGridStringTable(const sipwxGridStringTable &);
    sipwxGridStringTable &operator = (const sipwxGridStringTable &);

    char sipPyMethods[32];
};

sipwxGridStringTable::sipwxGridStringTable():  ::wxGridStringTable(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridStringTable::sipwxGridStringTable(int numRows,int numCols):  ::wxGridStringTable(numRows,numCols), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxGridStringTable::~sipwxGridStringTable()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxGridStringTable::IsEmptyCell(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_IsEmptyCell);

    if (!sipMeth)
        return  ::wxGridStringTable::IsEmptyCell(row,col);

    extern bool sipVH__grid_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_23(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

 ::wxString sipwxGridStringTable::GetValue(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,SIP_NULLPTR,sipName_GetValue);

    if (!sipMeth)
        return  ::wxGridStringTable::GetValue(row,col);

    extern  ::wxString sipVH__grid_41(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_41(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

void sipwxGridStringTable::SetValue(int row,int col,const  ::wxString& value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,SIP_NULLPTR,sipName_SetValue);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetValue(row,col,value);
        return;
    }

    extern void sipVH__grid_25(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::wxString&);

    sipVH__grid_25(sipGILState, 0, sipPySelf, sipMeth, row, col, value);
}

 ::wxString sipwxGridStringTable::GetTypeName(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,SIP_NULLPTR,sipName_GetTypeName);

    if (!sipMeth)
        return  ::wxGridStringTable::GetTypeName(row,col);

    extern  ::wxString sipVH__grid_26(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_26(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

bool sipwxGridStringTable::CanGetValueAs(int row,int col,const  ::wxString& typeName)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,SIP_NULLPTR,sipName_CanGetValueAs);

    if (!sipMeth)
        return  ::wxGridStringTable::CanGetValueAs(row,col,typeName);

    extern bool sipVH__grid_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::wxString&);

    return sipVH__grid_27(sipGILState, 0, sipPySelf, sipMeth, row, col, typeName);
}

bool sipwxGridStringTable::CanSetValueAs(int row,int col,const  ::wxString& typeName)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,SIP_NULLPTR,sipName_CanSetValueAs);

    if (!sipMeth)
        return  ::wxGridStringTable::CanSetValueAs(row,col,typeName);

    extern bool sipVH__grid_27(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,const  ::wxString&);

    return sipVH__grid_27(sipGILState, 0, sipPySelf, sipMeth, row, col, typeName);
}

long sipwxGridStringTable::GetValueAsLong(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,SIP_NULLPTR,sipName_GetValueAsLong);

    if (!sipMeth)
        return  ::wxGridStringTable::GetValueAsLong(row,col);

    extern long sipVH__grid_28(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_28(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

double sipwxGridStringTable::GetValueAsDouble(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[7],sipPySelf,SIP_NULLPTR,sipName_GetValueAsDouble);

    if (!sipMeth)
        return  ::wxGridStringTable::GetValueAsDouble(row,col);

    extern double sipVH__grid_29(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_29(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

bool sipwxGridStringTable::GetValueAsBool(int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[8],sipPySelf,SIP_NULLPTR,sipName_GetValueAsBool);

    if (!sipMeth)
        return  ::wxGridStringTable::GetValueAsBool(row,col);

    extern bool sipVH__grid_23(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int);

    return sipVH__grid_23(sipGILState, 0, sipPySelf, sipMeth, row, col);
}

void sipwxGridStringTable::SetValueAsLong(int row,int col,long value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[9],sipPySelf,SIP_NULLPTR,sipName_SetValueAsLong);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetValueAsLong(row,col,value);
        return;
    }

    extern void sipVH__grid_30(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,long);

    sipVH__grid_30(sipGILState, 0, sipPySelf, sipMeth, row, col, value);
}

void sipwxGridStringTable::SetValueAsDouble(int row,int col,double value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[10],sipPySelf,SIP_NULLPTR,sipName_SetValueAsDouble);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetValueAsDouble(row,col,value);
        return;
    }

    extern void sipVH__grid_31(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,double);

    sipVH__grid_31(sipGILState, 0, sipPySelf, sipMeth, row, col, value);
}

void sipwxGridStringTable::SetValueAsBool(int row,int col,bool value)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[11],sipPySelf,SIP_NULLPTR,sipName_SetValueAsBool);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetValueAsBool(row,col,value);
        return;
    }

    extern void sipVH__grid_32(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int,bool);

    sipVH__grid_32(sipGILState, 0, sipPySelf, sipMeth, row, col, value);
}

void sipwxGridStringTable::Clear()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[12],sipPySelf,SIP_NULLPTR,sipName_Clear);

    if (!sipMeth)
    {
         ::wxGridStringTable::Clear();
        return;
    }

    extern void sipVH__grid_7(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    sipVH__grid_7(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxGridStringTable::InsertRows(size_t pos,size_t numRows)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[13],sipPySelf,SIP_NULLPTR,sipName_InsertRows);

    if (!sipMeth)
        return  ::wxGridStringTable::InsertRows(pos,numRows);

    extern bool sipVH__grid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,size_t);

    return sipVH__grid_33(sipGILState, 0, sipPySelf, sipMeth, pos, numRows);
}

bool sipwxGridStringTable::AppendRows(size_t numRows)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[14],sipPySelf,SIP_NULLPTR,sipName_AppendRows);

    if (!sipMeth)
        return  ::wxGridStringTable::AppendRows(numRows);

    extern bool sipVH__grid_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__grid_34(sipGILState, 0, sipPySelf, sipMeth, numRows);
}

bool sipwxGridStringTable::DeleteRows(size_t pos,size_t numRows)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[15],sipPySelf,SIP_NULLPTR,sipName_DeleteRows);

    if (!sipMeth)
        return  ::wxGridStringTable::DeleteRows(pos,numRows);

    extern bool sipVH__grid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,size_t);

    return sipVH__grid_33(sipGILState, 0, sipPySelf, sipMeth, pos, numRows);
}

bool sipwxGridStringTable::InsertCols(size_t pos,size_t numCols)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[16],sipPySelf,SIP_NULLPTR,sipName_InsertCols);

    if (!sipMeth)
        return  ::wxGridStringTable::InsertCols(pos,numCols);

    extern bool sipVH__grid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,size_t);

    return sipVH__grid_33(sipGILState, 0, sipPySelf, sipMeth, pos, numCols);
}

bool sipwxGridStringTable::AppendCols(size_t numCols)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[17],sipPySelf,SIP_NULLPTR,sipName_AppendCols);

    if (!sipMeth)
        return  ::wxGridStringTable::AppendCols(numCols);

    extern bool sipVH__grid_34(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t);

    return sipVH__grid_34(sipGILState, 0, sipPySelf, sipMeth, numCols);
}

bool sipwxGridStringTable::DeleteCols(size_t pos,size_t numCols)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[18],sipPySelf,SIP_NULLPTR,sipName_DeleteCols);

    if (!sipMeth)
        return  ::wxGridStringTable::DeleteCols(pos,numCols);

    extern bool sipVH__grid_33(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, size_t,size_t);

    return sipVH__grid_33(sipGILState, 0, sipPySelf, sipMeth, pos, numCols);
}

 ::wxString sipwxGridStringTable::GetRowLabelValue(int row)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[19],sipPySelf,SIP_NULLPTR,sipName_GetRowLabelValue);

    if (!sipMeth)
        return  ::wxGridStringTable::GetRowLabelValue(row);

    extern  ::wxString sipVH__grid_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__grid_35(sipGILState, 0, sipPySelf, sipMeth, row);
}

 ::wxString sipwxGridStringTable::GetColLabelValue(int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[20],sipPySelf,SIP_NULLPTR,sipName_GetColLabelValue);

    if (!sipMeth)
        return  ::wxGridStringTable::GetColLabelValue(col);

    extern  ::wxString sipVH__grid_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int);

    return sipVH__grid_35(sipGILState, 0, sipPySelf, sipMeth, col);
}

void sipwxGridStringTable::SetRowLabelValue(int row,const  ::wxString& label)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[21],sipPySelf,SIP_NULLPTR,sipName_SetRowLabelValue);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetRowLabelValue(row,label);
        return;
    }

    extern void sipVH__grid_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxString&);

    sipVH__grid_36(sipGILState, 0, sipPySelf, sipMeth, row, label);
}

void sipwxGridStringTable::SetColLabelValue(int col,const  ::wxString& label)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[22],sipPySelf,SIP_NULLPTR,sipName_SetColLabelValue);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetColLabelValue(col,label);
        return;
    }

    extern void sipVH__grid_36(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,const  ::wxString&);

    sipVH__grid_36(sipGILState, 0, sipPySelf, sipMeth, col, label);
}

 ::wxGridCellAttr* sipwxGridStringTable::GetAttr(int row,int col, ::wxGridCellAttr::wxAttrKind kind)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[23],sipPySelf,SIP_NULLPTR,sipName_GetAttr);

    if (!sipMeth)
        return  ::wxGridStringTable::GetAttr(row,col,kind);

    extern  ::wxGridCellAttr* sipVH__grid_22(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, int,int, ::wxGridCellAttr::wxAttrKind);

    return sipVH__grid_22(sipGILState, 0, sipPySelf, sipMeth, row, col, kind);
}

void sipwxGridStringTable::SetAttr( ::wxGridCellAttr*attr,int row,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[24],sipPySelf,SIP_NULLPTR,sipName_SetAttr);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetAttr(attr,row,col);
        return;
    }

    extern void sipVH__grid_17(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGridCellAttr*,int,int);

    sipVH__grid_17(sipGILState, 0, sipPySelf, sipMeth, attr, row, col);
}

void sipwxGridStringTable::SetRowAttr( ::wxGridCellAttr*attr,int row)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[25],sipPySelf,SIP_NULLPTR,sipName_SetRowAttr);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetRowAttr(attr,row);
        return;
    }

    extern void sipVH__grid_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGridCellAttr*,int);

    sipVH__grid_18(sipGILState, 0, sipPySelf, sipMeth, attr, row);
}

void sipwxGridStringTable::SetColAttr( ::wxGridCellAttr*attr,int col)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[26],sipPySelf,SIP_NULLPTR,sipName_SetColAttr);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetColAttr(attr,col);
        return;
    }

    extern void sipVH__grid_18(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGridCellAttr*,int);

    sipVH__grid_18(sipGILState, 0, sipPySelf, sipMeth, attr, col);
}

int sipwxGridStringTable::GetNumberRows()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[27],sipPySelf,SIP_NULLPTR,sipName_GetNumberRows);

    if (!sipMeth)
        return  ::wxGridStringTable::GetNumberRows();

    extern int sipVH__grid_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_37(sipGILState, 0, sipPySelf, sipMeth);
}

int sipwxGridStringTable::GetNumberCols()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[28],sipPySelf,SIP_NULLPTR,sipName_GetNumberCols);

    if (!sipMeth)
        return  ::wxGridStringTable::GetNumberCols();

    extern int sipVH__grid_37(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_37(sipGILState, 0, sipPySelf, sipMeth);
}

void sipwxGridStringTable::SetView( ::wxGrid*grid)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[29],sipPySelf,SIP_NULLPTR,sipName_SetView);

    if (!sipMeth)
    {
         ::wxGridStringTable::SetView(grid);
        return;
    }

    extern void sipVH__grid_38(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxGrid*);

    sipVH__grid_38(sipGILState, 0, sipPySelf, sipMeth, grid);
}

 ::wxGrid* sipwxGridStringTable::GetView() const
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,const_cast<char *>(&sipPyMethods[30]),sipPySelf,SIP_NULLPTR,sipName_GetView);

    if (!sipMeth)
        return  ::wxGridStringTable::GetView();

    extern  ::wxGrid* sipVH__grid_39(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_39(sipGILState, 0, sipPySelf, sipMeth);
}

bool sipwxGridStringTable::CanHaveAttributes()
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[31],sipPySelf,SIP_NULLPTR,sipName_CanHaveAttributes);

    if (!sipMeth)
        return  ::wxGridStringTable::CanHaveAttributes();

    extern bool sipVH__grid_40(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *);

    return sipVH__grid_40(sipGILState, 0, sipPySelf, sipMeth);
}


PyDoc_STRVAR(doc_wxGridStringTable_GetNumberRows, "GetNumberRows() -> int\n"
"\n"
"Must be overridden to return the number of rows in the table.");

extern "C" {static PyObject *meth_wxGridStringTable_GetNumberRows(PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetNumberRows(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridStringTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridStringTable, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::GetNumberRows() : sipCpp->GetNumberRows());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetNumberRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_GetNumberCols, "GetNumberCols() -> int\n"
"\n"
"Must be overridden to return the number of columns in the table.");

extern "C" {static PyObject *meth_wxGridStringTable_GetNumberCols(PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetNumberCols(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridStringTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridStringTable, &sipCpp))
        {
            int sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::GetNumberCols() : sipCpp->GetNumberCols());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetNumberCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_GetValue, "GetValue(row, col) -> String\n"
"\n"
"Must be overridden to implement accessing the table values as text.");

extern "C" {static PyObject *meth_wxGridStringTable_GetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bii", &sipSelf, sipType_wxGridStringTable, &sipCpp, &row, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxGridStringTable::GetValue(row,col) : sipCpp->GetValue(row,col)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_SetValue, "SetValue(row, col, value)\n"
"\n"
"Must be overridden to implement setting the table values as text.");

extern "C" {static PyObject *meth_wxGridStringTable_SetValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_SetValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        int col;
        const  ::wxString* value;
        int valueState = 0;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_col,
            sipName_value,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiiJ1", &sipSelf, sipType_wxGridStringTable, &sipCpp, &row, &col, sipType_wxString,&value, &valueState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::SetValue(row,col,*value) : sipCpp->SetValue(row,col,*value));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(value),sipType_wxString,valueState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_SetValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_Clear, "Clear()\n"
"\n"
"Clear the table contents.");

extern "C" {static PyObject *meth_wxGridStringTable_Clear(PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_Clear(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxGridStringTable *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxGridStringTable, &sipCpp))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::Clear() : sipCpp->Clear());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_Clear, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_InsertRows, "InsertRows(pos=0, numRows=1) -> bool\n"
"\n"
"Insert additional rows into the table.");

extern "C" {static PyObject *meth_wxGridStringTable_InsertRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_InsertRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t pos = 0;
        size_t numRows = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridStringTable, &sipCpp, &pos, &numRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::InsertRows(pos,numRows) : sipCpp->InsertRows(pos,numRows));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_InsertRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_AppendRows, "AppendRows(numRows=1) -> bool\n"
"\n"
"Append additional rows at the end of the table.");

extern "C" {static PyObject *meth_wxGridStringTable_AppendRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_AppendRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t numRows = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_numRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|=", &sipSelf, sipType_wxGridStringTable, &sipCpp, &numRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::AppendRows(numRows) : sipCpp->AppendRows(numRows));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_AppendRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_DeleteRows, "DeleteRows(pos=0, numRows=1) -> bool\n"
"\n"
"Delete rows from the table.");

extern "C" {static PyObject *meth_wxGridStringTable_DeleteRows(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_DeleteRows(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t pos = 0;
        size_t numRows = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numRows,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridStringTable, &sipCpp, &pos, &numRows))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::DeleteRows(pos,numRows) : sipCpp->DeleteRows(pos,numRows));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_DeleteRows, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_InsertCols, "InsertCols(pos=0, numCols=1) -> bool\n"
"\n"
"Exactly the same as InsertRows() but for columns.");

extern "C" {static PyObject *meth_wxGridStringTable_InsertCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_InsertCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t pos = 0;
        size_t numCols = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridStringTable, &sipCpp, &pos, &numCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::InsertCols(pos,numCols) : sipCpp->InsertCols(pos,numCols));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_InsertCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_AppendCols, "AppendCols(numCols=1) -> bool\n"
"\n"
"Exactly the same as AppendRows() but for columns.");

extern "C" {static PyObject *meth_wxGridStringTable_AppendCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_AppendCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t numCols = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_numCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|=", &sipSelf, sipType_wxGridStringTable, &sipCpp, &numCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::AppendCols(numCols) : sipCpp->AppendCols(numCols));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_AppendCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_DeleteCols, "DeleteCols(pos=0, numCols=1) -> bool\n"
"\n"
"Exactly the same as DeleteRows() but for columns.");

extern "C" {static PyObject *meth_wxGridStringTable_DeleteCols(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_DeleteCols(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        size_t pos = 0;
        size_t numCols = 1;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_pos,
            sipName_numCols,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "B|==", &sipSelf, sipType_wxGridStringTable, &sipCpp, &pos, &numCols))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::DeleteCols(pos,numCols) : sipCpp->DeleteCols(pos,numCols));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_DeleteCols, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_SetRowLabelValue, "SetRowLabelValue(row, label)\n"
"\n"
"Set the given label for the specified row.");

extern "C" {static PyObject *meth_wxGridStringTable_SetRowLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_SetRowLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
        const  ::wxString* label;
        int labelState = 0;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxGridStringTable, &sipCpp, &row, sipType_wxString,&label, &labelState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::SetRowLabelValue(row,*label) : sipCpp->SetRowLabelValue(row,*label));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_SetRowLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_SetColLabelValue, "SetColLabelValue(col, label)\n"
"\n"
"Exactly the same as SetRowLabelValue() but for columns.");

extern "C" {static PyObject *meth_wxGridStringTable_SetColLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_SetColLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int col;
        const  ::wxString* label;
        int labelState = 0;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
            sipName_label,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BiJ1", &sipSelf, sipType_wxGridStringTable, &sipCpp, &col, sipType_wxString,&label, &labelState))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            (sipSelfWasArg ? sipCpp-> ::wxGridStringTable::SetColLabelValue(col,*label) : sipCpp->SetColLabelValue(col,*label));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(label),sipType_wxString,labelState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_SetColLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_GetRowLabelValue, "GetRowLabelValue(row) -> String\n"
"\n"
"Return the label of the specified row.");

extern "C" {static PyObject *meth_wxGridStringTable_GetRowLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetRowLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int row;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_row,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGridStringTable, &sipCpp, &row))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxGridStringTable::GetRowLabelValue(row) : sipCpp->GetRowLabelValue(row)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetRowLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxGridStringTable_GetColLabelValue, "GetColLabelValue(col) -> String\n"
"\n"
"Return the label of the specified column.");

extern "C" {static PyObject *meth_wxGridStringTable_GetColLabelValue(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxGridStringTable_GetColLabelValue(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        int col;
         ::wxGridStringTable *sipCpp;

        static const char *sipKwdList[] = {
            sipName_col,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "Bi", &sipSelf, sipType_wxGridStringTable, &sipCpp, &col))
        {
             ::wxString*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxString((sipSelfWasArg ? sipCpp-> ::wxGridStringTable::GetColLabelValue(col) : sipCpp->GetColLabelValue(col)));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxString,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_GridStringTable, sipName_GetColLabelValue, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxGridStringTable(void *, const sipTypeDef *);}
static void *cast_wxGridStringTable(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxGridStringTable *sipCpp = reinterpret_cast< ::wxGridStringTable *>(sipCppV);

    if (targetType == sipType_wxGridTableBase)
        return static_cast< ::wxGridTableBase *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxGridStringTable(void *, int);}
static void release_wxGridStringTable(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxGridStringTable *>(sipCppV);
    else
        delete reinterpret_cast< ::wxGridStringTable *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxGridStringTable(sipSimpleWrapper *);}
static void dealloc_wxGridStringTable(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxGridStringTable *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxGridStringTable(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxGridStringTable(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxGridStringTable(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxGridStringTable *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridStringTable();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        int numRows;
        int numCols;

        static const char *sipKwdList[] = {
            sipName_numRows,
            sipName_numCols,
        };

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, sipKwdList, sipUnused, "ii", &numRows, &numCols))
        {
            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxGridStringTable(numRows,numCols);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
            {
                delete sipCpp;
                return SIP_NULLPTR;
            }

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxGridStringTable[] = {{41, 255, 1}};


static PyMethodDef methods_wxGridStringTable[] = {
    {SIP_MLNAME_CAST(sipName_AppendCols), SIP_MLMETH_CAST(meth_wxGridStringTable_AppendCols), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_AppendCols)},
    {SIP_MLNAME_CAST(sipName_AppendRows), SIP_MLMETH_CAST(meth_wxGridStringTable_AppendRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_AppendRows)},
    {SIP_MLNAME_CAST(sipName_Clear), meth_wxGridStringTable_Clear, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridStringTable_Clear)},
    {SIP_MLNAME_CAST(sipName_DeleteCols), SIP_MLMETH_CAST(meth_wxGridStringTable_DeleteCols), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_DeleteCols)},
    {SIP_MLNAME_CAST(sipName_DeleteRows), SIP_MLMETH_CAST(meth_wxGridStringTable_DeleteRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_DeleteRows)},
    {SIP_MLNAME_CAST(sipName_GetColLabelValue), SIP_MLMETH_CAST(meth_wxGridStringTable_GetColLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetColLabelValue)},
    {SIP_MLNAME_CAST(sipName_GetNumberCols), meth_wxGridStringTable_GetNumberCols, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetNumberCols)},
    {SIP_MLNAME_CAST(sipName_GetNumberRows), meth_wxGridStringTable_GetNumberRows, METH_VARARGS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetNumberRows)},
    {SIP_MLNAME_CAST(sipName_GetRowLabelValue), SIP_MLMETH_CAST(meth_wxGridStringTable_GetRowLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetRowLabelValue)},
    {SIP_MLNAME_CAST(sipName_GetValue), SIP_MLMETH_CAST(meth_wxGridStringTable_GetValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_GetValue)},
    {SIP_MLNAME_CAST(sipName_InsertCols), SIP_MLMETH_CAST(meth_wxGridStringTable_InsertCols), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_InsertCols)},
    {SIP_MLNAME_CAST(sipName_InsertRows), SIP_MLMETH_CAST(meth_wxGridStringTable_InsertRows), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_InsertRows)},
    {SIP_MLNAME_CAST(sipName_SetColLabelValue), SIP_MLMETH_CAST(meth_wxGridStringTable_SetColLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_SetColLabelValue)},
    {SIP_MLNAME_CAST(sipName_SetRowLabelValue), SIP_MLMETH_CAST(meth_wxGridStringTable_SetRowLabelValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_SetRowLabelValue)},
    {SIP_MLNAME_CAST(sipName_SetValue), SIP_MLMETH_CAST(meth_wxGridStringTable_SetValue), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxGridStringTable_SetValue)}
};

sipVariableDef variables_wxGridStringTable[] = {
    {PropertyVariable, sipName_NumberRows, &methods_wxGridStringTable[7], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    {PropertyVariable, sipName_NumberCols, &methods_wxGridStringTable[6], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxGridStringTable, "GridStringTable()\n"
"GridStringTable(numRows, numCols)\n"
"\n"
"Simplest type of data table for a grid for small tables of strings\n"
"that are stored in memory.");


sipClassTypeDef sipTypeDef__grid_wxGridStringTable = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxGridStringTable,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_GridStringTable,
        {0, 0, 1},
        15, methods_wxGridStringTable,
        0, SIP_NULLPTR,
        2, variables_wxGridStringTable,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxGridStringTable,
    -1,
    -1,
    supers_wxGridStringTable,
    SIP_NULLPTR,
    init_type_wxGridStringTable,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxGridStringTable,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxGridStringTable,
    cast_wxGridStringTable,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.16
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_propgrid.h"

        #include <wx/propgrid/props.h>

        #include <wx/propgrid/propgrid.h>
        #include <wx/propgrid/property.h>
        #include <wx/object.h>
        #include <wx/object.h>
        #include <wx/object.h>


class sipwxPGLongStringDialogAdapter : public  ::wxPGLongStringDialogAdapter
{
public:
    sipwxPGLongStringDialogAdapter();
    sipwxPGLongStringDialogAdapter(const  ::wxPGLongStringDialogAdapter&);
    virtual ~sipwxPGLongStringDialogAdapter();

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool DoShowDialog( ::wxPropertyGrid*, ::wxPGProperty*) SIP_OVERRIDE;

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipwxPGLongStringDialogAdapter(const sipwxPGLongStringDialogAdapter &);
    sipwxPGLongStringDialogAdapter &operator = (const sipwxPGLongStringDialogAdapter &);

    char sipPyMethods[1];
};

sipwxPGLongStringDialogAdapter::sipwxPGLongStringDialogAdapter():  ::wxPGLongStringDialogAdapter(), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPGLongStringDialogAdapter::sipwxPGLongStringDialogAdapter(const  ::wxPGLongStringDialogAdapter& a0):  ::wxPGLongStringDialogAdapter(a0), sipPySelf(SIP_NULLPTR)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipwxPGLongStringDialogAdapter::~sipwxPGLongStringDialogAdapter()
{
    sipInstanceDestroyedEx(&sipPySelf);
}

bool sipwxPGLongStringDialogAdapter::DoShowDialog( ::wxPropertyGrid*propGrid, ::wxPGProperty*property)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,SIP_NULLPTR,sipName_DoShowDialog);

    if (!sipMeth)
        return  ::wxPGLongStringDialogAdapter::DoShowDialog(propGrid,property);

    extern bool sipVH__propgrid_35(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::wxPropertyGrid*, ::wxPGProperty*);

    return sipVH__propgrid_35(sipGILState, 0, sipPySelf, sipMeth, propGrid, property);
}


PyDoc_STRVAR(doc_wxPGLongStringDialogAdapter_DoShowDialog, "DoShowDialog(propGrid, property) -> bool");

extern "C" {static PyObject *meth_wxPGLongStringDialogAdapter_DoShowDialog(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxPGLongStringDialogAdapter_DoShowDialog(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::wxPropertyGrid* propGrid;
         ::wxPGProperty* property;
         ::wxPGLongStringDialogAdapter *sipCpp;

        static const char *sipKwdList[] = {
            sipName_propGrid,
            sipName_property,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J8", &sipSelf, sipType_wxPGLongStringDialogAdapter, &sipCpp, sipType_wxPropertyGrid, &propGrid, sipType_wxPGProperty, &property))
        {
            bool sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = (sipSelfWasArg ? sipCpp-> ::wxPGLongStringDialogAdapter::DoShowDialog(propGrid,property) : sipCpp->DoShowDialog(propGrid,property));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_PGLongStringDialogAdapter, sipName_DoShowDialog, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_wxPGLongStringDialogAdapter(void *, const sipTypeDef *);}
static void *cast_wxPGLongStringDialogAdapter(void *sipCppV, const sipTypeDef *targetType)
{
     ::wxPGLongStringDialogAdapter *sipCpp = reinterpret_cast< ::wxPGLongStringDialogAdapter *>(sipCppV);

    if (targetType == sipType_wxPGEditorDialogAdapter)
        return static_cast< ::wxPGEditorDialogAdapter *>(sipCpp);

    if (targetType == sipType_wxObject)
        return static_cast< ::wxObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxPGLongStringDialogAdapter(void *, int);}
static void release_wxPGLongStringDialogAdapter(void *sipCppV, int sipState)
{
    Py_BEGIN_ALLOW_THREADS

    if (sipState & SIP_DERIVED_CLASS)
        delete reinterpret_cast<sipwxPGLongStringDialogAdapter *>(sipCppV);
    else
        delete reinterpret_cast< ::wxPGLongStringDialogAdapter *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void assign_wxPGLongStringDialogAdapter(void *, SIP_SSIZE_T, void *);}
static void assign_wxPGLongStringDialogAdapter(void *sipDst, SIP_SSIZE_T sipDstIdx, void *sipSrc)
{
    reinterpret_cast< ::wxPGLongStringDialogAdapter *>(sipDst)[sipDstIdx] = *reinterpret_cast< ::wxPGLongStringDialogAdapter *>(sipSrc);
}


extern "C" {static void *array_wxPGLongStringDialogAdapter(SIP_SSIZE_T);}
static void *array_wxPGLongStringDialogAdapter(SIP_SSIZE_T sipNrElem)
{
    return new  ::wxPGLongStringDialogAdapter[sipNrElem];
}


extern "C" {static void *copy_wxPGLongStringDialogAdapter(const void *, SIP_SSIZE_T);}
static void *copy_wxPGLongStringDialogAdapter(const void *sipSrc, SIP_SSIZE_T sipSrcIdx)
{
    return new  ::wxPGLongStringDialogAdapter(reinterpret_cast<const  ::wxPGLongStringDialogAdapter *>(sipSrc)[sipSrcIdx]);
}


extern "C" {static void dealloc_wxPGLongStringDialogAdapter(sipSimpleWrapper *);}
static void dealloc_wxPGLongStringDialogAdapter(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipwxPGLongStringDialogAdapter *>(sipGetAddress(sipSelf))->sipPySelf = SIP_NULLPTR;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxPGLongStringDialogAdapter(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_wxPGLongStringDialogAdapter(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_wxPGLongStringDialogAdapter(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipwxPGLongStringDialogAdapter *sipCpp = SIP_NULLPTR;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPGLongStringDialogAdapter();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    {
        const  ::wxPGLongStringDialogAdapter* a0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, SIP_NULLPTR, sipUnused, "J9", sipType_wxPGLongStringDialogAdapter, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipwxPGLongStringDialogAdapter(*a0);
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return SIP_NULLPTR;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_wxPGLongStringDialogAdapter[] = {{35, 255, 1}};


static PyMethodDef methods_wxPGLongStringDialogAdapter[] = {
    {SIP_MLNAME_CAST(sipName_DoShowDialog), SIP_MLMETH_CAST(meth_wxPGLongStringDialogAdapter_DoShowDialog), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxPGLongStringDialogAdapter_DoShowDialog)}
};

PyDoc_STRVAR(doc_wxPGLongStringDialogAdapter, "");


sipClassTypeDef sipTypeDef__propgrid_wxPGLongStringDialogAdapter = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_wxPGLongStringDialogAdapter,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_PGLongStringDialogAdapter,
        {0, 0, 1},
        1, methods_wxPGLongStringDialogAdapter,
        0, SIP_NULLPTR,
        0, SIP_NULLPTR,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxPGLongStringDialogAdapter,
    -1,
    -1,
    supers_wxPGLongStringDialogAdapter,
    SIP_NULLPTR,
    init_type_wxPGLongStringDialogAdapter,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxPGLongStringDialogAdapter,
    assign_wxPGLongStringDialogAdapter,
    array_wxPGLongStringDialogAdapter,
    copy_wxPGLongStringDialogAdapter,
    release_wxPGLongStringDialogAdapter,
    cast_wxPGLongStringDialogAdapter,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

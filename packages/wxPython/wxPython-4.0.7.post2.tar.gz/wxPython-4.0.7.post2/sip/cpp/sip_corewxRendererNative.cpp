/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.16
 *
 *     Copyright: (c) 2018 by Total Control Software
 *     License:   wxWindows License
 */

#include "sipAPI_core.h"

        #include <wx/renderer.h>

        #include <wx/renderer.h>
        #include <wx/renderer.h>
        #include <wx/window.h>
        #include <wx/gdicmn.h>
        #include <wx/dc.h>
        #include <wx/gdicmn.h>
        #include <wx/renderer.h>


PyDoc_STRVAR(doc_wxRendererNative_DrawCheckBox, "DrawCheckBox(win, dc, rect, flags=0)\n"
"\n"
"Draw a check box.");

extern "C" {static PyObject *meth_wxRendererNative_DrawCheckBox(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawCheckBox(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawCheckBox);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawCheckBox(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawCheckBox, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawComboBoxDropButton, "DrawComboBoxDropButton(win, dc, rect, flags=0)\n"
"\n"
"Draw a button like the one used by wxComboBox to show a drop down\n"
"window.");

extern "C" {static PyObject *meth_wxRendererNative_DrawComboBoxDropButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawComboBoxDropButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawComboBoxDropButton);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawComboBoxDropButton(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawComboBoxDropButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawDropArrow, "DrawDropArrow(win, dc, rect, flags=0)\n"
"\n"
"Draw a drop down arrow that is suitable for use outside a combo box.");

extern "C" {static PyObject *meth_wxRendererNative_DrawDropArrow(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawDropArrow(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawDropArrow);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawDropArrow(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawDropArrow, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawFocusRect, "DrawFocusRect(win, dc, rect, flags=0)\n"
"\n"
"Draw a focus rectangle using the specified rectangle.");

extern "C" {static PyObject *meth_wxRendererNative_DrawFocusRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawFocusRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawFocusRect);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawFocusRect(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawFocusRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawHeaderButton, "DrawHeaderButton(win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int\n"
"\n"
"Draw the header control button (used, for example, by wxListCtrl).");

extern "C" {static PyObject *meth_wxRendererNative_DrawHeaderButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawHeaderButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE;
         ::wxHeaderButtonParams* params = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
            sipName_sortArrow,
            sipName_params,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|iEJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags, sipType_wxHeaderSortIconType, &sortArrow, sipType_wxHeaderButtonParams, &params))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawHeaderButton);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DrawHeaderButton(win,*dc,*rect,flags,sortArrow,params);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawHeaderButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawHeaderButtonContents, "DrawHeaderButtonContents(win, dc, rect, flags=0, sortArrow=HDR_SORT_ICON_NONE, params=None) -> int\n"
"\n"
"Draw the contents of a header control button (label, sort arrows,\n"
"etc.).");

extern "C" {static PyObject *meth_wxRendererNative_DrawHeaderButtonContents(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawHeaderButtonContents(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxHeaderSortIconType sortArrow = wxHDR_SORT_ICON_NONE;
         ::wxHeaderButtonParams* params = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
            sipName_sortArrow,
            sipName_params,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|iEJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags, sipType_wxHeaderSortIconType, &sortArrow, sipType_wxHeaderButtonParams, &params))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawHeaderButtonContents);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->DrawHeaderButtonContents(win,*dc,*rect,flags,sortArrow,params);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawHeaderButtonContents, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawItemSelectionRect, "DrawItemSelectionRect(win, dc, rect, flags=0)\n"
"\n"
"Draw a selection rectangle underneath the text as used e.g.");

extern "C" {static PyObject *meth_wxRendererNative_DrawItemSelectionRect(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawItemSelectionRect(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawItemSelectionRect);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawItemSelectionRect(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawItemSelectionRect, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawPushButton, "DrawPushButton(win, dc, rect, flags=0)\n"
"\n"
"Draw a blank push button that looks very similar to wxButton.");

extern "C" {static PyObject *meth_wxRendererNative_DrawPushButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawPushButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawPushButton);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawPushButton(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawPushButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawSplitterBorder, "DrawSplitterBorder(win, dc, rect, flags=0)\n"
"\n"
"Draw the border for sash window: this border must be such that the\n"
"sash drawn by DrawSplitterSash() blends into it well.");

extern "C" {static PyObject *meth_wxRendererNative_DrawSplitterBorder(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawSplitterBorder(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawSplitterBorder);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawSplitterBorder(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawSplitterBorder, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawSplitterSash, "DrawSplitterSash(win, dc, size, position, orient, flags=0)\n"
"\n"
"Draw a sash.");

extern "C" {static PyObject *meth_wxRendererNative_DrawSplitterSash(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawSplitterSash(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxSize* size;
        int sizeState = 0;
         ::wxCoord position;
         ::wxOrientation orient;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_size,
            sipName_position,
            sipName_orient,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1iE|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxSize, &size, &sizeState, &position, sipType_wxOrientation, &orient, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawSplitterSash);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawSplitterSash(win,*dc,*size,position,orient,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxSize *>(size),sipType_wxSize,sizeState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawSplitterSash, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawTreeItemButton, "DrawTreeItemButton(win, dc, rect, flags=0)\n"
"\n"
"Draw the expanded/collapsed icon for a tree control item.");

extern "C" {static PyObject *meth_wxRendererNative_DrawTreeItemButton(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawTreeItemButton(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawTreeItemButton);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawTreeItemButton(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawTreeItemButton, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawChoice, "DrawChoice(win, dc, rect, flags=0)\n"
"\n"
"Draw a native wxChoice.");

extern "C" {static PyObject *meth_wxRendererNative_DrawChoice(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawChoice(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawChoice);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawChoice(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawChoice, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawComboBox, "DrawComboBox(win, dc, rect, flags=0)\n"
"\n"
"Draw a native wxComboBox.");

extern "C" {static PyObject *meth_wxRendererNative_DrawComboBox(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawComboBox(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawComboBox);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawComboBox(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawComboBox, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawTextCtrl, "DrawTextCtrl(win, dc, rect, flags=0)\n"
"\n"
"Draw a native wxTextCtrl frame.");

extern "C" {static PyObject *meth_wxRendererNative_DrawTextCtrl(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawTextCtrl(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawTextCtrl);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawTextCtrl(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawTextCtrl, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_DrawRadioBitmap, "DrawRadioBitmap(win, dc, rect, flags=0)\n"
"\n"
"Draw a native wxRadioButton bitmap.");

extern "C" {static PyObject *meth_wxRendererNative_DrawRadioBitmap(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_DrawRadioBitmap(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxDC* dc;
        const  ::wxRect* rect;
        int rectState = 0;
        int flags = 0;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
            sipName_dc,
            sipName_rect,
            sipName_flags,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8J9J1|i", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win, sipType_wxDC, &dc, sipType_wxRect, &rect, &rectState, &flags))
        {
            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_DrawRadioBitmap);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipCpp->DrawRadioBitmap(win,*dc,*rect,flags);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxRect *>(rect),sipType_wxRect,rectState);

            if (PyErr_Occurred())
                return 0;

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_DrawRadioBitmap, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_GetCheckBoxSize, "GetCheckBoxSize(win) -> Size\n"
"\n"
"Returns the size of a check box.");

extern "C" {static PyObject *meth_wxRendererNative_GetCheckBoxSize(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetCheckBoxSize(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win))
        {
             ::wxSize*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetCheckBoxSize);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSize(sipCpp->GetCheckBoxSize(win));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSize,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetCheckBoxSize, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_GetHeaderButtonHeight, "GetHeaderButtonHeight(win) -> int\n"
"\n"
"Returns the height of a header button, either a fixed platform height\n"
"if available, or a generic height based on the win window's font.");

extern "C" {static PyObject *meth_wxRendererNative_GetHeaderButtonHeight(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetHeaderButtonHeight(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetHeaderButtonHeight);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetHeaderButtonHeight(win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetHeaderButtonHeight, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_GetHeaderButtonMargin, "GetHeaderButtonMargin(win) -> int\n"
"\n"
"Returns the horizontal margin on the left and right sides of header\n"
"button's label.");

extern "C" {static PyObject *meth_wxRendererNative_GetHeaderButtonMargin(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetHeaderButtonMargin(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
         ::wxWindow* win;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win))
        {
            int sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetHeaderButtonMargin);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->GetHeaderButtonMargin(win);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetHeaderButtonMargin, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_GetSplitterParams, "GetSplitterParams(win) -> SplitterRenderParams\n"
"\n"
"Get the splitter parameters, see wxSplitterRenderParams.");

extern "C" {static PyObject *meth_wxRendererNative_GetSplitterParams(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetSplitterParams(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxWindow* win;
         ::wxRendererNative *sipCpp;

        static const char *sipKwdList[] = {
            sipName_win,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "BJ8", &sipSelf, sipType_wxRendererNative, &sipCpp, sipType_wxWindow, &win))
        {
             ::wxSplitterRenderParams*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetSplitterParams);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxSplitterRenderParams(sipCpp->GetSplitterParams(win));
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxSplitterRenderParams,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetSplitterParams, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_GetVersion, "GetVersion() -> RendererVersion\n"
"\n"
"This function is used for version checking: Load() refuses to load any\n"
"shared libraries implementing an older or incompatible version.");

extern "C" {static PyObject *meth_wxRendererNative_GetVersion(PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetVersion(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;
    PyObject *sipOrigSelf = sipSelf;

    {
        const  ::wxRendererNative *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_wxRendererNative, &sipCpp))
        {
             ::wxRendererVersion*sipRes;

            if (!sipOrigSelf)
            {
                sipAbstractMethod(sipName_RendererNative, sipName_GetVersion);
                return SIP_NULLPTR;
            }

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::wxRendererVersion(sipCpp->GetVersion());
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromNewType(sipRes,sipType_wxRendererVersion,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetVersion, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_Get, "Get() -> RendererNative\n"
"\n"
"Return the currently used renderer.");

extern "C" {static PyObject *meth_wxRendererNative_Get(PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_Get(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRendererNative*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = & ::wxRendererNative::Get();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_Get, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_GetDefault, "GetDefault() -> RendererNative\n"
"\n"
"Return the default (native) implementation for this platform  this is\n"
"also the one used by default but this may be changed by calling Set()\n"
"in which case the return value of this method may be different from\n"
"the return value of Get().");

extern "C" {static PyObject *meth_wxRendererNative_GetDefault(PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetDefault(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRendererNative*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = & ::wxRendererNative::GetDefault();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetDefault, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_GetGeneric, "GetGeneric() -> RendererNative\n"
"\n"
"Return the generic implementation of the renderer.");

extern "C" {static PyObject *meth_wxRendererNative_GetGeneric(PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_GetGeneric(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        if (sipParseArgs(&sipParseErr, sipArgs, ""))
        {
             ::wxRendererNative*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes = & ::wxRendererNative::GetGeneric();
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_GetGeneric, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_Load, "Load(name) -> RendererNative\n"
"\n"
"Load the renderer from the specified DLL, the returned pointer must be\n"
"deleted by caller if not NULL when it is not used any more.");

extern "C" {static PyObject *meth_wxRendererNative_Load(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_Load(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
        const  ::wxString* name;
        int nameState = 0;

        static const char *sipKwdList[] = {
            sipName_name,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J1", sipType_wxString,&name, &nameState))
        {
             ::wxRendererNative*sipRes;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRendererNative::Load(*name);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::wxString *>(name),sipType_wxString,nameState);

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_Load, SIP_NULLPTR);

    return SIP_NULLPTR;
}


PyDoc_STRVAR(doc_wxRendererNative_Set, "Set(renderer) -> RendererNative\n"
"\n"
"Set the renderer to use, passing NULL reverts to using the default\n"
"renderer (the global renderer must always exist).");

extern "C" {static PyObject *meth_wxRendererNative_Set(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_wxRendererNative_Set(PyObject *, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = SIP_NULLPTR;

    {
         ::wxRendererNative* renderer;

        static const char *sipKwdList[] = {
            sipName_renderer,
        };

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, sipKwdList, SIP_NULLPTR, "J8", sipType_wxRendererNative, &renderer))
        {
             ::wxRendererNative*sipRes;

        if (!wxPyCheckForApp()) return NULL;

            PyErr_Clear();

            Py_BEGIN_ALLOW_THREADS
            sipRes =  ::wxRendererNative::Set(renderer);
            Py_END_ALLOW_THREADS

            if (PyErr_Occurred())
                return 0;

            return sipConvertFromType(sipRes,sipType_wxRendererNative,SIP_NULLPTR);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_RendererNative, sipName_Set, SIP_NULLPTR);

    return SIP_NULLPTR;
}


/* Call the instance's destructor. */
extern "C" {static void release_wxRendererNative(void *, int);}
static void release_wxRendererNative(void *sipCppV, int)
{
    Py_BEGIN_ALLOW_THREADS

    delete reinterpret_cast< ::wxRendererNative *>(sipCppV);

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_wxRendererNative(sipSimpleWrapper *);}
static void dealloc_wxRendererNative(sipSimpleWrapper *sipSelf)
{
    if (sipIsOwnedByPython(sipSelf))
    {
        release_wxRendererNative(sipGetAddress(sipSelf), 0);
    }
}


static PyMethodDef methods_wxRendererNative[] = {
    {SIP_MLNAME_CAST(sipName_DrawCheckBox), SIP_MLMETH_CAST(meth_wxRendererNative_DrawCheckBox), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawCheckBox)},
    {SIP_MLNAME_CAST(sipName_DrawChoice), SIP_MLMETH_CAST(meth_wxRendererNative_DrawChoice), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawChoice)},
    {SIP_MLNAME_CAST(sipName_DrawComboBox), SIP_MLMETH_CAST(meth_wxRendererNative_DrawComboBox), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawComboBox)},
    {SIP_MLNAME_CAST(sipName_DrawComboBoxDropButton), SIP_MLMETH_CAST(meth_wxRendererNative_DrawComboBoxDropButton), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawComboBoxDropButton)},
    {SIP_MLNAME_CAST(sipName_DrawDropArrow), SIP_MLMETH_CAST(meth_wxRendererNative_DrawDropArrow), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawDropArrow)},
    {SIP_MLNAME_CAST(sipName_DrawFocusRect), SIP_MLMETH_CAST(meth_wxRendererNative_DrawFocusRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawFocusRect)},
    {SIP_MLNAME_CAST(sipName_DrawHeaderButton), SIP_MLMETH_CAST(meth_wxRendererNative_DrawHeaderButton), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawHeaderButton)},
    {SIP_MLNAME_CAST(sipName_DrawHeaderButtonContents), SIP_MLMETH_CAST(meth_wxRendererNative_DrawHeaderButtonContents), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawHeaderButtonContents)},
    {SIP_MLNAME_CAST(sipName_DrawItemSelectionRect), SIP_MLMETH_CAST(meth_wxRendererNative_DrawItemSelectionRect), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawItemSelectionRect)},
    {SIP_MLNAME_CAST(sipName_DrawPushButton), SIP_MLMETH_CAST(meth_wxRendererNative_DrawPushButton), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawPushButton)},
    {SIP_MLNAME_CAST(sipName_DrawRadioBitmap), SIP_MLMETH_CAST(meth_wxRendererNative_DrawRadioBitmap), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawRadioBitmap)},
    {SIP_MLNAME_CAST(sipName_DrawSplitterBorder), SIP_MLMETH_CAST(meth_wxRendererNative_DrawSplitterBorder), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawSplitterBorder)},
    {SIP_MLNAME_CAST(sipName_DrawSplitterSash), SIP_MLMETH_CAST(meth_wxRendererNative_DrawSplitterSash), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawSplitterSash)},
    {SIP_MLNAME_CAST(sipName_DrawTextCtrl), SIP_MLMETH_CAST(meth_wxRendererNative_DrawTextCtrl), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawTextCtrl)},
    {SIP_MLNAME_CAST(sipName_DrawTreeItemButton), SIP_MLMETH_CAST(meth_wxRendererNative_DrawTreeItemButton), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_DrawTreeItemButton)},
    {SIP_MLNAME_CAST(sipName_Get), meth_wxRendererNative_Get, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRendererNative_Get)},
    {SIP_MLNAME_CAST(sipName_GetCheckBoxSize), SIP_MLMETH_CAST(meth_wxRendererNative_GetCheckBoxSize), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_GetCheckBoxSize)},
    {SIP_MLNAME_CAST(sipName_GetDefault), meth_wxRendererNative_GetDefault, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRendererNative_GetDefault)},
    {SIP_MLNAME_CAST(sipName_GetGeneric), meth_wxRendererNative_GetGeneric, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRendererNative_GetGeneric)},
    {SIP_MLNAME_CAST(sipName_GetHeaderButtonHeight), SIP_MLMETH_CAST(meth_wxRendererNative_GetHeaderButtonHeight), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_GetHeaderButtonHeight)},
    {SIP_MLNAME_CAST(sipName_GetHeaderButtonMargin), SIP_MLMETH_CAST(meth_wxRendererNative_GetHeaderButtonMargin), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_GetHeaderButtonMargin)},
    {SIP_MLNAME_CAST(sipName_GetSplitterParams), SIP_MLMETH_CAST(meth_wxRendererNative_GetSplitterParams), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_GetSplitterParams)},
    {SIP_MLNAME_CAST(sipName_GetVersion), meth_wxRendererNative_GetVersion, METH_VARARGS, SIP_MLDOC_CAST(doc_wxRendererNative_GetVersion)},
    {SIP_MLNAME_CAST(sipName_Load), SIP_MLMETH_CAST(meth_wxRendererNative_Load), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_Load)},
    {SIP_MLNAME_CAST(sipName_Set), SIP_MLMETH_CAST(meth_wxRendererNative_Set), METH_VARARGS|METH_KEYWORDS, SIP_MLDOC_CAST(doc_wxRendererNative_Set)}
};

sipVariableDef variables_wxRendererNative[] = {
    {PropertyVariable, sipName_Version, &methods_wxRendererNative[22], SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
};

PyDoc_STRVAR(doc_wxRendererNative, "First, a brief introduction to wxRendererNative and why it is needed.");


sipClassTypeDef sipTypeDef__core_wxRendererNative = {
    {
        -1,
        SIP_NULLPTR,
        SIP_NULLPTR,
        SIP_TYPE_ABSTRACT|SIP_TYPE_CLASS,
        sipNameNr_wxRendererNative,
        {SIP_NULLPTR},
        SIP_NULLPTR
    },
    {
        sipNameNr_RendererNative,
        {0, 0, 1},
        25, methods_wxRendererNative,
        0, SIP_NULLPTR,
        1, variables_wxRendererNative,
        {SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR, SIP_NULLPTR},
    },
    doc_wxRendererNative,
    -1,
    -1,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#if PY_MAJOR_VERSION >= 3
    SIP_NULLPTR,
    SIP_NULLPTR,
#else
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
#endif
    dealloc_wxRendererNative,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    release_wxRendererNative,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR,
    SIP_NULLPTR
};

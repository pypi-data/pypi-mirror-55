//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2018 by Total Control Software
// License:   wxWindows License

%Module( name=wx._glcanvas,
         keyword_arguments="All",
         use_argument_names=True,
         all_raise_py_exception=True,
         language="C++")
{
    %AutoPyName(remove_leading="wx")
};

%Copying
    Copyright: (c) 2018 by Total Control Software
    License:   wxWindows License
%End

%DefaultDocstringFormat(name="deindented")

%Extract(id=pycode_glcanvas, order=5)
# This file is generated by wxPython's SIP generator.  Do not edit by hand.
#
# Copyright: (c) 2018 by Total Control Software
# License:   wxWindows License

"""
These classes enable viewing and interacting with an OpenGL context in a wx.Window.
"""

from ._glcanvas import *

%End

//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wxPython/wxpy_api.h>
#include <wx/glcanvas.h>
#if !wxUSE_GLCANVAS
class wxGLContext;
class wxGLCanvas;

enum  {
    WX_GL_RGBA,
    WX_GL_BUFFER_SIZE,
    WX_GL_LEVEL,
    WX_GL_DOUBLEBUFFER,
    WX_GL_STEREO,
    WX_GL_AUX_BUFFERS,
    WX_GL_MIN_RED,
    WX_GL_MIN_GREEN,
    WX_GL_MIN_BLUE,
    WX_GL_MIN_ALPHA,
    WX_GL_DEPTH_SIZE,
    WX_GL_STENCIL_SIZE,
    WX_GL_MIN_ACCUM_RED,
    WX_GL_MIN_ACCUM_GREEN,
    WX_GL_MIN_ACCUM_BLUE,
    WX_GL_MIN_ACCUM_ALPHA,
    WX_GL_SAMPLE_BUFFERS,
    WX_GL_SAMPLES,
    WX_GL_CORE_PROFILE,
    WX_GL_MAJOR_VERSION,
    WX_GL_MINOR_VERSION,
};

class wxGLContext : public wxObject {
public:
    wxGLContext(wxGLCanvas *win, const wxGLContext *other=NULL)
        { wxPyRaiseNotImplemented(); }

    virtual bool SetCurrent(const wxGLCanvas &win) const 
        { return false; }

};

class wxGLCanvas : public wxWindow {
public:
    wxGLCanvas(wxWindow *parent, wxWindowID id=wxID_ANY, const int *attribList=NULL, const wxPoint &pos=wxDefaultPosition, const wxSize &size=wxDefaultSize, long style=0, const wxString &name="GLCanvas", const wxPalette &palette=wxNullPalette)
        { wxPyRaiseNotImplemented(); }

    bool SetColour(const wxString &colour)
        { return false; }

    bool SetCurrent(const wxGLContext &context) const 
        { return false; }

    virtual bool SwapBuffers()
        { return false; }

    static bool IsDisplaySupported(const int *attribList)
        { wxPyRaiseNotImplemented(); return false; }

    static bool IsExtensionSupported(const char *extension)
        { wxPyRaiseNotImplemented(); return false; }

};
#endif //!wxUSE_GLCANVAS

%End

%Import _core.sip


//---------------------------------------------------------------------------

enum 
{
    WX_GL_RGBA,
    WX_GL_BUFFER_SIZE,
    WX_GL_LEVEL,
    WX_GL_DOUBLEBUFFER,
    WX_GL_STEREO,
    WX_GL_AUX_BUFFERS,
    WX_GL_MIN_RED,
    WX_GL_MIN_GREEN,
    WX_GL_MIN_BLUE,
    WX_GL_MIN_ALPHA,
    WX_GL_DEPTH_SIZE,
    WX_GL_STENCIL_SIZE,
    WX_GL_MIN_ACCUM_RED,
    WX_GL_MIN_ACCUM_GREEN,
    WX_GL_MIN_ACCUM_BLUE,
    WX_GL_MIN_ACCUM_ALPHA,
    WX_GL_SAMPLE_BUFFERS,
    WX_GL_SAMPLES,
    WX_GL_CORE_PROFILE,
    WX_GL_MAJOR_VERSION,
    WX_GL_MINOR_VERSION
};

class wxGLContext : wxObject
{
    %Docstring
        GLContext(win, other=None)
        
        An instance of a wxGLContext represents the state of an OpenGL state
        machine and the connection between OpenGL and the system.
    %End
    %TypeHeaderCode
        #include <wx/glcanvas.h>
    %End

public:
    wxGLContext(
        wxGLCanvas * win,
        const wxGLContext * other = NULL
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    virtual
    bool SetCurrent(
        const wxGLCanvas & win
    ) const;
    %Docstring
        SetCurrent(win) -> bool
        
        Makes the OpenGL state that is represented by this rendering context
        current with the wxGLCanvas win.
    %End

    private:
        wxGLContext(const wxGLContext&);


    public:


};  // end of class wxGLContext


class wxGLCanvas : wxWindow
{
    %Docstring
        GLCanvas(parent, id=wx.ID_ANY, attribList=None, pos=wx.DefaultPosition, size=wx.DefaultSize, style=0, name='GLCanvas', palette=wx.NullPalette)
        
        wxGLCanvas is a class for displaying OpenGL graphics.
    %End
    %TypeHeaderCode
        #include <wx/glcanvas.h>
    %End

public:
    wxGLCanvas(
             wxWindow* parent, wxWindowID id=wxID_ANY, wxArrayInt* attribList=NULL,
             const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize,
             long style=0, const wxString& name="GLCanvas",
             const wxPalette& palette=wxNullPalette) [ (
             wxWindow* parent, wxWindowID id=wxID_ANY, const int* attribList=NULL,
             const wxPoint& pos=wxDefaultPosition, const wxSize& size=wxDefaultSize,
             long style=0, const wxString& name="GLCanvas",
             const wxPalette& palette=wxNullPalette) ];
    %MethodCode
        const int* attribPtr = NULL;
        if (attribList) {
            attribList->push_back(0); // ensure it is zero-terminated
            attribPtr = &attribList->front();
        }
        sipCpp = new sipwxGLCanvas(parent, id, attribPtr, *pos, *size, style, *name, *palette);
    %End

    bool SetColour(
        const wxString & colour
    );
    %Docstring
        SetColour(colour) -> bool
        
        Sets the current colour for this window (using glcolor3f()), using the
        wxWidgets colour database to find a named colour.
    %End

    bool SetCurrent(
        const wxGLContext & context
    ) const;
    %Docstring
        SetCurrent(context) -> bool
        
        Makes the OpenGL state that is represented by the OpenGL rendering
        context context current, i.e.
    %End

    bool SwapBuffers();
    %Docstring
        SwapBuffers() -> bool
        
        Swaps the double-buffer of this window, making the back-buffer the
        front-buffer and vice versa, so that the output of the previous OpenGL
        commands is displayed on the window.
    %End

    static
    bool IsDisplaySupported(
        wxArrayInt* attribList
    );
    %Docstring
        IsDisplaySupported(attribList) -> bool
        
        Determines if a canvas having the specified attributes is available.
    %End
    %MethodCode
        const int* attribPtr = NULL;
        if (attribList) {
            attribList->push_back(0); // ensure it is zero-terminated
            attribPtr = &attribList->front();
        }
        sipRes = wxGLCanvas::IsDisplaySupported(attribPtr);
    %End

    static
    bool IsExtensionSupported(
        const char * extension
    );
    %Docstring
        IsExtensionSupported(extension) -> bool
        
        Returns true if the extension with given name is supported.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


};  // end of class wxGLCanvas


%Extract(id=pycode_glcanvas, order=10)
import wx

%End

const int wxUSE_GLCANVAS;

//---------------------------------------------------------------------------


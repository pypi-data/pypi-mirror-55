//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2018 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/srchctrl.h>
%End


//---------------------------------------------------------------------------

wxEventType wxEVT_SEARCHCTRL_CANCEL_BTN   /PyName=wxEVT_SEARCHCTRL_CANCEL_BTN/;

wxEventType wxEVT_SEARCHCTRL_SEARCH_BTN   /PyName=wxEVT_SEARCHCTRL_SEARCH_BTN/;

const char* wxSearchCtrlNameStr;

class wxSearchCtrl : wxControl
{
    %Docstring
        SearchCtrl()
        SearchCtrl(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=SearchCtrlNameStr)
        
        A search control is a composite control with a search button, a text
        control, and a cancel button.
    %End
    %TypeHeaderCode
        #include <wx/srchctrl.h>
    %End

public:
    wxSearchCtrl();
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    wxSearchCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxSearchCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    ~wxSearchCtrl();

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxString & value = wxEmptyString,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = 0,
        const wxValidator & validator = wxDefaultValidator,
        const wxString & name = wxSearchCtrlNameStr
    );
    %Docstring
        Create(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=SearchCtrlNameStr) -> bool
    %End

    wxMenu * GetMenu();
    %Docstring
        GetMenu() -> Menu
        
        Returns a pointer to the search control's menu object or NULL if there
        is no menu attached.
    %End

    bool IsSearchButtonVisible() const;
    %Docstring
        IsSearchButtonVisible() -> bool
        
        Returns the search button visibility value.
    %End

    bool IsCancelButtonVisible() const;
    %Docstring
        IsCancelButtonVisible() -> bool
        
        Returns the cancel button's visibility state.
    %End

    void SetMenu(
        wxMenu * menu   /Transfer/
    );
    %Docstring
        SetMenu(menu)
        
        Sets the search control's menu object.
    %End

    void ShowCancelButton(
        bool show
    );
    %Docstring
        ShowCancelButton(show)
        
        Shows or hides the cancel button.
    %End

    void ShowSearchButton(
        bool show
    );
    %Docstring
        ShowSearchButton(show)
        
        Sets the search button visibility value on the search control.
    %End

    void SetDescriptiveText(
        const wxString & text
    );
    %Docstring
        SetDescriptiveText(text)
        
        Set the text to be displayed in the search control when the user has
        not yet typed anything in it.
    %End

    wxString GetDescriptiveText() const;
    %Docstring
        GetDescriptiveText() -> String
        
        Return the text displayed when there is not yet any user input.
    %End

    void SetSearchBitmap(const wxBitmap* bmp);
    %Docstring
        SetSearchBitmap(bmp)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxSearchCtrl_SetSearchBitmap(sipCpp, bmp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxSearchCtrl_SetSearchBitmap(wxSearchCtrl* self, const wxBitmap* bmp)
    {
        #ifdef __WXMAC__
        #else
            self->SetSearchBitmap(*bmp);
        #endif
    }
    %End

    void SetSearchMenuBitmap(const wxBitmap* bmp);
    %Docstring
        SetSearchMenuBitmap(bmp)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxSearchCtrl_SetSearchMenuBitmap(sipCpp, bmp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxSearchCtrl_SetSearchMenuBitmap(wxSearchCtrl* self, const wxBitmap* bmp)
    {
        #ifdef __WXMAC__
        #else
            self->SetSearchMenuBitmap(*bmp);
        #endif
    }
    %End

    void SetCancelBitmap(const wxBitmap* bmp);
    %Docstring
        SetCancelBitmap(bmp)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxSearchCtrl_SetCancelBitmap(sipCpp, bmp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxSearchCtrl_SetCancelBitmap(wxSearchCtrl* self, const wxBitmap* bmp)
    {
        #ifdef __WXMAC__
        #else
            self->SetCancelBitmap(*bmp);
        #endif
    }
    %End

    bool SetMargins(
        const wxPoint & pt
    );
    %Docstring
        SetMargins(pt) -> bool
        SetMargins(left, top=-1) -> bool
        
        Attempts to set the control margins.
    %End

    bool SetMargins(
        wxCoord left,
        wxCoord top = -1
    );

    void AppendText(
        const wxString & text
    );
    %Docstring
        AppendText(text)
        
        Appends the text to the end of the text control.
    %End

    bool AutoComplete(
        const wxArrayString & choices
    );
    %Docstring
        AutoComplete(choices) -> bool
        AutoComplete(completer) -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using the given choices.
    %End

    bool AutoComplete(
        wxTextCompleter * completer   /Transfer/
    );

    bool AutoCompleteFileNames();
    %Docstring
        AutoCompleteFileNames() -> bool
        
        Call this function to enable auto-completion of the text typed in a
        single-line text control using all valid file system paths.
    %End

    bool AutoCompleteDirectories();
    %Docstring
        AutoCompleteDirectories() -> bool
        
        Call this function to enable auto-completion of the text using the
        file system directories.
    %End

    bool CanCopy() const;
    %Docstring
        CanCopy() -> bool
        
        Returns true if the selection can be copied to the clipboard.
    %End

    bool CanCut() const;
    %Docstring
        CanCut() -> bool
        
        Returns true if the selection can be cut to the clipboard.
    %End

    bool CanPaste() const;
    %Docstring
        CanPaste() -> bool
        
        Returns true if the contents of the clipboard can be pasted into the
        text control.
    %End

    bool CanRedo() const;
    %Docstring
        CanRedo() -> bool
        
        Returns true if there is a redo facility available and the last
        operation can be redone.
    %End

    bool CanUndo() const;
    %Docstring
        CanUndo() -> bool
        
        Returns true if there is an undo facility available and the last
        operation can be undone.
    %End

    void ChangeValue(
        const wxString & value
    );
    %Docstring
        ChangeValue(value)
        
        Sets the new text control value.
    %End

    void Clear();
    %Docstring
        Clear()
        
        Clears the text in the control.
    %End

    void Copy();
    %Docstring
        Copy()
        
        Copies the selected text to the clipboard.
    %End

    void Cut();
    %Docstring
        Cut()
        
        Copies the selected text to the clipboard and removes it from the
        control.
    %End

    long GetInsertionPoint() const;
    %Docstring
        GetInsertionPoint() -> long
        
        Returns the insertion point, or cursor, position.
    %End

    wxTextPos GetLastPosition() const;
    %Docstring
        GetLastPosition() -> TextPos
        
        Returns the zero based index of the last position in the text control,
        which is equal to the number of characters in the control.
    %End

    wxString GetRange(
        long from_,
        long to_
    ) const;
    %Docstring
        GetRange(from_, to_) -> String
        
        Returns the string containing the text starting in the positions from
        and up to to in the control.
    %End

    void GetSelection(
        long * from   /Out/,
        long * to   /Out/
    ) const;
    %Docstring
        GetSelection() -> (from, to)
        
        Gets the current selection span.
    %End

    wxString GetStringSelection() const;
    %Docstring
        GetStringSelection() -> String
        
        Gets the text currently selected in the control.
    %End

    wxString GetValue() const;
    %Docstring
        GetValue() -> String
        
        Gets the contents of the control.
    %End

    bool IsEditable() const;
    %Docstring
        IsEditable() -> bool
        
        Returns true if the controls contents may be edited by user (note that
        it always can be changed by the program).
    %End

    bool IsEmpty() const;
    %Docstring
        IsEmpty() -> bool
        
        Returns true if the control is currently empty.
    %End

    void Paste();
    %Docstring
        Paste()
        
        Pastes text from the clipboard to the text item.
    %End

    void Redo();
    %Docstring
        Redo()
        
        If there is a redo facility and the last operation can be redone,
        redoes the last operation.
    %End

    void Remove(
        long from_,
        long to_
    );
    %Docstring
        Remove(from_, to_)
        
        Removes the text starting at the first given position up to (but not
        including) the character at the last position.
    %End

    void Replace(
        long from_,
        long to_,
        const wxString & value
    );
    %Docstring
        Replace(from_, to_, value)
        
        Replaces the text starting at the first position up to (but not
        including) the character at the last position with the given text.
    %End

    void SetEditable(
        bool editable
    );
    %Docstring
        SetEditable(editable)
        
        Makes the text item editable or read-only, overriding the
        wxTE_READONLY flag.
    %End

    void SetInsertionPoint(
        long pos
    );
    %Docstring
        SetInsertionPoint(pos)
        
        Sets the insertion point at the given position.
    %End

    void SetInsertionPointEnd();
    %Docstring
        SetInsertionPointEnd()
        
        Sets the insertion point at the end of the text control.
    %End

    void SetMaxLength(
        unsigned long len
    );
    %Docstring
        SetMaxLength(len)
        
        This function sets the maximum number of characters the user can enter
        into the control.
    %End

    void SetSelection(
        long from_,
        long to_
    );
    %Docstring
        SetSelection(from_, to_)
        
        Selects the text starting at the first position up to (but not
        including) the character at the last position.
    %End

    void SelectAll();
    %Docstring
        SelectAll()
        
        Selects all text in the control.
    %End

    void SelectNone();
    %Docstring
        SelectNone()
        
        Deselects selected text in the control.
    %End

    bool SetHint(
        const wxString & hint
    );
    %Docstring
        SetHint(hint) -> bool
        
        Sets a hint shown in an empty unfocused text control.
    %End

    wxString GetHint() const;
    %Docstring
        GetHint() -> String
        
        Returns the current hint string.
    %End

    wxPoint GetMargins() const;
    %Docstring
        GetMargins() -> Point
        
        Returns the margins used by the control.
    %End

    void SetValue(
        const wxString & value
    );
    %Docstring
        SetValue(value)
        
        Sets the new text control value.
    %End

    void Undo();
    %Docstring
        Undo()
        
        If there is an undo facility and the last operation can be undone,
        undoes the last operation.
    %End

    void WriteText(
        const wxString & text
    );
    %Docstring
        WriteText(text)
        
        Writes the text into the text control at the current insertion
        position.
    %End

    void DiscardEdits();
    %Docstring
        DiscardEdits()
        
        Resets the internal modified flag as if the current changes had been
        saved.
    %End

    bool EmulateKeyPress(
        const wxKeyEvent & event
    );
    %Docstring
        EmulateKeyPress(event) -> bool
        
        This function inserts into the control the character which would have
        been inserted if the given key event had occurred in the text control.
    %End

    const wxTextAttr & GetDefaultStyle() const;
    %Docstring
        GetDefaultStyle() -> TextAttr
        
        Returns the style currently used for the new text.
    %End

    int GetLineLength(
        long lineNo
    ) const;
    %Docstring
        GetLineLength(lineNo) -> int
        
        Gets the length of the specified line, not including any trailing
        newline character(s).
    %End

    wxString GetLineText(
        long lineNo
    ) const;
    %Docstring
        GetLineText(lineNo) -> String
        
        Returns the contents of a given line in the text control, not
        including any trailing newline character(s).
    %End

    int GetNumberOfLines() const;
    %Docstring
        GetNumberOfLines() -> int
        
        Returns the number of lines in the text control buffer.
    %End

    bool GetStyle(
        long position,
        wxTextAttr & style
    );
    %Docstring
        GetStyle(position, style) -> bool
        
        Returns the style at this position in the text control.
    %End

    wxTextCtrlHitTestResult HitTest(
        const wxPoint & pt,
        long * pos   /Out/
    ) const   /PyName=HitTestPos/;
    %Docstring
        HitTestPos(pt) -> (TextCtrlHitTestResult, pos)
        
        Finds the position of the character at the specified point.
    %End

    wxTextCtrlHitTestResult HitTest(
        const wxPoint & pt,
        wxTextCoord * col   /Out/,
        wxTextCoord * row   /Out/
    ) const;
    %Docstring
        HitTest(pt) -> (TextCtrlHitTestResult, col, row)
        
        Finds the row and column of the character at the specified point.
    %End

    bool IsModified() const;
    %Docstring
        IsModified() -> bool
        
        Returns true if the text has been modified by user.
    %End

    bool IsMultiLine() const;
    %Docstring
        IsMultiLine() -> bool
        
        Returns true if this is a multi line edit control and false otherwise.
    %End

    bool IsSingleLine() const;
    %Docstring
        IsSingleLine() -> bool
        
        Returns true if this is a single line edit control and false
        otherwise.
    %End

    void MarkDirty();
    %Docstring
        MarkDirty()
        
        Mark text as modified (dirty).
    %End

    bool PositionToXY(
        long pos,
        long * x   /Out/,
        long * y   /Out/
    ) const;
    %Docstring
        PositionToXY(pos) -> (bool, x, y)
        
        Converts given position to a zero-based column, line number pair.
    %End

    wxPoint PositionToCoords(
        long pos
    ) const;
    %Docstring
        PositionToCoords(pos) -> Point
        
        Converts given text position to client coordinates in pixels.
    %End

    bool SetDefaultStyle(
        const wxTextAttr & style
    );
    %Docstring
        SetDefaultStyle(style) -> bool
        
        Changes the default style to use for the new text which is going to be
        added to the control using WriteText() or AppendText().
    %End

    void SetModified(
        bool modified
    );
    %Docstring
        SetModified(modified)
        
        Marks the control as being modified by the user or not.
    %End

    bool SetStyle(
        long start,
        long end,
        const wxTextAttr & style
    );
    %Docstring
        SetStyle(start, end, style) -> bool
        
        Changes the style of the given range.
    %End

    void ShowPosition(
        long pos
    );
    %Docstring
        ShowPosition(pos)
        
        Makes the line containing the given position visible.
    %End

    long XYToPosition(
        long x,
        long y
    ) const;
    %Docstring
        XYToPosition(x, y) -> long
        
        Converts the given zero based column and line number to a position.
    %End

    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL) -> VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    void write(const wxString* text);
    %Docstring
        write(text)
        
        Append text to the textctrl, for file-like compatibility.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxSearchCtrl_write(sipCpp, text);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxSearchCtrl_write(wxSearchCtrl* self, const wxString* text)
    {
        self->AppendText(*text);
    }
    %End

    void flush();
    %Docstring
        flush()
        
        NOP, for file-like compatibility.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxSearchCtrl_flush(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxSearchCtrl_flush(wxSearchCtrl* self)
    {
        
    }
    %End

    %Property(name=SearchButtonVisible, get=IsSearchButtonVisible, set=ShowSearchButton)
    %Property(name=CancelButtonVisible, get=IsCancelButtonVisible, set=ShowCancelButton)
    public:


    %Property(name=DefaultStyle, get=GetDefaultStyle, set=SetDefaultStyle)
    %Property(name=DescriptiveText, get=GetDescriptiveText, set=SetDescriptiveText)
    %Property(name=Hint, get=GetHint, set=SetHint)
    %Property(name=InsertionPoint, get=GetInsertionPoint, set=SetInsertionPoint)
    %Property(name=LastPosition, get=GetLastPosition)
    %Property(name=Margins, get=GetMargins, set=SetMargins)
    %Property(name=Menu, get=GetMenu, set=SetMenu)
    %Property(name=NumberOfLines, get=GetNumberOfLines)
    %Property(name=StringSelection, get=GetStringSelection)
    %Property(name=Value, get=GetValue, set=SetValue)
    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


};  // end of class wxSearchCtrl


%Extract(id=pycode_core)
EVT_SEARCHCTRL_CANCEL_BTN = wx.PyEventBinder( wxEVT_SEARCHCTRL_CANCEL_BTN, 1)
EVT_SEARCHCTRL_SEARCH_BTN = wx.PyEventBinder( wxEVT_SEARCHCTRL_SEARCH_BTN, 1)

# deprecated wxEVT aliases
wxEVT_COMMAND_SEARCHCTRL_CANCEL_BTN  = wxEVT_SEARCHCTRL_CANCEL_BTN
wxEVT_COMMAND_SEARCHCTRL_SEARCH_BTN  = wxEVT_SEARCHCTRL_SEARCH_BTN

%End


//---------------------------------------------------------------------------


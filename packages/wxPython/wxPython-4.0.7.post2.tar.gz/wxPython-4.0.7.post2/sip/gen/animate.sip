//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2018 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _adv.sip
//
//---------------------------------------------------------------------------

//---------------------------------------------------------------------------

const int wxAC_NO_AUTORESIZE;
const int wxAC_DEFAULT_STYLE;
enum wxAnimationType
{
    wxANIMATION_TYPE_INVALID,
    wxANIMATION_TYPE_GIF,
    wxANIMATION_TYPE_ANI,
    wxANIMATION_TYPE_ANY
};

class wxAnimation : wxObject
{
    %Docstring
        Animation()
        Animation(anim)
        Animation(name, type=ANIMATION_TYPE_ANY)
        
        This class encapsulates the concept of a platform-dependent animation.
    %End
    %TypeHeaderCode
        #include <wx/animate.h>
    %End

public:
    wxAnimation();

    wxAnimation(
        const wxAnimation & anim
    );

    wxAnimation(
        const wxString & name,
        wxAnimationType type = wxANIMATION_TYPE_ANY
    );

    virtual
    ~wxAnimation();

    virtual
    int GetDelay(
        unsigned int i
    ) const;
    %Docstring
        GetDelay(i) -> int
        
        Returns the delay for the i-th frame in milliseconds.
    %End

    virtual
    wxImage GetFrame(
        unsigned int i
    ) const;
    %Docstring
        GetFrame(i) -> wx.Image
        
        Returns the i-th frame as a wxImage.
    %End

    virtual
    unsigned int GetFrameCount() const;
    %Docstring
        GetFrameCount() -> unsignedint
        
        Returns the number of frames for this animation.
    %End

    virtual
    wxSize GetSize() const;
    %Docstring
        GetSize() -> wx.Size
        
        Returns the size of the animation.
    %End

    virtual
    bool IsOk() const;
    %Docstring
        IsOk() -> bool
        
        Returns true if animation data is present.
    %End

    virtual
    bool Load(
        wxInputStream & stream,
        wxAnimationType type = wxANIMATION_TYPE_ANY
    );
    %Docstring
        Load(stream, type=ANIMATION_TYPE_ANY) -> bool
        
        Loads an animation from the given stream.
    %End

    virtual
    bool LoadFile(
        const wxString & name,
        wxAnimationType type = wxANIMATION_TYPE_ANY
    );
    %Docstring
        LoadFile(name, type=ANIMATION_TYPE_ANY) -> bool
        
        Loads an animation from a file.
    %End

    public:


    %Property(name=FrameCount, get=GetFrameCount)
    %Property(name=Size, get=GetSize)
};  // end of class wxAnimation


const char* wxAnimationCtrlNameStr;

wxAnimation wxNullAnimation;

class wxAnimationCtrl : wxControl
{
    %Docstring
        AnimationCtrl(parent, id=wx.ID_ANY, anim=NullAnimation, pos=wx.DefaultPosition, size=wx.DefaultSize, style=AC_DEFAULT_STYLE, name=AnimationCtrlNameStr)
        
        This is a static control which displays an animation.
    %End
    %TypeHeaderCode
        #include <wx/animate.h>
    %End

public:
    wxAnimationCtrl(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxAnimation & anim = wxNullAnimation,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxAC_DEFAULT_STYLE,
        const wxString & name = wxAnimationCtrlNameStr
    );
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    bool Create(
        wxWindow * parent   /TransferThis/,
        wxWindowID id = wxID_ANY,
        const wxAnimation & anim = wxNullAnimation,
        const wxPoint & pos = wxDefaultPosition,
        const wxSize & size = wxDefaultSize,
        long style = wxAC_DEFAULT_STYLE,
        const wxString & name = wxAnimationCtrlNameStr
    );
    %Docstring
        Create(parent, id=wx.ID_ANY, anim=NullAnimation, pos=wx.DefaultPosition, size=wx.DefaultSize, style=AC_DEFAULT_STYLE, name=AnimationCtrlNameStr) -> bool
        
        Creates the control with the given anim animation.
    %End

    wxAnimation GetAnimation() const;
    %Docstring
        GetAnimation() -> Animation
        
        Returns the animation associated with this control.
    %End

    wxBitmap GetInactiveBitmap() const;
    %Docstring
        GetInactiveBitmap() -> wx.Bitmap
        
        Returns the inactive bitmap shown in this control when the; see
        SetInactiveBitmap() for more info.
    %End

    bool IsPlaying() const;
    %Docstring
        IsPlaying() -> bool
        
        Returns true if the animation is being played.
    %End

    bool LoadFile(
        const wxString & file,
        wxAnimationType animType = wxANIMATION_TYPE_ANY
    );
    %Docstring
        LoadFile(file, animType=ANIMATION_TYPE_ANY) -> bool
        
        Loads the animation from the given file and calls SetAnimation().
    %End

    bool Load(
        wxInputStream & file,
        wxAnimationType animType = wxANIMATION_TYPE_ANY
    );
    %Docstring
        Load(file, animType=ANIMATION_TYPE_ANY) -> bool
        
        Loads the animation from the given stream and calls SetAnimation().
    %End

    bool Play();
    %Docstring
        Play() -> bool
        
        Starts playing the animation.
    %End

    void SetAnimation(
        const wxAnimation & anim
    );
    %Docstring
        SetAnimation(anim)
        
        Sets the animation to play in this control.
    %End

    void SetInactiveBitmap(
        const wxBitmap & bmp
    );
    %Docstring
        SetInactiveBitmap(bmp)
        
        Sets the bitmap to show on the control when it's not playing an
        animation.
    %End

    void Stop();
    %Docstring
        Stop()
        
        Stops playing the animation.
    %End

    public:
    virtual wxPoint GetClientAreaOrigin() const;
    virtual bool Validate();
    virtual bool TransferDataToWindow();
    virtual bool TransferDataFromWindow();
    virtual void InitDialog();
    virtual bool AcceptsFocus() const;
    virtual bool AcceptsFocusRecursively() const;
    virtual bool AcceptsFocusFromKeyboard() const;
    virtual void AddChild( wxWindowBase *child );
    virtual void RemoveChild( wxWindowBase *child );
    virtual void InheritAttributes();
    virtual bool ShouldInheritColours() const;
    virtual void OnInternalIdle();
    virtual wxWindow *GetMainWindowOfCompositeControl();
    virtual bool InformFirstDirection(int direction, int size, int availableOtherDir);
    virtual void SetCanFocus(bool canFocus);
    virtual bool Destroy();
    virtual void SetValidator( const wxValidator &validator );
    virtual wxValidator* GetValidator();


    protected:
    virtual bool ProcessEvent(wxEvent & event);
    virtual void DoEnable(bool enable);
    virtual void DoGetPosition(int *x, int *y) const;
    virtual void DoGetSize(int *width, int *height) const;
    virtual void DoGetClientSize(int *width, int *height) const;
    virtual wxSize DoGetBestSize() const;
    virtual wxSize DoGetBestClientSize() const;
    virtual void DoSetSize(int x, int y, int width, int height, int sizeFlags);
    virtual void DoSetClientSize(int width, int height);
    virtual void DoSetSizeHints( int minW, int minH, int maxW, int maxH, int incW, int incH );
    virtual wxSize DoGetBorderSize() const;
    virtual void DoMoveWindow(int x, int y, int width, int height);
    virtual void DoSetWindowVariant( wxWindowVariant variant);
    virtual wxBorder GetDefaultBorder() const;
    virtual wxBorder GetDefaultBorderForControl() const;
    virtual void DoFreeze();
    virtual void DoThaw();
    virtual bool HasTransparentBackground();
    virtual bool TryBefore(wxEvent& event);
    virtual bool TryAfter(wxEvent& event);


    public:


    static
    wxVisualAttributes GetClassDefaultAttributes(
        wxWindowVariant variant = wxWINDOW_VARIANT_NORMAL
    );
    %Docstring
        GetClassDefaultAttributes(variant=wx.WINDOW_VARIANT_NORMAL) -> wx.VisualAttributes
    %End
    %PreMethodCode
        if (!wxPyCheckForApp()) return NULL;
    %End

    public:


    %Property(name=Animation, get=GetAnimation, set=SetAnimation)
    %Property(name=InactiveBitmap, get=GetInactiveBitmap, set=SetInactiveBitmap)
};  // end of class wxAnimationCtrl



//---------------------------------------------------------------------------


//---------------------------------------------------------------------------
// This file is generated by wxPython's SIP generator.  Do not edit by hand.
//
// Copyright: (c) 2018 by Total Control Software
// License:   wxWindows License
//
// This file will be included by _core.sip
//
//---------------------------------------------------------------------------

%ModuleHeaderCode
#include <wx/gdicmn.h>
typedef wxPoint2DDouble wxPoint2D;
typedef wxRect2DDouble wxRect2D;
%End


//---------------------------------------------------------------------------

enum wxAntialiasMode
{
    wxANTIALIAS_NONE,
    wxANTIALIAS_DEFAULT
};

enum wxInterpolationQuality
{
    wxINTERPOLATION_DEFAULT,
    wxINTERPOLATION_NONE,
    wxINTERPOLATION_FAST,
    wxINTERPOLATION_GOOD,
    wxINTERPOLATION_BEST
};

enum wxCompositionMode
{
    wxCOMPOSITION_INVALID,
    wxCOMPOSITION_CLEAR,
    wxCOMPOSITION_SOURCE,
    wxCOMPOSITION_OVER,
    wxCOMPOSITION_IN,
    wxCOMPOSITION_OUT,
    wxCOMPOSITION_ATOP,
    wxCOMPOSITION_DEST,
    wxCOMPOSITION_DEST_OVER,
    wxCOMPOSITION_DEST_IN,
    wxCOMPOSITION_DEST_OUT,
    wxCOMPOSITION_DEST_ATOP,
    wxCOMPOSITION_XOR,
    wxCOMPOSITION_ADD
};

class wxGraphicsObject : wxObject
{
    %Docstring
        This class is the superclass of native graphics objects like pens etc.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
    wxGraphicsRenderer * GetRenderer() const;
    %Docstring
        GetRenderer() -> GraphicsRenderer
        
        Returns the renderer that was used to create this instance, or NULL if
        it has not been initialized yet.
    %End

    bool IsNull() const;
    %Docstring
        IsNull() -> bool
    %End

    bool IsOk();
    %Docstring
        IsOk() -> bool
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGraphicsObject_IsOk(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    bool _wxGraphicsObject_IsOk(wxGraphicsObject* self)
    {
        return !self->IsNull();
    }
    %End

    int __nonzero__();
    %Docstring
        __nonzero__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGraphicsObject___nonzero__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxGraphicsObject___nonzero__(wxGraphicsObject* self)
    {
        return !self->IsNull();
    }
    %End

    int __bool__();
    %Docstring
        __bool__() -> int
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGraphicsObject___bool__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    int _wxGraphicsObject___bool__(wxGraphicsObject* self)
    {
        return !self->IsNull();
    }
    %End

    public:


    %Property(name=Renderer, get=GetRenderer)
};  // end of class wxGraphicsObject


class wxGraphicsBitmap : wxGraphicsObject
{
    %Docstring
        GraphicsBitmap()
        
        Represents a bitmap.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
    wxGraphicsBitmap();

    wxImage ConvertToImage() const;
    %Docstring
        ConvertToImage() -> Image
        
        Return the contents of this bitmap as wxImage.
    %End

    void * GetNativeBitmap() const;
    %Docstring
        GetNativeBitmap() -> void
        
        Return the pointer to the native bitmap data.
    %End

    public:


    %Property(name=NativeBitmap, get=GetNativeBitmap)
};  // end of class wxGraphicsBitmap


class wxGraphicsBrush : wxGraphicsObject
{
    %Docstring
        A wxGraphicsBrush is a native representation of a brush.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
};  // end of class wxGraphicsBrush


class wxGraphicsFont : wxGraphicsObject
{
    %Docstring
        A wxGraphicsFont is a native representation of a font.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
};  // end of class wxGraphicsFont


class wxGraphicsPen : wxGraphicsObject
{
    %Docstring
        A wxGraphicsPen is a native representation of a pen.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
};  // end of class wxGraphicsPen


class wxGraphicsContext : wxGraphicsObject   /Abstract/
{
    %Docstring
        A wxGraphicsContext instance is the object that is drawn upon.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

    %TypeCode
        // Convert a Python sequence of wxPoint2D objects, or items that can be converted
        // to wxPoint2D into a C array of wxPoint2D instances.
        static
        wxPoint2D* wxPoint2D_array_helper(PyObject* source, size_t *count)
        {
            wxPoint2D* array;
            Py_ssize_t idx, len;
            wxPyThreadBlocker blocker;
        
            // ensure that it is a sequence
            if (! PySequence_Check(source))
                goto error0;
            // ensure it is not a string or unicode object (they are sequences too)
            else if (PyBytes_Check(source) || PyUnicode_Check(source))
                goto error0;
            // ensure each item can be converted to wxPoint2D
            else {
                len = PySequence_Length(source);
                for (idx=0; idx<len; idx++) {
                    PyObject* item = PySequence_ITEM(source, idx);
                    if (!sipCanConvertToType(item, sipType_wxPoint2DDouble, SIP_NOT_NONE)) {
                        Py_DECREF(item);
                        goto error0;
                    }
                    Py_DECREF(item);
                }
            }
        
            // The length of the sequence is returned in count.
            *count = len;
            array = new wxPoint2D[*count];
            if (!array) {
                PyErr_SetString(PyExc_MemoryError, "Unable to allocate temporary array");
                return NULL;
            }
            for (idx=0; idx<len; idx++) {
                PyObject* obj = PySequence_ITEM(source, idx);
                int state = 0;
                int err = 0;
                wxPoint2D* item = reinterpret_cast<wxPoint2D*>(
                                sipConvertToType(obj, sipType_wxPoint2DDouble, NULL, 0, &state, &err));
                array[idx] = *item;
                sipReleaseType((void*)item, sipType_wxPoint2DDouble, state); // delete temporary instances
                Py_DECREF(obj);
            }
            return array;
        
        error0:
            PyErr_SetString(PyExc_TypeError, "Expected a sequence of length-2 sequences or wx.Point2D objects.");
            return NULL;
        }
    %End
public:
    wxGraphicsBrush CreateLinearGradientBrush(
        wxDouble x1,
        wxDouble y1,
        wxDouble x2,
        wxDouble y2,
        const wxColour & c1,
        const wxColour & c2
    ) const;
    %Docstring
        CreateLinearGradientBrush(x1, y1, x2, y2, c1, c2) -> GraphicsBrush
        CreateLinearGradientBrush(x1, y1, x2, y2, stops) -> GraphicsBrush
        
        Creates a native brush with a linear gradient.
    %End

    wxGraphicsBrush CreateLinearGradientBrush(
        wxDouble x1,
        wxDouble y1,
        wxDouble x2,
        wxDouble y2,
        const wxGraphicsGradientStops & stops
    ) const;

    wxGraphicsBrush CreateRadialGradientBrush(
        wxDouble xo,
        wxDouble yo,
        wxDouble xc,
        wxDouble yc,
        wxDouble radius,
        const wxColour & oColor,
        const wxColour & cColor
    ) const;
    %Docstring
        CreateRadialGradientBrush(xo, yo, xc, yc, radius, oColor, cColor) -> GraphicsBrush
        CreateRadialGradientBrush(xo, yo, xc, yc, radius, stops) -> GraphicsBrush
        
        Creates a native brush with a radial gradient.
    %End

    wxGraphicsBrush CreateRadialGradientBrush(
        wxDouble xo,
        wxDouble yo,
        wxDouble xc,
        wxDouble yc,
        wxDouble radius,
        const wxGraphicsGradientStops & stops
    );

    void DrawBitmap(
        const wxGraphicsBitmap & bmp,
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );
    %Docstring
        DrawBitmap(bmp, x, y, w, h)
        DrawBitmap(bmp, x, y, w, h)
        
        Draws the bitmap.
    %End

    void DrawBitmap(
        const wxBitmap & bmp,
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );

    static
    wxGraphicsContext * Create(
        wxWindow * window
    )   /Factory/;
    %Docstring
        Create(window) -> GraphicsContext
        Create(windowDC) -> GraphicsContext
        Create(memoryDC) -> GraphicsContext
        Create(printerDC) -> GraphicsContext
        Create(metaFileDC) -> GraphicsContext
        Create(image) -> GraphicsContext
        Create() -> GraphicsContext
        Create(autoPaintDC) -> GraphicsContext
        
        Creates a wxGraphicsContext from a wxWindow.
    %End

    static
    wxGraphicsContext * Create(
        const wxWindowDC & windowDC   /KeepReference/
    )   /Factory/;

    static
    wxGraphicsContext * Create(
        const wxMemoryDC & memoryDC   /KeepReference/
    )   /Factory/;

    static
    wxGraphicsContext * Create(
        const wxPrinterDC & printerDC   /KeepReference/
    )   /Factory/;

    static
    wxGraphicsContext * Create(
        const wxMetafileDC& metaFileDC   /KeepReference/
    )   /Factory/;
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGraphicsContext_Create(metaFileDC);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxGraphicsContext * _wxGraphicsContext_Create(const wxMetafileDC* metaFileDC)
    {
        #ifdef __WXMSW__
        #if wxUSE_ENH_METAFILE
            return wxGraphicsContext::Create(*metaFileDC);
        #endif
        #endif
            wxPyRaiseNotImplemented();
            return NULL;
    }
    %End

    static
    wxGraphicsContext * Create(
        wxImage & image   /KeepReference/
    )   /Factory/;

    static
    wxGraphicsContext * Create()   /Factory/;

    static wxGraphicsContext* Create(wxAutoBufferedPaintDC* autoPaintDC /KeepReference/)   /Factory/;
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGraphicsContext_Create(autoPaintDC);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxGraphicsContext* _wxGraphicsContext_Create(wxAutoBufferedPaintDC* autoPaintDC )
    {
        return wxGraphicsContext::Create(*autoPaintDC);
    }
    %End

    static
    wxGraphicsContext * CreateFromNative(
        void * context
    )   /Factory/;
    %Docstring
        CreateFromNative(context) -> GraphicsContext
        
        Creates a wxGraphicsContext from a native context.
    %End

    static
    wxGraphicsContext * CreateFromNativeWindow(
        void * window
    )   /Factory/;
    %Docstring
        CreateFromNativeWindow(window) -> GraphicsContext
        
        Creates a wxGraphicsContext from a native window.
    %End

    void Clip(
        const wxRegion & region
    );
    %Docstring
        Clip(region)
        Clip(x, y, w, h)
        
        Clips drawings to the specified region.
    %End

    void Clip(
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );

    void ConcatTransform(
        const wxGraphicsMatrix & matrix
    );
    %Docstring
        ConcatTransform(matrix)
        
        Concatenates the passed in transform with the current transform of
        this context.
    %End

    wxGraphicsBitmap CreateBitmap(
        const wxBitmap & bitmap
    );
    %Docstring
        CreateBitmap(bitmap) -> GraphicsBitmap
        
        Creates wxGraphicsBitmap from an existing wxBitmap.
    %End

    wxGraphicsBitmap CreateBitmapFromImage(
        const wxImage & image
    );
    %Docstring
        CreateBitmapFromImage(image) -> GraphicsBitmap
        
        Creates wxGraphicsBitmap from an existing wxImage.
    %End

    wxGraphicsBitmap CreateSubBitmap(
        const wxGraphicsBitmap & bitmap,
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );
    %Docstring
        CreateSubBitmap(bitmap, x, y, w, h) -> GraphicsBitmap
        
        Extracts a sub-bitmap from an existing bitmap.
    %End

    wxGraphicsBrush CreateBrush(
        const wxBrush & brush
    ) const;
    %Docstring
        CreateBrush(brush) -> GraphicsBrush
        
        Creates a native brush from a wxBrush.
    %End

    wxGraphicsFont CreateFont(
        const wxFont & font,
        const wxColour & col = *wxBLACK
    ) const;
    %Docstring
        CreateFont(font, col=BLACK) -> GraphicsFont
        CreateFont(sizeInPixels, facename, flags=FONTFLAG_DEFAULT, col=BLACK) -> GraphicsFont
        
        Creates a native graphics font from a wxFont and a text colour.
    %End

    wxGraphicsFont CreateFont(
        double sizeInPixels,
        const wxString & facename,
        int flags = wxFONTFLAG_DEFAULT,
        const wxColour & col = *wxBLACK
    ) const;

    wxGraphicsMatrix CreateMatrix(
        wxDouble a = 1.0,
        wxDouble b = 0.0,
        wxDouble c = 0.0,
        wxDouble d = 1.0,
        wxDouble tx = 0.0,
        wxDouble ty = 0.0
    ) const;
    %Docstring
        CreateMatrix(a=1.0, b=0.0, c=0.0, d=1.0, tx=0.0, ty=0.0) -> GraphicsMatrix
        CreateMatrix(mat) -> GraphicsMatrix
        
        Creates a native affine transformation matrix from the passed in
        values.
    %End

    wxGraphicsMatrix CreateMatrix(
        const wxAffineMatrix2DBase & mat
    ) const;

    wxGraphicsPath CreatePath() const;
    %Docstring
        CreatePath() -> GraphicsPath
        
        Creates a native graphics path which is initially empty.
    %End

    wxGraphicsPen CreatePen(
        const wxPen & pen
    ) const;
    %Docstring
        CreatePen(pen) -> GraphicsPen
        
        Creates a native pen from a wxPen.
    %End

    void DrawEllipse(
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );
    %Docstring
        DrawEllipse(x, y, w, h)
        
        Draws an ellipse.
    %End

    void DrawIcon(
        const wxIcon & icon,
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );
    %Docstring
        DrawIcon(icon, x, y, w, h)
        
        Draws the icon.
    %End

    void DrawLines(PyObject* points,  wxPolygonFillMode fillStyle = wxODDEVEN_RULE);
    %Docstring
        DrawLines(point2Ds, fillStyle=ODDEVEN_RULE)
        
        Draws a polygon.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxGraphicsContext_DrawLines(sipCpp, points, fillStyle);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxGraphicsContext_DrawLines(wxGraphicsContext* self, PyObject* points, wxPolygonFillMode fillStyle)
    {
        size_t count;
        wxPoint2D* ptsArray = wxPoint2D_array_helper(points, &count);
        
        if ( ptsArray != NULL ) {
            self->DrawLines(count, ptsArray, fillStyle);
            delete [] ptsArray;
        }
    }
    %End

    void DrawPath(
        const wxGraphicsPath & path,
        wxPolygonFillMode fillStyle = wxODDEVEN_RULE
    );
    %Docstring
        DrawPath(path, fillStyle=ODDEVEN_RULE)
        
        Draws the path by first filling and then stroking.
    %End

    void DrawRectangle(
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );
    %Docstring
        DrawRectangle(x, y, w, h)
        
        Draws a rectangle.
    %End

    void DrawRoundedRectangle(
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h,
        wxDouble radius
    );
    %Docstring
        DrawRoundedRectangle(x, y, w, h, radius)
        
        Draws a rounded rectangle.
    %End

    void DrawText(
        const wxString & str,
        wxDouble x,
        wxDouble y
    );
    %Docstring
        DrawText(str, x, y)
        DrawText(str, x, y, angle)
        DrawText(str, x, y, backgroundBrush)
        DrawText(str, x, y, angle, backgroundBrush)
        
        Draws text at the defined position.
    %End

    void DrawText(
        const wxString & str,
        wxDouble x,
        wxDouble y,
        wxDouble angle
    );

    void DrawText(
        const wxString & str,
        wxDouble x,
        wxDouble y,
        const wxGraphicsBrush & backgroundBrush
    );

    void DrawText(
        const wxString & str,
        wxDouble x,
        wxDouble y,
        wxDouble angle,
        const wxGraphicsBrush & backgroundBrush
    );

    void FillPath(
        const wxGraphicsPath & path,
        wxPolygonFillMode fillStyle = wxODDEVEN_RULE
    );
    %Docstring
        FillPath(path, fillStyle=ODDEVEN_RULE)
        
        Fills the path with the current brush.
    %End

    void * GetNativeContext();
    %Docstring
        GetNativeContext() -> void
        
        Returns the native context (CGContextRef for Core Graphics, Graphics
        pointer for GDIPlus and cairo_t pointer for cairo).
    %End

    wxArrayDouble* GetPartialTextExtents(
        const wxString & text
    ) const   /Factory/;
    %Docstring
        GetPartialTextExtents(text) -> ArrayDouble
        
        Fills the widths array with the widths from the beginning of text to
        the corresponding character of text.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGraphicsContext_GetPartialTextExtents(sipCpp, text);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxArrayDouble* _wxGraphicsContext_GetPartialTextExtents(const wxGraphicsContext* self, const wxString *text)
    {
        wxArrayDouble rval;
        self->GetPartialTextExtents(*text, rval);
        return new wxArrayDouble(rval);
    }
    %End

    void GetTextExtent(
        const wxString & text,
        wxDouble * width   /Out/,
        wxDouble * height   /Out/,
        wxDouble * descent   /Out/,
        wxDouble * externalLeading   /Out/
    ) const   /PyName=GetFullTextExtent/;
    %Docstring
        GetFullTextExtent(text) -> (width, height, descent, externalLeading)
        GetTextExtent(text) -> (width, height)
        
        Gets the dimensions of the string using the currently selected font.
    %End

    PyObject* GetTextExtent(const wxString& text);
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGraphicsContext_GetTextExtent(sipCpp, text);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    PyObject* _wxGraphicsContext_GetTextExtent(wxGraphicsContext* self, const wxString* text)
    {
        wxDouble width = 0.0, height = 0.0;
        self->GetTextExtent(*text, &width, &height, NULL, NULL);
        wxPyThreadBlocker blocker;
        return sipBuildResult(0, "(dd)", width, height);
    }
    %End

    wxGraphicsMatrix GetTransform() const;
    %Docstring
        GetTransform() -> GraphicsMatrix
        
        Gets the current transformation matrix of this context.
    %End

    void ResetClip();
    %Docstring
        ResetClip()
        
        Resets the clipping to original shape.
    %End

    void Rotate(
        wxDouble angle
    );
    %Docstring
        Rotate(angle)
        
        Rotates the current transformation matrix (in radians).
    %End

    void Scale(
        wxDouble xScale,
        wxDouble yScale
    );
    %Docstring
        Scale(xScale, yScale)
        
        Scales the current transformation matrix.
    %End

    void SetBrush(
        const wxBrush & brush
    );
    %Docstring
        SetBrush(brush)
        SetBrush(brush)
        
        Sets the brush for filling paths.
    %End

    void SetBrush(
        const wxGraphicsBrush & brush
    );

    void SetFont(
        const wxFont & font,
        const wxColour & colour
    );
    %Docstring
        SetFont(font, colour)
        SetFont(font)
        
        Sets the font for drawing text.
    %End

    void SetFont(
        const wxGraphicsFont & font
    );

    void SetPen(
        const wxPen & pen
    );
    %Docstring
        SetPen(pen)
        SetPen(pen)
        
        Sets the pen used for stroking.
    %End

    void SetPen(
        const wxGraphicsPen & pen
    );

    void SetTransform(
        const wxGraphicsMatrix & matrix
    );
    %Docstring
        SetTransform(matrix)
        
        Sets the current transformation matrix of this context.
    %End

    void StrokeLine(
        wxDouble x1,
        wxDouble y1,
        wxDouble x2,
        wxDouble y2
    );
    %Docstring
        StrokeLine(x1, y1, x2, y2)
        
        Strokes a single line.
    %End

    void StrokeLines(PyObject* points);
    %Docstring
        StrokeLines(point2Ds)
        
        Stroke lines conencting all the points.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxGraphicsContext_StrokeLines(sipCpp, points);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxGraphicsContext_StrokeLines(wxGraphicsContext* self, PyObject* points)
    {
        size_t count;
        wxPoint2D* ptsArray = wxPoint2D_array_helper(points, &count);
        
        if ( ptsArray != NULL ) {
            self->StrokeLines(count, ptsArray);
            delete [] ptsArray;
        }
    }
    %End

    void StrokePath(
        const wxGraphicsPath & path
    );
    %Docstring
        StrokePath(path)
        
        Strokes along a path with the current pen.
    %End

    void Translate(
        wxDouble dx,
        wxDouble dy
    );
    %Docstring
        Translate(dx, dy)
        
        Translates the current transformation matrix.
    %End

    void BeginLayer(
        wxDouble opacity
    );
    %Docstring
        BeginLayer(opacity)
        
        Redirects all rendering is done into a fully transparent temporary
        context.
    %End

    void EndLayer();
    %Docstring
        EndLayer()
        
        Composites back the drawings into the context with the opacity given
        at the BeginLayer call.
    %End

    bool SetAntialiasMode(
        wxAntialiasMode antialias
    );
    %Docstring
        SetAntialiasMode(antialias) -> bool
        
        Sets the antialiasing mode, returns true if it supported.
    %End

    wxAntialiasMode GetAntialiasMode() const;
    %Docstring
        GetAntialiasMode() -> AntialiasMode
        
        Returns the current shape antialiasing mode.
    %End

    bool SetInterpolationQuality(
        wxInterpolationQuality interpolation
    );
    %Docstring
        SetInterpolationQuality(interpolation) -> bool
        
        Sets the interpolation quality, returns true if it is supported.
    %End

    wxInterpolationQuality GetInterpolationQuality() const;
    %Docstring
        GetInterpolationQuality() -> InterpolationQuality
        
        Returns the current interpolation quality.
    %End

    bool SetCompositionMode(
        wxCompositionMode op
    );
    %Docstring
        SetCompositionMode(op) -> bool
        
        Sets the compositing operator, returns true if it supported.
    %End

    wxCompositionMode GetCompositionMode() const;
    %Docstring
        GetCompositionMode() -> CompositionMode
        
        Returns the current compositing operator.
    %End

    void PushState();
    %Docstring
        PushState()
        
        Push the current state of the context's transformation matrix on a
        stack.
    %End

    void PopState();
    %Docstring
        PopState()
        
        Pops a stored state from the stack and sets the current transformation
        matrix to that state.
    %End

    bool ShouldOffset() const;
    %Docstring
        ShouldOffset() -> bool
    %End

    void EnableOffset(
        bool enable = true
    );
    %Docstring
        EnableOffset(enable=True)
    %End

    void DisableOffset();
    %Docstring
        DisableOffset()
    %End

    bool OffsetEnabled();
    %Docstring
        OffsetEnabled() -> bool
    %End

    bool StartDoc(
        const wxString & message
    );
    %Docstring
        StartDoc(message) -> bool
        
        Begin a new document (relevant only for printing / pdf etc.) If there
        is a progress dialog, message will be shown.
    %End

    void EndDoc();
    %Docstring
        EndDoc()
        
        Done with that document (relevant only for printing / pdf etc.)
    %End

    void StartPage(
        wxDouble width = 0,
        wxDouble height = 0
    );
    %Docstring
        StartPage(width=0, height=0)
        
        Opens a new page (relevant only for printing / pdf etc.) with the
        given size in points.
    %End

    void EndPage();
    %Docstring
        EndPage()
        
        Ends the current page (relevant only for printing / pdf etc.)
    %End

    void Flush();
    %Docstring
        Flush()
        
        Make sure that the current content of this context is immediately
        visible.
    %End

    void GetSize(
        wxDouble * width   /Out/,
        wxDouble * height   /Out/
    ) const;
    %Docstring
        GetSize() -> (width, height)
        
        Returns the size of the graphics context in device coordinates.
    %End

    void GetDPI(
        wxDouble * dpiX   /Out/,
        wxDouble * dpiY   /Out/
    );
    %Docstring
        GetDPI() -> (dpiX, dpiY)
        
        Returns the resolution of the graphics context in device points per
        inch.
    %End

    void StrokeLineSegments(PyObject* beginPoints,  PyObject* endPoints);
    %Docstring
        StrokeLineSegments(beginPoint2Ds, endPoint2Ds)
        
        Stroke disconnected lines from begin to end points.
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        _wxGraphicsContext_StrokeLineSegments(sipCpp, beginPoints, endPoints);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    void _wxGraphicsContext_StrokeLineSegments(wxGraphicsContext* self, PyObject* beginPoints, PyObject* endPoints)
    {
        size_t c1, c2, count;
        wxPoint2D* beginP = wxPoint2D_array_helper(beginPoints, &c1);
        wxPoint2D* endP =   wxPoint2D_array_helper(endPoints, &c2);
        
        if ( beginP != NULL && endP != NULL ) {
            count = wxMin(c1, c2);
            self->StrokeLines(count, beginP, endP);
        }
        delete [] beginP;
        delete [] endP;
    }
    %End

    public:


    %Property(name=AntialiasMode, get=GetAntialiasMode, set=SetAntialiasMode)
    %Property(name=CompositionMode, get=GetCompositionMode, set=SetCompositionMode)
    %Property(name=InterpolationQuality, get=GetInterpolationQuality, set=SetInterpolationQuality)
    %Property(name=NativeContext, get=GetNativeContext)
    %Property(name=TextExtent, get=GetTextExtent)
    %Property(name=Transform, get=GetTransform, set=SetTransform)
};  // end of class wxGraphicsContext


%Extract(id=pycode_core)
GraphicsContext.DrawRotatedText = wx.deprecated(GraphicsContext.DrawText, 'Use DrawText instead.')

%End

class wxGraphicsGradientStop
{
    %Docstring
        GraphicsGradientStop(col=TransparentColour, pos=0.)
        
        Represents a single gradient stop in a collection of gradient stops as
        represented by wxGraphicsGradientStops.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
    wxGraphicsGradientStop(
        wxColour col = wxTransparentColour,
        float pos = 0.
    );

    const wxColour & GetColour() const;
    %Docstring
        GetColour() -> Colour
        
        Return the stop colour.
    %End

    void SetColour(
        const wxColour & col
    );
    %Docstring
        SetColour(col)
        
        Change the stop colour.
    %End

    float GetPosition() const;
    %Docstring
        GetPosition() -> float
        
        Return the stop position.
    %End

    void SetPosition(
        float pos
    );
    %Docstring
        SetPosition(pos)
        
        Change the stop position.
    %End

    public:


    %Property(name=Colour, get=GetColour, set=SetColour)
    %Property(name=Position, get=GetPosition, set=SetPosition)
};  // end of class wxGraphicsGradientStop


class wxGraphicsGradientStops
{
    %Docstring
        GraphicsGradientStops(startCol=TransparentColour, endCol=TransparentColour)
        
        Represents a collection of wxGraphicGradientStop values for use with
        CreateLinearGradientBrush and CreateRadialGradientBrush.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
    wxGraphicsGradientStops(
        wxColour startCol = wxTransparentColour,
        wxColour endCol = wxTransparentColour
    );

    void Add(
        const wxGraphicsGradientStop & stop
    );
    %Docstring
        Add(stop)
        Add(col, pos)
        
        Add a new stop.
    %End

    void Add(
        wxColour col,
        float pos
    );

    wxGraphicsGradientStop Item(
        unsigned n
    ) const;
    %Docstring
        Item(n) -> GraphicsGradientStop
        
        Returns the stop at the given index.
    %End

    size_t GetCount() const;
    %Docstring
        GetCount() -> size_t
        
        Returns the number of stops.
    %End

    void SetStartColour(
        wxColour col
    );
    %Docstring
        SetStartColour(col)
        
        Set the start colour to col.
    %End

    wxColour GetStartColour() const;
    %Docstring
        GetStartColour() -> Colour
        
        Returns the start colour.
    %End

    void SetEndColour(
        wxColour col
    );
    %Docstring
        SetEndColour(col)
        
        Set the end colour to col.
    %End

    wxColour GetEndColour() const;
    %Docstring
        GetEndColour() -> Colour
        
        Returns the end colour.
    %End

    SIP_SSIZE_T __len__();
    %Docstring
        __len__() -> SIP_SSIZE_T
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGraphicsGradientStops___len__(sipCpp);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    SIP_SSIZE_T _wxGraphicsGradientStops___len__(wxGraphicsGradientStops* self)
    {
        return (SIP_SSIZE_T)self->GetCount();
    }
    %End

    wxGraphicsGradientStop* __getitem__(ulong n)   /Factory/;
    %Docstring
        __getitem__(n)
    %End
    %MethodCode
        PyErr_Clear();
        Py_BEGIN_ALLOW_THREADS
        sipRes = _wxGraphicsGradientStops___getitem__(sipCpp, n);
        Py_END_ALLOW_THREADS
        if (PyErr_Occurred()) sipIsErr = 1;
    %End
    %TypeCode
    wxGraphicsGradientStop* _wxGraphicsGradientStops___getitem__(wxGraphicsGradientStops* self, ulong n)
    {
        return new wxGraphicsGradientStop(self->Item(n));
    }
    %End

    public:


    %Property(name=Count, get=GetCount)
    %Property(name=EndColour, get=GetEndColour, set=SetEndColour)
    %Property(name=StartColour, get=GetStartColour, set=SetStartColour)
};  // end of class wxGraphicsGradientStops


class wxGraphicsMatrix : wxGraphicsObject
{
    %Docstring
        A wxGraphicsMatrix is a native representation of an affine matrix.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
    void Concat(
        const wxGraphicsMatrix * t
    );
    %Docstring
        Concat(t)
        
        Concatenates the matrix passed with the current matrix.
    %End

    void Get(
        wxDouble * a   /Out/ = NULL,
        wxDouble * b   /Out/ = NULL,
        wxDouble * c   /Out/ = NULL,
        wxDouble * d   /Out/ = NULL,
        wxDouble * tx   /Out/ = NULL,
        wxDouble * ty   /Out/ = NULL
    ) const;
    %Docstring
        Get() -> (a, b, c, d, tx, ty)
        
        Returns the component values of the matrix via the argument pointers.
    %End

    void * GetNativeMatrix() const;
    %Docstring
        GetNativeMatrix() -> void
        
        Returns the native representation of the matrix.
    %End

    void Invert();
    %Docstring
        Invert()
        
        Inverts the matrix.
    %End

    bool IsEqual(
        const wxGraphicsMatrix * t
    ) const;
    %Docstring
        IsEqual(t) -> bool
        
        Returns true if the elements of the transformation matrix are equal.
    %End

    bool IsIdentity() const;
    %Docstring
        IsIdentity() -> bool
        
        Return true if this is the identity matrix.
    %End

    void Rotate(
        wxDouble angle
    );
    %Docstring
        Rotate(angle)
        
        Rotates this matrix clockwise (in radians).
    %End

    void Scale(
        wxDouble xScale,
        wxDouble yScale
    );
    %Docstring
        Scale(xScale, yScale)
        
        Scales this matrix.
    %End

    void Set(
        wxDouble a = 1.0,
        wxDouble b = 0.0,
        wxDouble c = 0.0,
        wxDouble d = 1.0,
        wxDouble tx = 0.0,
        wxDouble ty = 0.0
    );
    %Docstring
        Set(a=1.0, b=0.0, c=0.0, d=1.0, tx=0.0, ty=0.0)
        
        Sets the matrix to the respective values (default values are the
        identity matrix).
    %End

    void TransformDistance(
        wxDouble * dx   /In, Out/,
        wxDouble * dy   /In, Out/
    ) const;
    %Docstring
        TransformDistance(dx, dy) -> (dx, dy)
        
        Applies this matrix to a distance (ie.
    %End

    void TransformPoint(
        wxDouble * x   /In, Out/,
        wxDouble * y   /In, Out/
    ) const;
    %Docstring
        TransformPoint(x, y) -> (x, y)
        
        Applies this matrix to a point.
    %End

    void Translate(
        wxDouble dx,
        wxDouble dy
    );
    %Docstring
        Translate(dx, dy)
        
        Translates this matrix.
    %End

    public:


    %Property(name=NativeMatrix, get=GetNativeMatrix)
};  // end of class wxGraphicsMatrix


class wxGraphicsPath : wxGraphicsObject
{
    %Docstring
        A wxGraphicsPath is a native representation of a geometric path.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
    void AddArc(
        wxDouble x,
        wxDouble y,
        wxDouble r,
        wxDouble startAngle,
        wxDouble endAngle,
        bool clockwise
    );
    %Docstring
        AddArc(x, y, r, startAngle, endAngle, clockwise)
        AddArc(c, r, startAngle, endAngle, clockwise)
        
        Adds an arc of a circle.
    %End

    void AddArc(
        const wxPoint2D & c,
        wxDouble r,
        wxDouble startAngle,
        wxDouble endAngle,
        bool clockwise
    );

    void AddArcToPoint(
        wxDouble x1,
        wxDouble y1,
        wxDouble x2,
        wxDouble y2,
        wxDouble r
    );
    %Docstring
        AddArcToPoint(x1, y1, x2, y2, r)
        
        Appends a an arc to two tangents connecting (current) to (x1,y1) and
        (x1,y1) to (x2,y2), also a straight line from (current) to (x1,y1).
    %End

    void AddCircle(
        wxDouble x,
        wxDouble y,
        wxDouble r
    );
    %Docstring
        AddCircle(x, y, r)
        
        Appends a circle around (x,y) with radius r as a new closed subpath.
    %End

    void AddCurveToPoint(
        wxDouble cx1,
        wxDouble cy1,
        wxDouble cx2,
        wxDouble cy2,
        wxDouble x,
        wxDouble y
    );
    %Docstring
        AddCurveToPoint(cx1, cy1, cx2, cy2, x, y)
        AddCurveToPoint(c1, c2, e)
        
        Adds a cubic bezier curve from the current point, using two control
        points and an end point.
    %End

    void AddCurveToPoint(
        const wxPoint2D & c1,
        const wxPoint2D & c2,
        const wxPoint2D & e
    );

    void AddEllipse(
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );
    %Docstring
        AddEllipse(x, y, w, h)
        
        Appends an ellipse fitting into the passed in rectangle.
    %End

    void AddLineToPoint(
        wxDouble x,
        wxDouble y
    );
    %Docstring
        AddLineToPoint(x, y)
        AddLineToPoint(p)
        
        Adds a straight line from the current point to (x,y).
    %End

    void AddLineToPoint(
        const wxPoint2D & p
    );

    void AddPath(
        const wxGraphicsPath & path
    );
    %Docstring
        AddPath(path)
        
        Adds another path.
    %End

    void AddQuadCurveToPoint(
        wxDouble cx,
        wxDouble cy,
        wxDouble x,
        wxDouble y
    );
    %Docstring
        AddQuadCurveToPoint(cx, cy, x, y)
        
        Adds a quadratic bezier curve from the current point, using a control
        point and an end point.
    %End

    void AddRectangle(
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );
    %Docstring
        AddRectangle(x, y, w, h)
        
        Appends a rectangle as a new closed subpath.
    %End

    void AddRoundedRectangle(
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h,
        wxDouble radius
    );
    %Docstring
        AddRoundedRectangle(x, y, w, h, radius)
        
        Appends a rounded rectangle as a new closed subpath.
    %End

    void CloseSubpath();
    %Docstring
        CloseSubpath()
        
        Closes the current sub-path.
    %End

    bool Contains(
        const wxPoint2D & c,
        wxPolygonFillMode fillStyle = wxODDEVEN_RULE
    ) const;
    %Docstring
        Contains(c, fillStyle=ODDEVEN_RULE) -> bool
        Contains(x, y, fillStyle=ODDEVEN_RULE) -> bool
    %End

    bool Contains(
        wxDouble x,
        wxDouble y,
        wxPolygonFillMode fillStyle = wxODDEVEN_RULE
    ) const;

    wxRect2D GetBox() const;
    %Docstring
        GetBox() -> Rect2D
        
        Gets the bounding box enclosing all points (possibly including control
        points).
    %End

    wxPoint2D GetCurrentPoint() const;
    %Docstring
        GetCurrentPoint() -> Point2D
        
        Gets the last point of the current path, (0,0) if not yet set.
    %End

    void * GetNativePath() const;
    %Docstring
        GetNativePath() -> void
        
        Returns the native path (CGPathRef for Core Graphics, Path pointer for
        GDIPlus and a cairo_path_t pointer for cairo).
    %End

    void MoveToPoint(
        wxDouble x,
        wxDouble y
    );
    %Docstring
        MoveToPoint(x, y)
        MoveToPoint(p)
        
        Begins a new subpath at (x,y).
    %End

    void MoveToPoint(
        const wxPoint2D & p
    );

    void Transform(
        const wxGraphicsMatrix & matrix
    );
    %Docstring
        Transform(matrix)
        
        Transforms each point of this path by the matrix.
    %End

    void UnGetNativePath(
        void * p
    ) const;
    %Docstring
        UnGetNativePath(p)
        
        Gives back the native path returned by GetNativePath() because there
        might be some deallocations necessary (e.g.
    %End

    public:


    %Property(name=Box, get=GetBox)
    %Property(name=CurrentPoint, get=GetCurrentPoint)
    %Property(name=NativePath, get=GetNativePath)
};  // end of class wxGraphicsPath


class wxGraphicsRenderer : wxObject   /Abstract/
{
    %Docstring
        A wxGraphicsRenderer is the instance corresponding to the rendering
        engine used.
    %End
    %TypeHeaderCode
        #include <wx/graphics.h>
    %End

public:
    wxGraphicsBitmap CreateBitmap(
        const wxBitmap & bitmap
    );
    %Docstring
        CreateBitmap(bitmap) -> GraphicsBitmap
        
        Creates wxGraphicsBitmap from an existing wxBitmap.
    %End

    wxGraphicsBitmap CreateBitmapFromImage(
        const wxImage & image
    );
    %Docstring
        CreateBitmapFromImage(image) -> GraphicsBitmap
        
        Creates wxGraphicsBitmap from an existing wxImage.
    %End

    wxImage CreateImageFromBitmap(
        const wxGraphicsBitmap & bmp
    );
    %Docstring
        CreateImageFromBitmap(bmp) -> Image
        
        Creates a wxImage from a wxGraphicsBitmap.
    %End

    wxGraphicsBitmap CreateBitmapFromNativeBitmap(
        void * bitmap
    );
    %Docstring
        CreateBitmapFromNativeBitmap(bitmap) -> GraphicsBitmap
        
        Creates wxGraphicsBitmap from a native bitmap handle.
    %End

    wxGraphicsContext * CreateContext(
        wxWindow * window
    )   /Factory/;
    %Docstring
        CreateContext(window) -> GraphicsContext
        CreateContext(windowDC) -> GraphicsContext
        CreateContext(memoryDC) -> GraphicsContext
        CreateContext(printerDC) -> GraphicsContext
        
        Creates a wxGraphicsContext from a wxWindow.
    %End

    wxGraphicsContext * CreateContext(
        const wxWindowDC & windowDC   /KeepReference/
    )   /Factory/;

    wxGraphicsContext * CreateContext(
        const wxMemoryDC & memoryDC   /KeepReference/
    )   /Factory/;

    wxGraphicsContext * CreateContext(
        const wxPrinterDC & printerDC   /KeepReference/
    )   /Factory/;

    wxGraphicsContext * CreateContextFromImage(
        wxImage & image   /KeepReference/
    )   /Factory/;
    %Docstring
        CreateContextFromImage(image) -> GraphicsContext
        
        Creates a wxGraphicsContext associated with a wxImage.
    %End

    wxGraphicsBrush CreateBrush(
        const wxBrush & brush
    );
    %Docstring
        CreateBrush(brush) -> GraphicsBrush
        
        Creates a native brush from a wxBrush.
    %End

    wxGraphicsContext * CreateContextFromNativeContext(
        void * context
    )   /Factory/;
    %Docstring
        CreateContextFromNativeContext(context) -> GraphicsContext
        
        Creates a wxGraphicsContext from a native context.
    %End

    wxGraphicsContext * CreateContextFromNativeWindow(
        void * window
    )   /Factory/;
    %Docstring
        CreateContextFromNativeWindow(window) -> GraphicsContext
        
        Creates a wxGraphicsContext from a native window.
    %End

    wxGraphicsContext * CreateMeasuringContext()   /Factory/;
    %Docstring
        CreateMeasuringContext() -> GraphicsContext
        
        Creates a wxGraphicsContext that can be used for measuring texts only.
    %End

    wxGraphicsFont CreateFont(
        const wxFont & font,
        const wxColour & col = *wxBLACK
    );
    %Docstring
        CreateFont(font, col=BLACK) -> GraphicsFont
        CreateFont(sizeInPixels, facename, flags=FONTFLAG_DEFAULT, col=BLACK) -> GraphicsFont
        
        Creates a native graphics font from a wxFont and a text colour.
    %End

    wxGraphicsFont CreateFont(
        double sizeInPixels,
        const wxString & facename,
        int flags = wxFONTFLAG_DEFAULT,
        const wxColour & col = *wxBLACK
    );

    wxGraphicsBrush CreateLinearGradientBrush(
        wxDouble x1,
        wxDouble y1,
        wxDouble x2,
        wxDouble y2,
        const wxGraphicsGradientStops & stops
    );
    %Docstring
        CreateLinearGradientBrush(x1, y1, x2, y2, stops) -> GraphicsBrush
        
        Creates a native brush with a linear gradient.
    %End

    wxGraphicsMatrix CreateMatrix(
        wxDouble a = 1.0,
        wxDouble b = 0.0,
        wxDouble c = 0.0,
        wxDouble d = 1.0,
        wxDouble tx = 0.0,
        wxDouble ty = 0.0
    );
    %Docstring
        CreateMatrix(a=1.0, b=0.0, c=0.0, d=1.0, tx=0.0, ty=0.0) -> GraphicsMatrix
        
        Creates a native affine transformation matrix from the passed in
        values.
    %End

    wxGraphicsPath CreatePath();
    %Docstring
        CreatePath() -> GraphicsPath
        
        Creates a native graphics path which is initially empty.
    %End

    wxGraphicsPen CreatePen(
        const wxPen & pen
    );
    %Docstring
        CreatePen(pen) -> GraphicsPen
        
        Creates a native pen from a wxPen.
    %End

    wxGraphicsBrush CreateRadialGradientBrush(
        wxDouble xo,
        wxDouble yo,
        wxDouble xc,
        wxDouble yc,
        wxDouble radius,
        const wxGraphicsGradientStops & stops
    );
    %Docstring
        CreateRadialGradientBrush(xo, yo, xc, yc, radius, stops) -> GraphicsBrush
        
        Creates a native brush with a radial gradient.
    %End

    wxGraphicsBitmap CreateSubBitmap(
        const wxGraphicsBitmap & bitmap,
        wxDouble x,
        wxDouble y,
        wxDouble w,
        wxDouble h
    );
    %Docstring
        CreateSubBitmap(bitmap, x, y, w, h) -> GraphicsBitmap
        
        Extracts a sub-bitmap from an existing bitmap.
    %End

    static
    wxGraphicsRenderer * GetDefaultRenderer();
    %Docstring
        GetDefaultRenderer() -> GraphicsRenderer
        
        Returns the default renderer on this platform.
    %End

    static
    wxGraphicsRenderer * GetCairoRenderer();
    %Docstring
        GetCairoRenderer() -> GraphicsRenderer
    %End

};  // end of class wxGraphicsRenderer


const wxGraphicsPen wxNullGraphicsPen;

const wxGraphicsBrush wxNullGraphicsBrush;

const wxGraphicsFont wxNullGraphicsFont;

const wxGraphicsBitmap wxNullGraphicsBitmap;

const wxGraphicsMatrix wxNullGraphicsMatrix;

const wxGraphicsPath wxNullGraphicsPath;

typedef wxPoint2DDouble wxPoint2D;

typedef wxRect2DDouble wxRect2D;


//---------------------------------------------------------------------------


.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.glcanvas.GLCanvas:

==========================================================================================================================================
|phoenix_title|  **wx.glcanvas.GLCanvas**
==========================================================================================================================================

:ref:`wx.glcanvas.GLCanvas`  is a class for displaying OpenGL graphics.          

It is always used in conjunction with :ref:`wx.glcanvas.GLContext`  as the context can only be made current (i.e. active for the OpenGL commands) when it is associated to a :ref:`wx.glcanvas.GLCanvas`. 

More precisely, you first need to create a :ref:`wx.glcanvas.GLCanvas`  window and then create an instance of a :ref:`wx.glcanvas.GLContext`  that is initialized with this :ref:`wx.glcanvas.GLCanvas`  and then later use either :meth:`~wx.glcanvas.GLCanvas.SetCurrent`  with the instance of the :ref:`wx.glcanvas.GLContext`  or :meth:`wx.glcanvas.GLContext.SetCurrent`   with the instance of the :ref:`wx.glcanvas.GLCanvas`  (which might be not the same as was used for the creation of the context) to bind the OpenGL state that is represented by the rendering context to the canvas, and then finally call :meth:`~wx.glcanvas.GLCanvas.SwapBuffers`  to swap the buffers of the OpenGL canvas and thus show your current output. 

Notice that versions of wxWidgets previous to 2.9 used to implicitly create a :ref:`wx.glcanvas.GLContext`  inside :ref:`wx.glcanvas.GLCanvas`  itself. This is still supported in the current version but is deprecated now and will be removed in the future, please update your code to create the rendering contexts explicitly. 

To set up the attributes for the canvas (number of bits for the depth buffer, number of bits for the stencil buffer and so on) you should set up the correct values of the `attribList`  parameter. The values that should be set up and their meanings will be described below. 







         



.. note:: 

   On those platforms which use a configure script (e.g. Linux and Mac OS) OpenGL support is automatically enabled if the relative headers and libraries are found. To switch it on under the other platforms (e.g. Windows), you need to edit the  ``setup.h``   file and set   ``USE_GLCANVAS``   to   ``1``   and then also pass   ``USE_OPENGL=1``   to the make utility. You may also need to add   ``opengl32.lib``   and   ``glu32.lib``   to the list of the libraries your program is linked with.  







.. seealso:: :ref:`wx.glcanvas.GLContext`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GLCanvas</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.glcanvas.GLCanvas_inheritance.png" alt="Inheritance diagram of GLCanvas" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.glcanvas.GLCanvas.html" title="wx.glcanvas.GLCanvas" alt="" coords="23,237,195,267"/> <area shape="rect" id="node2" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node3" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node4" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node5" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.glcanvas.GLCanvas.__init__`                                           
:meth:`~wx.glcanvas.GLCanvas.GetClassDefaultAttributes`                          
:meth:`~wx.glcanvas.GLCanvas.IsDisplaySupported`                                 Determines if a canvas having the specified attributes is available.
:meth:`~wx.glcanvas.GLCanvas.IsExtensionSupported`                               Returns ``True`` if the extension with given name is supported.
:meth:`~wx.glcanvas.GLCanvas.SetColour`                                          Sets the current colour for this window (using  ``glcolor3f()`` ), using the wxWidgets colour database to find a named colour.
:meth:`~wx.glcanvas.GLCanvas.SetCurrent`                                         Makes the OpenGL state that is represented by the OpenGL rendering context `context`  current, i.e.
:meth:`~wx.glcanvas.GLCanvas.SwapBuffers`                                        Swaps the double-buffer of this window, making the back-buffer the front-buffer and vice versa, so that the output of the previous OpenGL commands is displayed on the window.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.glcanvas.GLCanvas(Window)

   **Possible constructors**::

       GLCanvas(parent, id=ID_ANY, attribList=None, pos=DefaultPosition,
                size=DefaultSize, style=0, name='GLCanvas', palette=NullPalette)
       
   
   GLCanvas is a class for displaying OpenGL graphics.



   .. method:: __init__(self, parent, id=ID_ANY, attribList=None, pos=DefaultPosition, size=DefaultSize, style=0, name='GLCanvas', palette=NullPalette)






   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. staticmethod:: IsDisplaySupported(attribList)

      Determines if a canvas having the specified attributes is available.                  




      :param `attribList`: See  `attribList`  for :ref:`wx.glcanvas.GLCanvas`.  
      :type `attribList`: list of integers






      :rtype: `bool`



                  



      :returns: 

         ``True`` if attributes are supported.   








   .. staticmethod:: IsExtensionSupported(extension)

      Returns ``True`` if the extension with given name is supported.                  

      Notice that while this function is implemented for all of ``GLX``, ``WGL`` and ``AGL`` the extensions names are usually not the same for different platforms and so the code using it still usually uses conditional compilation.                  


      :param `extension`: 
      :type `extension`: int




      :rtype: `bool`








   .. method:: SetColour(self, colour)

      Sets the current colour for this window (using  ``glcolor3f()`` ), using the wxWidgets colour database to find a named colour.                   


      :param `colour`: 
      :type `colour`: string




      :rtype: `bool`








   .. method:: SetCurrent(self, context)

      Makes the OpenGL state that is represented by the OpenGL rendering context `context`  current, i.e.                  

      it will be used by all subsequent OpenGL calls. 

      This is equivalent to :meth:`wx.glcanvas.GLContext.SetCurrent`   called with this window as parameter. 

                


      :param `context`: 
      :type `context`: wx.glcanvas.GLContext




      :rtype: `bool`







      :returns: 

         ``False`` if an error occurred.   







      .. note:: 

         This function may only be called when the window is shown on screen, in particular it can't usually be called from the constructor as the window isn't yet shown at this moment.  








   .. method:: SwapBuffers(self)

      Swaps the double-buffer of this window, making the back-buffer the front-buffer and vice versa, so that the output of the previous OpenGL commands is displayed on the window.                  

                

      :rtype: `bool`







      :returns: 

         ``False`` if an error occurred.   








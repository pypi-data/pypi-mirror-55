.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.SVGFileDC:

==========================================================================================================================================
|phoenix_title|  **wx.SVGFileDC**
==========================================================================================================================================

A :ref:`wx.SVGFileDC`  is a device context onto which graphics and text can be drawn, and the output produced as a vector file, in ``SVG`` format.          

This format can be read by a range of programs, including a Netscape plugin (Adobe) and the open source Inkscape program (`http://inkscape.org/ <http://inkscape.org/>`_). Full details are given in the ``W3C`` ``SVG`` recommendation (`http://www.w3.org/TR/SVG/ <http://www.w3.org/TR/SVG/>`_). 

The intention behind :ref:`wx.SVGFileDC`  is that it can be used to produce a file corresponding to the screen display context, :ref:`wx.SVGFileDC`, by passing the :ref:`wx.SVGFileDC`  as a parameter instead of a :ref:`wx.DC`. Thus the :ref:`wx.SVGFileDC`  is a write-only class. 

As the :ref:`wx.SVGFileDC`  is a vector format, raster operations like :meth:`~wx.SVGFileDC.GetPixel`  are unlikely to be supported. However, the ``SVG`` specification allows for ``PNG`` format raster files to be embedded in the ``SVG``, and so bitmaps, icons and blit operations in :ref:`wx.SVGFileDC`  are supported. 

A more substantial ``SVG`` library (for reading and writing) is available at the Art2D website `http://wxart2d.sourceforge.net/ <http://wxart2d.sourceforge.net/>`_. 









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>SVGFileDC</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.SVGFileDC_inheritance.png" alt="Inheritance diagram of SVGFileDC" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.SVGFileDC.html" title="wx.SVGFileDC" alt="" coords="5,160,119,189"/> <area shape="rect" id="node2" href="wx.DC.html" title="wx.DC" alt="" coords="26,83,98,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="19,5,105,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.SVGFileDC.__init__`                                                   Initializes a :ref:`wx.SVGFileDC`  with the given `f`  filename with the given `Width`  and `Height`  at `dpi`  resolution.
:meth:`~wx.SVGFileDC.Clear`                                                      Draws a rectangle the size of the ``SVG`` using the :meth:`wx.DC.SetBackground`   brush.
:meth:`~wx.SVGFileDC.CrossHair`                                                  Functions not implemented in this DC class.
:meth:`~wx.SVGFileDC.DestroyClippingRegion`                                      Destroys the current clipping region so that none of the DC is clipped.
:meth:`~wx.SVGFileDC.EndDoc`                                                     Does nothing.
:meth:`~wx.SVGFileDC.EndPage`                                                    Does nothing.
:meth:`~wx.SVGFileDC.FloodFill`                                                  Functions not implemented in this DC class.
:meth:`~wx.SVGFileDC.GetClippingBox`                                             Functions not implemented in this DC class.
:meth:`~wx.SVGFileDC.GetPixel`                                                   Functions not implemented in this DC class.
:meth:`~wx.SVGFileDC.SetClippingRegion`                                          Sets the clipping region for this device context to the intersection of the given region described by the parameters of this method and the previously set clipping region.
:meth:`~wx.SVGFileDC.SetLogicalFunction`                                         Does the same as :meth:`wx.DC.SetLogicalFunction` , except that only ``wx.COPY`` is available.
:meth:`~wx.SVGFileDC.SetPalette`                                                 Functions not implemented in this DC class.
:meth:`~wx.SVGFileDC.StartDoc`                                                   Functions not implemented in this DC class.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.SVGFileDC(DC)

   **Possible constructors**::

       SVGFileDC(filename, width=320, height=240, dpi=72)
       
   
   A SVGFileDC is a device context onto which graphics and text can be
   drawn, and the output produced as a vector file, in ``SVG`` format.



   .. method:: __init__(self, filename, width=320, height=240, dpi=72)

      Initializes a :ref:`wx.SVGFileDC`  with the given `f`  filename with the given `Width`  and `Height`  at `dpi`  resolution.                  


      :param `filename`: 
      :type `filename`: string
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      :param `dpi`: 
      :type `dpi`: float







   .. method:: Clear(self)

      Draws a rectangle the size of the ``SVG`` using the :meth:`wx.DC.SetBackground`   brush.                   





   .. method:: CrossHair(self, x, y)

      Functions not implemented in this DC class.                  


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int







   .. method:: DestroyClippingRegion(self)

      Destroys the current clipping region so that none of the DC is clipped.                  

      Since intersections arising from sequential calls to SetClippingRegion are represented with nested ``SVG`` group elements (<g>), all such groups are closed when DestroyClippingRegion is called.                   





   .. method:: EndDoc(self)

      Does nothing.                   





   .. method:: EndPage(self)

      Does nothing.                   





   .. method:: FloodFill(self, x, y, colour, style=FLOOD_SURFACE)

      Functions not implemented in this DC class.                  


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `colour`: 
      :type `colour`: wx.Colour
      :param `style`: 
      :type `style`: wx.FloodFillStyle




      :rtype: `bool`








   .. method:: GetClippingBox(self, x, y, width, height)

      Functions not implemented in this DC class.                  


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int







   .. method:: GetPixel(self, x, y, colour)

      Functions not implemented in this DC class.                  


      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `colour`: 
      :type `colour`: wx.Colour




      :rtype: `bool`








   .. method:: SetClippingRegion(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetClippingRegion** `(self, x, y, width, height)`
      
      Sets the clipping region for this device context to the intersection of the given region described by the parameters of this method and the previously set clipping region.                  
      
      Clipping is implemented in the ``SVG`` output using ``SVG`` group elements (<g>), with nested group elements being used to represent clipping region intersections when two or more calls are made to :meth:`SetClippingRegion` .                  
      
      
      :param `x`: 
      :type `x`: int
      :param `y`: 
      :type `y`: int
      :param `width`: 
      :type `width`: int
      :param `height`: 
      :type `height`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetClippingRegion** `(self, pt, sz)`
      
      This is an overloaded member function, provided for convenience.                  
      
      It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      :param `sz`: 
      :type `sz`: wx.Size
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetClippingRegion** `(self, rect)`
      
      This is an overloaded member function, provided for convenience.                  
      
      It differs from the above function only in what argument(s) it accepts.                  
      
      
      :param `rect`: 
      :type `rect`: wx.Rect
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetClippingRegion** `(self, region)`
      
      This function is not implemented in this DC class.                  
      
      It could be implemented in future if a GetPoints() function were made available on :ref:`wx.Region`.                  
      
      
      :param `region`: 
      :type `region`: wx.Region
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetLogicalFunction(self, function)

      Does the same as :meth:`wx.DC.SetLogicalFunction` , except that only ``wx.COPY`` is available.                  

      Trying to set one of the other values will fail.                  


      :param `function`: 
      :type `function`: wx.RasterOperationMode







   .. method:: SetPalette(self, palette)

      Functions not implemented in this DC class.                  


      :param `palette`: 
      :type `palette`: wx.Palette







   .. method:: StartDoc(self, message)

      Functions not implemented in this DC class.                  


      :param `message`: 
      :type `message`: string




      :rtype: `bool`








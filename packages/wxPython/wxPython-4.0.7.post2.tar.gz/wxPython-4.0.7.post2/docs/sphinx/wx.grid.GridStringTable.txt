.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.grid.GridStringTable:

==========================================================================================================================================
|phoenix_title|  **wx.grid.GridStringTable**
==========================================================================================================================================

Simplest type of data table for a grid for small tables of strings that are stored in memory.           




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GridStringTable</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.grid.GridStringTable_inheritance.png" alt="Inheritance diagram of GridStringTable" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.grid.GridStringTable.html" title="wx.grid.GridStringTable" alt="" coords="5,160,179,189"/> <area shape="rect" id="node2" href="wx.grid.GridTableBase.html" title="wx.grid.GridTableBase" alt="" coords="9,83,175,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="49,5,135,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.grid.GridStringTable.__init__`                                        
:meth:`~wx.grid.GridStringTable.AppendCols`                                      Exactly the same as :meth:`~GridStringTable.AppendRows`   but for columns.
:meth:`~wx.grid.GridStringTable.AppendRows`                                      Append additional rows at the end of the table.
:meth:`~wx.grid.GridStringTable.Clear`                                           Clear the table contents.
:meth:`~wx.grid.GridStringTable.DeleteCols`                                      Exactly the same as :meth:`~GridStringTable.DeleteRows`   but for columns.
:meth:`~wx.grid.GridStringTable.DeleteRows`                                      Delete rows from the table.
:meth:`~wx.grid.GridStringTable.GetColLabelValue`                                Return the label of the specified column.
:meth:`~wx.grid.GridStringTable.GetNumberCols`                                   Must be overridden to return the number of columns in the table.
:meth:`~wx.grid.GridStringTable.GetNumberRows`                                   Must be overridden to return the number of rows in the table.
:meth:`~wx.grid.GridStringTable.GetRowLabelValue`                                Return the label of the specified row.
:meth:`~wx.grid.GridStringTable.GetValue`                                        Must be overridden to implement accessing the table values as text.
:meth:`~wx.grid.GridStringTable.InsertCols`                                      Exactly the same as :meth:`~GridStringTable.InsertRows`   but for columns.
:meth:`~wx.grid.GridStringTable.InsertRows`                                      Insert additional rows into the table.
:meth:`~wx.grid.GridStringTable.SetColLabelValue`                                Exactly the same as :meth:`~GridStringTable.SetRowLabelValue`   but for columns.
:meth:`~wx.grid.GridStringTable.SetRowLabelValue`                                Set the given label for the specified row.
:meth:`~wx.grid.GridStringTable.SetValue`                                        Must be overridden to implement setting the table values as text.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.grid.GridStringTable.NumberCols`                                      See :meth:`~wx.grid.GridStringTable.GetNumberCols`
:attr:`~wx.grid.GridStringTable.NumberRows`                                      See :meth:`~wx.grid.GridStringTable.GetNumberRows`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.grid.GridStringTable(GridTableBase)

   **Possible constructors**::

       GridStringTable()
       
       GridStringTable(numRows, numCols)
       
   
   Simplest type of data table for a grid for small tables of strings
   that are stored in memory.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, numRows, numCols)`
      
      
      
      
      :param `numRows`: 
      :type `numRows`: int
      :param `numCols`: 
      :type `numCols`: int
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AppendCols(self, numCols=1)

      Exactly the same as :meth:`AppendRows`   but for columns.                  


      :param `numCols`: 
      :type `numCols`: int




      :rtype: `bool`








   .. method:: AppendRows(self, numRows=1)

      Append additional rows at the end of the table.                  

      This method is provided in addition to :meth:`InsertRows`   as some data models may only support appending rows to them but not inserting them at arbitrary locations. In such case you may implement this method only and leave :meth:`InsertRows`   unimplemented. 




      :param `numRows`: The number of rows to add.   
      :type `numRows`: int






      :rtype: `bool`



                  





   .. method:: Clear(self)

      Clear the table contents.                  

      This method is used by :meth:`wx.grid.Grid.ClearGrid` .                   





   .. method:: DeleteCols(self, pos=0, numCols=1)

      Exactly the same as :meth:`DeleteRows`   but for columns.                  


      :param `pos`: 
      :type `pos`: int
      :param `numCols`: 
      :type `numCols`: int




      :rtype: `bool`








   .. method:: DeleteRows(self, pos=0, numRows=1)

      Delete rows from the table.                  

      Notice that currently deleting a row intersecting a multi-cell (see SetCellSize()) is not supported and will result in a crash. 




      :param `pos`: The first row to delete.   
      :type `pos`: int
      :param `numRows`: The number of rows to delete.   
      :type `numRows`: int








      :rtype: `bool`



                  





   .. method:: GetColLabelValue(self, col)

      Return the label of the specified column.                  


      :param `col`: 
      :type `col`: int




      :rtype: `string`








   .. method:: GetNumberCols(self)

      Must be overridden to return the number of columns in the table.                  

      For backwards compatibility reasons, this method is not const. Use :meth:`GetColsCount`   instead of it in  methods of derived table classes,                  

      :rtype: `int`








   .. method:: GetNumberRows(self)

      Must be overridden to return the number of rows in the table.                  

      For backwards compatibility reasons, this method is not const. Use :meth:`GetRowsCount`   instead of it in  methods of derived table classes.                  

      :rtype: `int`








   .. method:: GetRowLabelValue(self, row)

      Return the label of the specified row.                  


      :param `row`: 
      :type `row`: int




      :rtype: `string`








   .. method:: GetValue(self, row, col)

      Must be overridden to implement accessing the table values as text.                  


      :param `row`: 
      :type `row`: int
      :param `col`: 
      :type `col`: int




      :rtype: `string`








   .. method:: InsertCols(self, pos=0, numCols=1)

      Exactly the same as :meth:`InsertRows`   but for columns.                  


      :param `pos`: 
      :type `pos`: int
      :param `numCols`: 
      :type `numCols`: int




      :rtype: `bool`








   .. method:: InsertRows(self, pos=0, numRows=1)

      Insert additional rows into the table.                  




      :param `pos`: The position of the first new row.   
      :type `pos`: int
      :param `numRows`: The number of rows to insert.   
      :type `numRows`: int








      :rtype: `bool`



                  





   .. method:: SetColLabelValue(self, col, label)

      Exactly the same as :meth:`SetRowLabelValue`   but for columns.                  


      :param `col`: 
      :type `col`: int
      :param `label`: 
      :type `label`: string







   .. method:: SetRowLabelValue(self, row, label)

      Set the given label for the specified row.                  

      The default version does nothing, i.e. the label is not stored. You must override this method in your derived class if you wish :meth:`wx.grid.Grid.SetRowLabelValue`   to work.                  


      :param `row`: 
      :type `row`: int
      :param `label`: 
      :type `label`: string







   .. method:: SetValue(self, row, col, value)

      Must be overridden to implement setting the table values as text.                  


      :param `row`: 
      :type `row`: int
      :param `col`: 
      :type `col`: int
      :param `value`: 
      :type `value`: string







   .. attribute:: NumberCols

      See :meth:`~wx.grid.GridStringTable.GetNumberCols`


   .. attribute:: NumberRows

      See :meth:`~wx.grid.GridStringTable.GetNumberRows`


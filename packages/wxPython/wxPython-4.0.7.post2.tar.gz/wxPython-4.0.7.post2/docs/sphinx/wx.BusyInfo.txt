.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.BusyInfo:

==========================================================================================================================================
|phoenix_title|  **wx.BusyInfo**
==========================================================================================================================================

This class makes it easy to tell your user that the program is temporarily busy.          

Just create a :ref:`wx.BusyInfo`  object on the stack, and within the current scope, a message window will be shown. 

For example: 

::

            wait = wx.BusyInfo("Please wait, working...")

            for i in xrange(10000):
                DoACalculation()

            del wait



It works by creating a window in the constructor, and deleting it in the destructor. 

You may also want to call TheApp.Yield() to refresh the window periodically (in case it had been obscured by other windows, for example) like this: 

::

            disableAll = wx.WindowDisabler()
            wait = wx.BusyInfo("Please wait, working...")

            for i in xrange(10000):
                DoACalculation()

                if i % 1000 == 0:
                    wx.GetApp().Yield()

            del wait



but take care to not cause undesirable reentrancies when doing it (see :meth:`wx.App.Yield`   for more details). The simplest way to do it is to use :ref:`wx.WindowDisabler`  class as illustrated in the above example. 

Note that a :ref:`wx.BusyInfo`  is always built with the  ``STAY_ON_TOP``   window style (see  :ref:`wx.Frame`  window styles for more info). 









|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>BusyInfo</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.BusyInfo_inheritance.png" alt="Inheritance diagram of BusyInfo" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.BusyInfo.html" title="wx.BusyInfo" alt="" coords="5,5,108,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.BusyInfo.__init__`                                                    Constructs a busy info window as child of `parent`  and displays `msg`  in it.
:meth:`~wx.BusyInfo.__enter__`                                                   
:meth:`~wx.BusyInfo.__exit__`                                                    
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.BusyInfo(object)

   **Possible constructors**::

       BusyInfo(msg, parent=None)
       
   
   This class makes it easy to tell your user that the program is
   temporarily busy.



   .. method:: __init__(self, msg, parent=None)

      Constructs a busy info window as child of `parent`  and displays `msg`  in it.                  

                


      :param `msg`: 
      :type `msg`: string
      :param `parent`: 
      :type `parent`: wx.Window






      .. note:: 

         If `parent`  is not ``None`` you must ensure that it is not closed while the busy info is shown.   








   .. method:: __enter__(self)




   .. method:: __exit__(self, exc_type, exc_val, exc_tb)




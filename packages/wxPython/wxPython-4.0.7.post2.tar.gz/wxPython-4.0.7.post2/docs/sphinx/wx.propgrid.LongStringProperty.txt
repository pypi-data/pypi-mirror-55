.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.propgrid.LongStringProperty:

==========================================================================================================================================
|phoenix_title|  **wx.propgrid.LongStringProperty**
==========================================================================================================================================

Like :ref:`wx.propgrid.StringProperty`, but has a button that triggers a small text editor dialog.           




|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>LongStringProperty</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.propgrid.LongStringProperty_inheritance.png" alt="Inheritance diagram of LongStringProperty" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.propgrid.LongStringProperty.html" title="wx.propgrid.LongStringProperty" alt="" coords="5,160,232,189"/> <area shape="rect" id="node2" href="wx.propgrid.PGProperty.html" title="wx.propgrid.PGProperty" alt="" coords="31,83,207,112"/> <area shape="rect" id="node3" href="wx.Object.html" title="wx.Object" alt="" coords="75,5,162,35"/> </map> 
   </p>
   </div>

|


|sub_classes| Known Subclasses
==============================

:ref:`wx.propgrid.DirProperty`

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.propgrid.LongStringProperty.__init__`                                 
:meth:`~wx.propgrid.LongStringProperty.DisplayEditorDialog`                      
:meth:`~wx.propgrid.LongStringProperty.OnButtonClick`                            
:meth:`~wx.propgrid.LongStringProperty.OnEvent`                                  Events received by editor widgets are processed here.
:meth:`~wx.propgrid.LongStringProperty.StringToValue`                            Converts text into :ref:`Variant`  value appropriate for this property.
:meth:`~wx.propgrid.LongStringProperty.ValueToString`                            Converts property value into a text representation.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.propgrid.LongStringProperty(PGProperty)

   **Possible constructors**::

       LongStringProperty(label=PG_LABEL, name=PG_LABEL, value="")
       
   
   Like StringProperty, but has a button that triggers a small text
   editor dialog.



   .. method:: __init__(self, label=PG_LABEL, name=PG_LABEL, value=EmptyString)




      :param `label`: 
      :type `label`: string
      :param `name`: 
      :type `name`: string
      :param `value`: 
      :type `value`: string







   .. staticmethod:: DisplayEditorDialog(prop, propGrid, value)




      :param `prop`: 
      :type `prop`: wx.propgrid.PGProperty
      :param `propGrid`: 
      :type `propGrid`: wx.propgrid.PropertyGrid
      :param `value`: 
      :type `value`: string




      :rtype: `tuple`







      :returns: 

         ( `bool`, `value` ) 








   .. method:: OnButtonClick(self, propgrid, value)




      :param `propgrid`: 
      :type `propgrid`: wx.propgrid.PropertyGrid
      :param `value`: 
      :type `value`: string




      :rtype: `tuple`







      :returns: 

         ( `bool`, `value` ) 








   .. method:: OnEvent(self, propgrid, wnd_primary, event)

      Events received by editor widgets are processed here.                  

      Note that editor class usually processes most events. Some, such as button press events of TextCtrlAndButton class, can be handled here. Also, if custom handling for regular events is desired, then that can also be done (for example, :ref:`wx.propgrid.SystemColourProperty`  custom handles  ``wxEVT_CHOICE``   to display colour picker dialog when 'custom' selection is made). 

      If the event causes value to be changed, :meth:`SetValueInEvent`   should be called to set the new value. 

      The parameter `event`  is the associated :ref:`wx.Event`. 




      :param `propgrid`: 
      :type `propgrid`: wx.propgrid.PropertyGrid
      :param `wnd_primary`: 
      :type `wnd_primary`: wx.Window
      :param `event`: 
      :type `event`: wx.Event




      return ``True`` if any changes in value should be reported. 



      :rtype: `bool`



                  



      .. note:: 

   

         - If property uses choice control, and displays a dialog on some choice items, then it is preferred to display that dialog in IntToValue instead of OnEvent.  











   .. method:: StringToValue(self, text, argFlags=0)

      Converts text into :ref:`Variant`  value appropriate for this property.                  




      :param `text`: Text to be translated into variant.  
      :type `text`: string
      :param `argFlags`: If ``wx.propgrid.PG_FULL_VALUE`` is set, returns complete, storable value instead of displayable one (they may be different). If ``wx.propgrid.PG_COMPOSITE_FRAGMENT`` is set, text is interpreted as a part of composite property string value (as generated by :meth:`ValueToString`   called with this same flag).  
      :type `argFlags`: int










      :rtype: `tuple`




      You might want to take into account that m_value is Null variant if property value is unspecified (which is usually only case if you explicitly enabled that sort behaviour).                    



      :returns: 

         ( `bool`, `variant` ) 







      .. note:: 

         Default implementation converts semicolon delimited tokens into child values. Only works for properties with children.  








   .. method:: ValueToString(self, value, argFlags=0)

      Converts property value into a text representation.                  




      :param `value`: Value to be converted.   
      :type `value`: PGVariant
      :param `argFlags`: If 0 (default value), then displayed string is returned. If ``wx.propgrid.PG_FULL_VALUE`` is set, returns complete, storable string value instead of displayable. If ``wx.propgrid.PG_EDITABLE_VALUE`` is set, returns string value that must be editable in textctrl. If ``wx.propgrid.PG_COMPOSITE_FRAGMENT`` is set, returns text that is appropriate to display as a part of string property's composite text representation.  
      :type `argFlags`: int








      :rtype: `string`



                  



      .. note:: 

         Default implementation calls :meth:`GenerateComposedValue` .   








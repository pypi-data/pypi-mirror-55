.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.SearchCtrl:

==========================================================================================================================================
|phoenix_title|  **wx.SearchCtrl**
==========================================================================================================================================

A search control is a composite control with a search button, a text control, and a cancel button.          





.. _SearchCtrl-styles:

|styles| Window Styles
================================

This class supports the following styles: 

  

- ``wx.TE_PROCESS_ENTER``: The control will generate the event  ``wxEVT_TEXT_ENTER``   (otherwise pressing Enter key is either processed internally by the control or used for navigation between dialog controls).   
- ``wx.TE_PROCESS_TAB``: The control will receive  ``wxEVT_CHAR``   events for ``TAB`` pressed - normally, ``TAB`` is used for passing to the next control in a dialog instead. For the control created with this style, you can still use Ctrl-Enter to pass to the next control from the keyboard.   
- ``wx.TE_NOHIDESEL``: By default, the Windows text control doesn't show the selection when it doesn't have focus - use this style to force it to always show it. It doesn't do anything under other platforms.  
- ``wx.TE_LEFT``: The text in the control will be left-justified (default).  
- ``wx.TE_CENTRE``: The text in the control will be centered (currently wxMSW and wxGTK2 only).  
- ``wx.TE_RIGHT``: The text in the control will be right-justified (currently wxMSW and wxGTK2 only).  
- ``TE_CAPITALIZE``: On PocketPC and Smartphone, causes the first letter to be capitalized.  








.. _SearchCtrl-events:

|events| Events Emitted by this Class
=====================================

Handlers bound for the following event types will receive a :ref:`wx.CommandEvent` parameter.


- EVT_SEARCHCTRL_SEARCH_BTN: Respond to a  ``wxEVT_SEARCHCTRL_SEARCH_BTN``   event, generated when the search button is clicked. Note that this does not initiate a search on its own, you need to perform the appropriate action in your event handler. You may use::

           event.GetString()

  to retrieve the string to search for in the event handler code.  
- EVT_SEARCHCTRL_CANCEL_BTN: Respond to a  ``wxEVT_SEARCHCTRL_CANCEL_BTN``   event, generated when the cancel button is clicked.   








         



.. seealso:: :meth:`wx.TextCtrl.Create` , :ref:`wx.Validator`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>SearchCtrl</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.SearchCtrl_inheritance.png" alt="Inheritance diagram of SearchCtrl" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.SearchCtrl.html" title="wx.SearchCtrl" alt="" coords="114,392,226,421"/> <area shape="rect" id="node2" href="wx.TextCtrl.html" title="wx.TextCtrl" alt="" coords="123,315,217,344"/> <area shape="rect" id="node3" href="wx.Control.html" title="wx.Control" alt="" coords="63,237,155,267"/> <area shape="rect" id="node4" href="wx.TextEntry.html" title="wx.TextEntry" alt="" coords="179,237,286,267"/> <area shape="rect" id="node5" href="wx.Window.html" title="wx.Window" alt="" coords="60,160,157,189"/> <area shape="rect" id="node6" href="wx.EvtHandler.html" title="wx.EvtHandler" alt="" coords="50,83,167,112"/> <area shape="rect" id="node7" href="wx.Object.html" title="wx.Object" alt="" coords="5,5,92,35"/> <area shape="rect" id="node8" href="wx.Trackable.html" title="wx.Trackable" alt="" coords="117,5,223,35"/> </map> 
   </p>
   </div>

|


|appearance| Control Appearance
===============================

|

.. figure:: _static/images/widgets/fullsize/wxmsw/wx.searchctrl.png
   :alt: wxMSW
   :figclass: floatleft

   **wxMSW**


.. figure:: _static/images/widgets/fullsize/wxmac/wx.searchctrl.png
   :alt: wxMAC
   :figclass: floatright

   **wxMAC**


.. figure:: _static/images/widgets/fullsize/wxgtk/wx.searchctrl.png
   :alt: wxGTK
   :figclass: floatcenter

   **wxGTK**


|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.SearchCtrl.__init__`                                                  Default constructor.
:meth:`~wx.SearchCtrl.AppendText`                                                Appends the text to the end of the text control.
:meth:`~wx.SearchCtrl.AutoComplete`                                              Call this function to enable auto-completion of the text typed in a single-line text control using the given `choices`.
:meth:`~wx.SearchCtrl.AutoCompleteDirectories`                                   Call this function to enable auto-completion of the text using the file system directories.
:meth:`~wx.SearchCtrl.AutoCompleteFileNames`                                     Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths.
:meth:`~wx.SearchCtrl.CanCopy`                                                   Returns ``True`` if the selection can be copied to the clipboard.
:meth:`~wx.SearchCtrl.CanCut`                                                    Returns ``True`` if the selection can be cut to the clipboard.
:meth:`~wx.SearchCtrl.CanPaste`                                                  Returns ``True`` if the contents of the clipboard can be pasted into the text control.
:meth:`~wx.SearchCtrl.CanRedo`                                                   Returns ``True`` if there is a redo facility available and the last operation can be redone.
:meth:`~wx.SearchCtrl.CanUndo`                                                   Returns ``True`` if there is an undo facility available and the last operation can be undone.
:meth:`~wx.SearchCtrl.ChangeValue`                                               Sets the new text control value.
:meth:`~wx.SearchCtrl.Clear`                                                     Clears the text in the control.
:meth:`~wx.SearchCtrl.Copy`                                                      Copies the selected text to the clipboard.
:meth:`~wx.SearchCtrl.Create`                                                    
:meth:`~wx.SearchCtrl.Cut`                                                       Copies the selected text to the clipboard and removes it from the control.
:meth:`~wx.SearchCtrl.DiscardEdits`                                              Resets the internal modified flag as if the current changes had been saved.
:meth:`~wx.SearchCtrl.EmulateKeyPress`                                           This function inserts into the control the character which would have been inserted if the given key event had occurred in the text control.
:meth:`~wx.SearchCtrl.GetClassDefaultAttributes`                                 
:meth:`~wx.SearchCtrl.GetDefaultStyle`                                           Returns the style currently used for the new text.
:meth:`~wx.SearchCtrl.GetDescriptiveText`                                        Return the text displayed when there is not yet any user input.
:meth:`~wx.SearchCtrl.GetHint`                                                   Returns the current hint string.
:meth:`~wx.SearchCtrl.GetInsertionPoint`                                         Returns the insertion point, or cursor, position.
:meth:`~wx.SearchCtrl.GetLastPosition`                                           Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.
:meth:`~wx.SearchCtrl.GetLineLength`                                             Gets the length of the specified line, not including any trailing newline character(s).
:meth:`~wx.SearchCtrl.GetLineText`                                               Returns the contents of a given line in the text control, not including any trailing newline character(s).
:meth:`~wx.SearchCtrl.GetMargins`                                                Returns the margins used by the control.
:meth:`~wx.SearchCtrl.GetMenu`                                                   Returns a pointer to the search control's menu object or ``None`` if there is no menu attached.
:meth:`~wx.SearchCtrl.GetNumberOfLines`                                          Returns the number of lines in the text control buffer.
:meth:`~wx.SearchCtrl.GetRange`                                                  Returns the string containing the text starting in the positions `from`  and up to `to`  in the control.
:meth:`~wx.SearchCtrl.GetSelection`                                              Gets the current selection span.
:meth:`~wx.SearchCtrl.GetStringSelection`                                        Gets the text currently selected in the control.
:meth:`~wx.SearchCtrl.GetStyle`                                                  Returns the style at this position in the text control.
:meth:`~wx.SearchCtrl.GetValue`                                                  Gets the contents of the control.
:meth:`~wx.SearchCtrl.HitTestPos`                                                Finds the position of the character at the specified point.
:meth:`~wx.SearchCtrl.HitTest`                                                   Finds the row and column of the character at the specified point.
:meth:`~wx.SearchCtrl.IsCancelButtonVisible`                                     Returns the cancel button's visibility state.
:meth:`~wx.SearchCtrl.IsEditable`                                                Returns ``True`` if the controls contents may be edited by user (note that it always can be changed by the program).
:meth:`~wx.SearchCtrl.IsEmpty`                                                   Returns ``True`` if the control is currently empty.
:meth:`~wx.SearchCtrl.IsModified`                                                Returns ``True`` if the text has been modified by user.
:meth:`~wx.SearchCtrl.IsMultiLine`                                               Returns ``True`` if this is a multi line edit control and ``False`` otherwise.
:meth:`~wx.SearchCtrl.IsSearchButtonVisible`                                     Returns the search button visibility value.
:meth:`~wx.SearchCtrl.IsSingleLine`                                              Returns ``True`` if this is a single line edit control and ``False`` otherwise.
:meth:`~wx.SearchCtrl.MarkDirty`                                                 Mark text as modified (dirty).
:meth:`~wx.SearchCtrl.Paste`                                                     Pastes text from the clipboard to the text item.
:meth:`~wx.SearchCtrl.PositionToCoords`                                          Converts given text position to client coordinates in pixels.
:meth:`~wx.SearchCtrl.PositionToXY`                                              Converts given position to a zero-based column, line number pair.
:meth:`~wx.SearchCtrl.Redo`                                                      If there is a redo facility and the last operation can be redone, redoes the last operation.
:meth:`~wx.SearchCtrl.Remove`                                                    Removes the text starting at the first given position up to (but not including) the character at the last position.
:meth:`~wx.SearchCtrl.Replace`                                                   Replaces the text starting at the first position up to (but not including) the character at the last position with the given text.
:meth:`~wx.SearchCtrl.SelectAll`                                                 Selects all text in the control.
:meth:`~wx.SearchCtrl.SelectNone`                                                Deselects selected text in the control.
:meth:`~wx.SearchCtrl.SetCancelBitmap`                                           
:meth:`~wx.SearchCtrl.SetDefaultStyle`                                           Changes the default style to use for the new text which is going to be added to the control using :meth:`~SearchCtrl.WriteText`   or :meth:`~SearchCtrl.AppendText` .
:meth:`~wx.SearchCtrl.SetDescriptiveText`                                        Set the text to be displayed in the search control when the user has not yet typed anything in it.
:meth:`~wx.SearchCtrl.SetEditable`                                               Makes the text item editable or read-only, overriding the ``wx.TE_READONLY``  flag.
:meth:`~wx.SearchCtrl.SetHint`                                                   Sets a hint shown in an empty unfocused text control.
:meth:`~wx.SearchCtrl.SetInsertionPoint`                                         Sets the insertion point at the given position.
:meth:`~wx.SearchCtrl.SetInsertionPointEnd`                                      Sets the insertion point at the end of the text control.
:meth:`~wx.SearchCtrl.SetMargins`                                                Attempts to set the control margins.
:meth:`~wx.SearchCtrl.SetMaxLength`                                              This function sets the maximum number of characters the user can enter into the control.
:meth:`~wx.SearchCtrl.SetMenu`                                                   Sets the search control's menu object.
:meth:`~wx.SearchCtrl.SetModified`                                               Marks the control as being modified by the user or not.
:meth:`~wx.SearchCtrl.SetSearchBitmap`                                           
:meth:`~wx.SearchCtrl.SetSearchMenuBitmap`                                       
:meth:`~wx.SearchCtrl.SetSelection`                                              Selects the text starting at the first position up to (but not including) the character at the last position.
:meth:`~wx.SearchCtrl.SetStyle`                                                  Changes the style of the given range.
:meth:`~wx.SearchCtrl.SetValue`                                                  Sets the new text control value.
:meth:`~wx.SearchCtrl.ShowCancelButton`                                          Shows or hides the cancel button.
:meth:`~wx.SearchCtrl.ShowPosition`                                              Makes the line containing the given position visible.
:meth:`~wx.SearchCtrl.ShowSearchButton`                                          Sets the search button visibility value on the search control.
:meth:`~wx.SearchCtrl.Undo`                                                      If there is an undo facility and the last operation can be undone, undoes the last operation.
:meth:`~wx.SearchCtrl.WriteText`                                                 Writes the text into the text control at the current insertion position.
:meth:`~wx.SearchCtrl.XYToPosition`                                              Converts the given zero based column and line number to a position.
:meth:`~wx.SearchCtrl.flush`                                                     ``NOP``, for file-like compatibility.
:meth:`~wx.SearchCtrl.write`                                                     Append text to the textctrl, for file-like compatibility.
================================================================================ ================================================================================


|


|property_summary| Properties Summary
=====================================

================================================================================ ================================================================================
:attr:`~wx.SearchCtrl.CancelButtonVisible`                                       See :meth:`~wx.SearchCtrl.IsCancelButtonVisible` and :meth:`~wx.SearchCtrl.ShowCancelButton`
:attr:`~wx.SearchCtrl.DefaultStyle`                                              See :meth:`~wx.SearchCtrl.GetDefaultStyle` and :meth:`~wx.SearchCtrl.SetDefaultStyle`
:attr:`~wx.SearchCtrl.DescriptiveText`                                           See :meth:`~wx.SearchCtrl.GetDescriptiveText` and :meth:`~wx.SearchCtrl.SetDescriptiveText`
:attr:`~wx.SearchCtrl.Hint`                                                      See :meth:`~wx.SearchCtrl.GetHint` and :meth:`~wx.SearchCtrl.SetHint`
:attr:`~wx.SearchCtrl.InsertionPoint`                                            See :meth:`~wx.SearchCtrl.GetInsertionPoint` and :meth:`~wx.SearchCtrl.SetInsertionPoint`
:attr:`~wx.SearchCtrl.LastPosition`                                              See :meth:`~wx.SearchCtrl.GetLastPosition`
:attr:`~wx.SearchCtrl.Margins`                                                   See :meth:`~wx.SearchCtrl.GetMargins` and :meth:`~wx.SearchCtrl.SetMargins`
:attr:`~wx.SearchCtrl.Menu`                                                      See :meth:`~wx.SearchCtrl.GetMenu` and :meth:`~wx.SearchCtrl.SetMenu`
:attr:`~wx.SearchCtrl.NumberOfLines`                                             See :meth:`~wx.SearchCtrl.GetNumberOfLines`
:attr:`~wx.SearchCtrl.SearchButtonVisible`                                       See :meth:`~wx.SearchCtrl.IsSearchButtonVisible` and :meth:`~wx.SearchCtrl.ShowSearchButton`
:attr:`~wx.SearchCtrl.StringSelection`                                           See :meth:`~wx.SearchCtrl.GetStringSelection`
:attr:`~wx.SearchCtrl.Value`                                                     See :meth:`~wx.SearchCtrl.GetValue` and :meth:`~wx.SearchCtrl.SetValue`
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.SearchCtrl(Control)

   **Possible constructors**::

       SearchCtrl()
       
       SearchCtrl(parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition,
                  size=DefaultSize, style=0, validator=DefaultValidator,
                  name=SearchCtrlNameStr)
       
   
   A search control is a composite control with a search button, a text
   control, and a cancel button.



   .. method:: __init__(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self)`
      
      Default constructor.                   
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **__init__** `(self, parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=SearchCtrlNameStr)`
      
      Constructor, creating and showing a text control.                  
      
      
      
      
      :param `parent`: Parent window. Should not be ``None``.   
      :type `parent`: wx.Window
      :param `id`: Control identifier. A value of -1 denotes a default value.   
      :type `id`: wx.WindowID
      :param `value`: Default text value.   
      :type `value`: string
      :param `pos`: Text control position.   
      :type `pos`: wx.Point
      :param `size`: Text control size.   
      :type `size`: wx.Size
      :param `style`: Window style. See :ref:`wx.SearchCtrl`.   
      :type `style`: long
      :param `validator`: Window validator.   
      :type `validator`: wx.Validator
      :param `name`: Window name.  
      :type `name`: string
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
                        
      
      
      
      .. seealso:: :meth:`wx.TextCtrl.Create` , :ref:`wx.Validator`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AppendText(self, text)

      Appends the text to the end of the text control.                  




      :param `text`: Text to write to the text control.  
      :type `text`: string




                  



      .. note:: 

         After the text is appended, the insertion point will be at the end of the text control. If this behaviour is not desired, the programmer should use :meth:`GetInsertionPoint`   and :meth:`SetInsertionPoint` .  







      .. seealso:: :meth:`WriteText`     








   .. method:: AutoComplete(self, *args, **kw)



      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **AutoComplete** `(self, choices)`
      
      Call this function to enable auto-completion of the text typed in a single-line text control using the given `choices`.                  
      
      Notice that currently this function is only implemented in wxGTK2, wxMSW and OSX/Cocoa (for :ref:`wx.TextCtrl`  only, but not for :ref:`wx.ComboBox`) ports and does nothing under the other platforms. 
      
                      
      
      
      :param `choices`: 
      :type `choices`: list of strings
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :returns: 
      
         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  
      
      
      
      
      
      
      
      .. versionadded:: 2.9.0 
          
      
      
      
      
      
      
      
      .. seealso:: :meth:`AutoCompleteFileNames`     
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **AutoComplete** `(self, completer)`
      
      Enable auto-completion using the provided completer object.                  
      
      This method should be used instead of :meth:`AutoComplete`   overload taking the array of possible completions if the total number of strings is too big as it allows returning the completions dynamically, depending on the text already entered by user and so is more efficient. 
      
      The specified `completer`  object will be used to retrieve the list of possible completions for the already entered text and will be deleted by :ref:`wx.TextEntry`  itself when it's not needed any longer. 
      
      Notice that you need to include  :ref:`/textcompleter.h`  in order to define your class inheriting from  :ref:`wx.TextCompleter`. 
      
      Currently this method is only implemented in wxMSW and OSX/Cocoa (for :ref:`wx.TextCtrl`  only, but not for :ref:`wx.ComboBox`). 
      
      
      
      
      :param `completer`: The object to be used for generating completions if non-NULL. If it is ``None``, auto-completion is disabled. The :ref:`wx.TextEntry`  object takes ownership of this pointer and will delete it in any case (i.e. even if this method returns ``False``).  
      :type `completer`: wx.TextCompleter
      
      
      
      
      
      
      :rtype: `bool`
      
      
      
                        
      
      
      
      :returns: 
      
         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  
      
      
      
      
      
      
      
      .. versionadded:: 2.9.2 
          
      
      
      
      
      
      
      
      .. seealso:: :ref:`wx.TextCompleter`    
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: AutoCompleteDirectories(self)

      Call this function to enable auto-completion of the text using the file system directories.                  

      Unlike :meth:`AutoCompleteFileNames`   which completes both file names and directories, this function only completes the directory names. 

      Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms. 

                

      :rtype: `bool`







      :returns: 

         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  







      .. versionadded:: 2.9.3 
    







      .. seealso:: :meth:`AutoComplete`     








   .. method:: AutoCompleteFileNames(self)

      Call this function to enable auto-completion of the text typed in a single-line text control using all valid file system paths.                  

      Notice that currently this function is only implemented in wxMSW port and does nothing under the other platforms. 

                

      :rtype: `bool`







      :returns: 

         ``True`` if the auto-completion was enabled or ``False`` if the operation failed, typically because auto-completion is not supported by the current platform.  







      .. versionadded:: 2.9.0 
    







      .. seealso:: :meth:`AutoComplete`     








   .. method:: CanCopy(self)

      Returns ``True`` if the selection can be copied to the clipboard.                  

      :rtype: `bool`








   .. method:: CanCut(self)

      Returns ``True`` if the selection can be cut to the clipboard.                  

      :rtype: `bool`








   .. method:: CanPaste(self)

      Returns ``True`` if the contents of the clipboard can be pasted into the text control.                  

      On some platforms (Motif, GTK) this is an approximation and returns ``True`` if the control is editable, ``False`` otherwise.                  

      :rtype: `bool`








   .. method:: CanRedo(self)

      Returns ``True`` if there is a redo facility available and the last operation can be redone.                  

      :rtype: `bool`








   .. method:: CanUndo(self)

      Returns ``True`` if there is an undo facility available and the last operation can be undone.                  

      :rtype: `bool`








   .. method:: ChangeValue(self, value)

      Sets the new text control value.                  

      It also marks the control as not-modified which means that IsModified() would return ``False`` immediately after the call to :meth:`ChangeValue` . 

      The insertion point is set to the start of the control (i.e. position 0) by this function. 

      This functions does not generate the  ``wxEVT_TEXT``   event but otherwise is identical to  :meth:`SetValue` . 

      See :ref:`User Generated Events vs Programmatically Generated Events <user generated events vs programmatically generated events>`  for more information. 




      :param `value`: The new value to set. It may contain newline characters if the text control is multi-line.   
      :type `value`: string




                  



      .. versionadded:: 2.7.1 
    








   .. method:: Clear(self)

      Clears the text in the control.                  

      Note that this function will generate a  ``wxEVT_TEXT``   event, i.e. its effect is identical to calling   ``SetValue`` ("").                    





   .. method:: Copy(self)

      Copies the selected text to the clipboard.                   





   .. method:: Create(self, parent, id=ID_ANY, value=EmptyString, pos=DefaultPosition, size=DefaultSize, style=0, validator=DefaultValidator, name=SearchCtrlNameStr)




      :param `parent`: 
      :type `parent`: wx.Window
      :param `id`: 
      :type `id`: wx.WindowID
      :param `value`: 
      :type `value`: string
      :param `pos`: 
      :type `pos`: wx.Point
      :param `size`: 
      :type `size`: wx.Size
      :param `style`: 
      :type `style`: long
      :param `validator`: 
      :type `validator`: wx.Validator
      :param `name`: 
      :type `name`: string




      :rtype: `bool`








   .. method:: Cut(self)

      Copies the selected text to the clipboard and removes it from the control.                   





   .. method:: DiscardEdits(self)

      Resets the internal modified flag as if the current changes had been saved.                   





   .. method:: EmulateKeyPress(self, event)

      This function inserts into the control the character which would have been inserted if the given key event had occurred in the text control.                  

      The `event`  object should be the same as the one passed to  ``EVT_KEY_DOWN``   handler previously by wxWidgets. Please note that this function doesn't currently work correctly for all keys under any platform but MSW. 

                


      :param `event`: 
      :type `event`: wx.KeyEvent




      :rtype: `bool`







      :returns: 

         ``True`` if the event resulted in a change to the control, ``False`` otherwise.   








   .. staticmethod:: GetClassDefaultAttributes(variant=WINDOW_VARIANT_NORMAL)




      :param `variant`: 
      :type `variant`: wx.WindowVariant




      :rtype: :ref:`wx.VisualAttributes`








   .. method:: GetDefaultStyle(self)

      Returns the style currently used for the new text.                  

                

      :rtype: :ref:`wx.TextAttr`







      .. seealso:: :meth:`SetDefaultStyle`     








   .. method:: GetDescriptiveText(self)

      Return the text displayed when there is not yet any user input.                  

      :rtype: `string`








   .. method:: GetHint(self)

      Returns the current hint string.                  

      See :meth:`SetHint`   for more information about hints. 

                

      :rtype: `string`







      .. versionadded:: 2.9.0 
     








   .. method:: GetInsertionPoint(self)

      Returns the insertion point, or cursor, position.                  

      This is defined as the zero based index of the character position to the right of the insertion point. For example, if the insertion point is at the end of the single-line text control, it is equal to :meth:`GetLastPosition` . 

      Notice that insertion position is, in general, different from the index of the character the cursor position at in the string returned by :meth:`GetValue` . While this is always the case for the single line controls, multi-line controls can use two characters  ``"\\r\\n"``   as line separator (this is notably the case under MSW) meaning that indices in the control and its string value are offset by 1 for every line. 

      Hence to correctly get the character at the current cursor position, taking into account that there can be none if the cursor is at the end of the string, you could do the following: 

      ::

                  def GetCurrentChar(textCtrl):

                      pos = textCtrl.GetInsertionPoint()

                      if pos == textCtrl.GetLastPosition():
                          return ''

                      return textCtrl.GetValue()[pos]

                 

      :rtype: `long`








   .. method:: GetLastPosition(self)

      Returns the zero based index of the last position in the text control, which is equal to the number of characters in the control.                  

      :rtype: :ref:`wx.TextPos`








   .. method:: GetLineLength(self, lineNo)

      Gets the length of the specified line, not including any trailing newline character(s).                  




      :param `lineNo`: Line number (starting from zero).  
      :type `lineNo`: long






      :rtype: `int`



                  



      :returns: 

         The length of the line, or -1 if `lineNo`  was invalid.   








   .. method:: GetLineText(self, lineNo)

      Returns the contents of a given line in the text control, not including any trailing newline character(s).                  




      :param `lineNo`: The line number, starting from zero.  
      :type `lineNo`: long






      :rtype: `string`



                  



      :returns: 

         The contents of the line.   








   .. method:: GetMargins(self)

      Returns the margins used by the control.                  

      The  ``x``   field of the returned point is the horizontal margin and the   ``y``   field is the vertical one. 

                

      :rtype: :ref:`wx.Point`







      .. versionadded:: 2.9.1 
     







      .. note:: 

         If given margin cannot be accurately determined, its value will be set to -1. On some platforms you cannot obtain valid margin values until you have called :meth:`SetMargins` .  







      .. seealso:: :meth:`SetMargins`   








   .. method:: GetMenu(self)

      Returns a pointer to the search control's menu object or ``None`` if there is no menu attached.                  

      :rtype: :ref:`wx.Menu`








   .. method:: GetNumberOfLines(self)

      Returns the number of lines in the text control buffer.                  

      The returned number is the number of logical lines, i.e. just the count of the number of newline characters in the control + 1, for wxGTK and OSX/Cocoa ports while it is the number of physical lines, i.e. the count of lines actually shown in the control, in wxMSW and OSX/Carbon. Because of this discrepancy, it is not recommended to use this function. 

                

      :rtype: `int`







      .. note:: 

         Note that even empty text controls have one line (where the insertion point is), so :meth:`GetNumberOfLines`   never returns 0.   








   .. method:: GetRange(self, from_, to_)

      Returns the string containing the text starting in the positions `from`  and up to `to`  in the control.                  

      The positions must have been returned by another :ref:`wx.TextCtrl`  method. Please note that the positions in a multiline :ref:`wx.TextCtrl`  do **not**  correspond to the indices in the string returned by :meth:`GetValue`   because of the different new line representations ( ``CR``   or   ``CR``   ``LF``) and so this method should be used to obtain the correct results instead of extracting parts of the entire value. It may also be more efficient, especially if the control contains a lot of data.                   


      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long




      :rtype: `string`








   .. method:: GetSelection(self)

      Gets the current selection span.                  

      If the returned values are equal, there was no selection. Please note that the indices returned may be used with the other :ref:`wx.TextCtrl`  methods but don't necessarily represent the correct indices into the string returned by :meth:`GetValue`   for multiline controls under Windows (at least,) you should use :meth:`GetStringSelection`   to get the selected text. 







      :rtype: `tuple`



      




   .. method:: GetStringSelection(self)

      Gets the text currently selected in the control.                  

      If there is no selection, the returned string is empty.                  

      :rtype: `string`








   .. method:: GetStyle(self, position, style)

      Returns the style at this position in the text control.                  

      Not all platforms support this function. 

                


      :param `position`: 
      :type `position`: long
      :param `style`: 
      :type `style`: wx.TextAttr




      :rtype: `bool`







      :returns: 

         ``True`` on success, ``False`` if an error occurred (this may also mean that the styles are not supported under this platform).  







      .. seealso:: :meth:`SetStyle` , :ref:`wx.TextAttr`    








   .. method:: GetValue(self)

      Gets the contents of the control.                  

      Notice that for a multiline text control, the lines will be separated by (Unix-style)  ``\n``   characters, even under Windows where they are separated by a   ``\r\n``   sequence in the native control.                   

      :rtype: `string`








   .. method:: HitTestPos(self, pt)

      Finds the position of the character at the specified point.                  

      If the return code is not  ``TE_HT_UNKNOWN``   the row and column of the character closest to this position are returned, otherwise the output parameters are not modified. 

      Please note that this function is currently only implemented in Univ, wxMSW and wxGTK ports and always returns  ``TE_HT_UNKNOWN``   in the other ports. 

      




   .. method:: HitTest(self, pt)

      Finds the row and column of the character at the specified point.                  

      If the return code is not  ``TE_HT_UNKNOWN``   the row and column of the character closest to this position are returned, otherwise the output parameters are not modified. 

      Please note that this function is currently only implemented in Univ, wxMSW and wxGTK ports and always returns  ``TE_HT_UNKNOWN``   in the other ports. 

      




   .. method:: IsCancelButtonVisible(self)

      Returns the cancel button's visibility state.                  

      :rtype: `bool`








   .. method:: IsEditable(self)

      Returns ``True`` if the controls contents may be edited by user (note that it always can be changed by the program).                  

      In other words, this functions returns ``True`` if the control hasn't been put in read-only mode by a previous call to :meth:`SetEditable` .                  

      :rtype: `bool`








   .. method:: IsEmpty(self)

      Returns ``True`` if the control is currently empty.                  

      This is the same as  :meth:`GetValue` .empty() but can be much more efficient for the multiline controls containing big amounts of text. 

                

      :rtype: `bool`







      .. versionadded:: 2.7.1 
     








   .. method:: IsModified(self)

      Returns ``True`` if the text has been modified by user.                  

      Note that calling :meth:`SetValue`   doesn't make the control modified. 

                

      :rtype: `bool`







      .. seealso:: :meth:`MarkDirty`     








   .. method:: IsMultiLine(self)

      Returns ``True`` if this is a multi line edit control and ``False`` otherwise.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsSingleLine`     








   .. method:: IsSearchButtonVisible(self)

      Returns the search button visibility value.                  

      If there is a menu attached, the search button will be visible regardless of the search button visibility value. 

      This always returns ``False`` in Mac OS X v10.3                  

      :rtype: `bool`








   .. method:: IsSingleLine(self)

      Returns ``True`` if this is a single line edit control and ``False`` otherwise.                  

                

      :rtype: `bool`







      .. seealso:: :meth:`IsSingleLine` , :meth:`IsMultiLine`     








   .. method:: MarkDirty(self)

      Mark text as modified (dirty).                  

                 



      .. seealso:: :meth:`IsModified`     








   .. method:: Paste(self)

      Pastes text from the clipboard to the text item.                   





   .. method:: PositionToCoords(self, pos)

      Converts given text position to client coordinates in pixels.                  

      This function allows finding where is the character at the given position displayed in the text control. 






      :param `pos`: Text position in 0 to :meth:`GetLastPosition`   range (inclusive).   
      :type `pos`: long






      :rtype: :ref:`wx.Point`



                  



      :returns: 

         On success returns a :ref:`wx.Point`  which contains client coordinates for the given position in pixels, otherwise returns :ref:`wx.DefaultPosition`.  







      .. versionadded:: 2.9.3 
    







      .. availability:: Only available for MSW, GTK . Additionally, wxGTK only implements this method for multiline controls and :ref:`wx.DefaultPosition`  is always returned for the single line ones. 







      .. seealso:: :meth:`XYToPosition` , :meth:`PositionToXY`     








   .. method:: PositionToXY(self, pos)

      Converts given position to a zero-based column, line number pair.                  




      :param `pos`: Position.   
      :type `pos`: long










      :rtype: `tuple`



      




   .. method:: Redo(self)

      If there is a redo facility and the last operation can be redone, redoes the last operation.                  

      Does nothing if there is no redo facility.                   





   .. method:: Remove(self, from_, to_)

      Removes the text starting at the first given position up to (but not including) the character at the last position.                  

      This function puts the current insertion point position at `to`  as a side effect. 




      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long




      The first position.  



      The last position.  

                  





   .. method:: Replace(self, from_, to_, value)

      Replaces the text starting at the first position up to (but not including) the character at the last position with the given text.                  

      This function puts the current insertion point position at `to`  as a side effect. 




      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long
      :param `value`: The value to replace the existing text with.   
      :type `value`: string




      The first position.  



      The last position.  



                  





   .. method:: SelectAll(self)

      Selects all text in the control.                  

                 



      .. seealso:: :meth:`SetSelection`     








   .. method:: SelectNone(self)

      Deselects selected text in the control.                  

                 



      .. versionadded:: 2.9.5 
     








   .. method:: SetCancelBitmap(self, bmp)






   .. method:: SetDefaultStyle(self, style)

      Changes the default style to use for the new text which is going to be added to the control using :meth:`WriteText`   or :meth:`AppendText` .                  

      If either of the font, foreground, or background colour is not set in `style`, the values of the previous default style are used for them. If the previous default style didn't set them neither, the global font or colours of the text control itself are used as fall back. 

      However if the `style`  parameter is the default :ref:`wx.TextAttr`, then the default style is just reset (instead of being combined with the new style which wouldn't change it at all). 




      :param `style`: The style for the new text.  
      :type `style`: wx.TextAttr






      :rtype: `bool`



                  



      :returns: 

         ``True`` on success, ``False`` if an error occurred (this may also mean that the styles are not supported under this platform).  







      .. seealso:: :meth:`GetDefaultStyle`     








   .. method:: SetDescriptiveText(self, text)

      Set the text to be displayed in the search control when the user has not yet typed anything in it.                  


      :param `text`: 
      :type `text`: string







   .. method:: SetEditable(self, editable)

      Makes the text item editable or read-only, overriding the ``wx.TE_READONLY``  flag.                  




      :param `editable`: If ``True``, the control is editable. If ``False``, the control is read-only.  
      :type `editable`: bool




                  



      .. seealso:: :meth:`IsEditable`     








   .. method:: SetHint(self, hint)

      Sets a hint shown in an empty unfocused text control.                  

      The hints are usually used to indicate to the user what is supposed to be entered into the given entry field, e.g. a common use of them is to show an explanation of what can be entered in a :ref:`wx.SearchCtrl`. 

      The hint is shown (usually greyed out) for an empty control until it gets focus and is shown again if the control loses it and remains empty. It won't be shown once the control has a non-empty value, although it will be shown again if the control contents is cleared. Because of this, it generally only makes sense to use hints with the controls which are initially empty. 

      Notice that hints are known as `cue banners`  under MSW or `placeholder strings`  under OS X. 

                


      :param `hint`: 
      :type `hint`: string




      :rtype: `bool`







      .. versionadded:: 2.9.0 
     







      .. note:: 

         For the platforms without native hints support (and currently only the MSW port does have it and even there it is only used under Windows Vista and later only), the implementation has several known limitations. Notably, the hint display will not be properly updated if you change :ref:`wx.TextEntry`  contents programmatically when the hint is displayed using methods other than :meth:`SetValue`   or :meth:`ChangeValue`   or others which use them internally (e.g. :meth:`Clear` ). In other words, currently you should avoid calling methods such as :meth:`WriteText`   or :meth:`Replace`   when using hints and the text control is empty.  







      .. note:: 

         Hints can only be used for single line text controls, native multi-line text controls don't support hints under any platform and hence wxWidgets doesn't provide them neither.  








   .. method:: SetInsertionPoint(self, pos)

      Sets the insertion point at the given position.                  




      :param `pos`: Position to set, in the range from 0 to :meth:`GetLastPosition`   inclusive.   
      :type `pos`: long




                  





   .. method:: SetInsertionPointEnd(self)

      Sets the insertion point at the end of the text control.                  

      This is equivalent to calling :meth:`wx.TextCtrl.SetInsertionPoint`   with :meth:`wx.TextCtrl.GetLastPosition`   argument.                   





   .. method:: SetMargins(self, *args, **kw)

      Attempts to set the control margins.                  

      When margins are given as :ref:`wx.Point`, x indicates the left and y the top margin. Use -1 to indicate that an existing value should be used. 

                 



      :returns: 

         ``True`` if setting of all requested margins was successful.  







      .. versionadded:: 2.9.1 
     





      |overload| Overloaded Implementations:

      :html:`<hr class="overloadsep" /><br />`

      
      **SetMargins** `(self, pt)`
      
      
      
      
      :param `pt`: 
      :type `pt`: wx.Point
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`

      
      **SetMargins** `(self, left, top=-1)`
      
      
      
      
      :param `left`: 
      :type `left`: int
      :param `top`: 
      :type `top`: int
      
      
      
      
      :rtype: `bool`
      
      
      
      
      
      
      
      :html:`<hr class="overloadsep" /><br />`






   .. method:: SetMaxLength(self, len)

      This function sets the maximum number of characters the user can enter into the control.                  

      In other words, it allows limiting the text value length to `len`  not counting the terminating  ``NUL``   character. 

      If `len`  is 0, the previously set max length limit, if any, is discarded and the user may enter as much text as the underlying native text control widget supports (typically at least 32Kb). If the user tries to enter more characters into the text control when it already is filled up to the maximal length, a  ``wxEVT_TEXT_MAXLEN``   event is sent to notify the program about it (giving it the possibility to show an explanatory message, for example) and the extra input is discarded. 

      Note that in wxGTK this function may only be used with single line text controls.                  


      :param `len`: 
      :type `len`: long







   .. method:: SetMenu(self, menu)

      Sets the search control's menu object.                  

      If there is already a menu associated with the search control it is deleted. 




      :param `menu`: Menu to attach to the search control.   
      :type `menu`: wx.Menu




                  





   .. method:: SetModified(self, modified)

      Marks the control as being modified by the user or not.                  

                


      :param `modified`: 
      :type `modified`: bool






      .. seealso:: :meth:`MarkDirty` , :meth:`DiscardEdits`     








   .. method:: SetSearchBitmap(self, bmp)






   .. method:: SetSearchMenuBitmap(self, bmp)






   .. method:: SetSelection(self, from_, to_)

      Selects the text starting at the first position up to (but not including) the character at the last position.                  

      If both parameters are equal to -1 all text in the control is selected. 

      Notice that the insertion point will be moved to `from`  by this function. 




      :param `from_`: 
      :type `from_`: long
      :param `to_`: 
      :type `to_`: long




      The first position.  



      The last position. 

                  



      .. seealso:: :meth:`SelectAll`     








   .. method:: SetStyle(self, start, end, style)

      Changes the style of the given range.                  

      If any attribute within `style`  is not set, the corresponding attribute from :meth:`GetDefaultStyle`   is used. 




      :param `start`: The start of the range to change.   
      :type `start`: long
      :param `end`: The end of the range to change.   
      :type `end`: long
      :param `style`: The new style for the range.  
      :type `style`: wx.TextAttr










      :rtype: `bool`



                  



      :returns: 

         ``True`` on success, ``False`` if an error occurred (this may also mean that the styles are not supported under this platform).  







      .. seealso:: :meth:`GetStyle` , :ref:`wx.TextAttr`    








   .. method:: SetValue(self, value)

      Sets the new text control value.                  

      It also marks the control as not-modified which means that IsModified() would return ``False`` immediately after the call to :meth:`SetValue` . 

      The insertion point is set to the start of the control (i.e. position 0) by this function. 

      Note that, unlike most other functions changing the controls values, this function generates a  ``wxEVT_TEXT``   event. To avoid this you can use  :meth:`ChangeValue`   instead. 




      :param `value`: The new value to set. It may contain newline characters if the text control is multi-line.   
      :type `value`: string




                  





   .. method:: ShowCancelButton(self, show)

      Shows or hides the cancel button.                  


      :param `show`: 
      :type `show`: bool







   .. method:: ShowPosition(self, pos)

      Makes the line containing the given position visible.                  




      :param `pos`: The position that should be visible.   
      :type `pos`: long




                  





   .. method:: ShowSearchButton(self, show)

      Sets the search button visibility value on the search control.                  

      If there is a menu attached, the search button will be visible regardless of the search button visibility value. 

      This has no effect in Mac OS X v10.3                  


      :param `show`: 
      :type `show`: bool







   .. method:: Undo(self)

      If there is an undo facility and the last operation can be undone, undoes the last operation.                  

      Does nothing if there is no undo facility.                   





   .. method:: WriteText(self, text)

      Writes the text into the text control at the current insertion position.                  




      :param `text`: Text to write to the text control.  
      :type `text`: string




                  



      .. note:: 

         Newlines in the text string are the only control characters allowed, and they will cause appropriate line breaks. See operator<<() and :meth:`AppendText`   for more convenient ways of writing to the window. After the write operation, the insertion point will be at the end of the inserted text, so subsequent write operations will be appended. To append text after the user may have interacted with the control, call :meth:`wx.TextCtrl.SetInsertionPointEnd`   before writing.   








   .. method:: XYToPosition(self, x, y)

      Converts the given zero based column and line number to a position.                  




      :param `x`: The column number.   
      :type `x`: long
      :param `y`: The line number.  
      :type `y`: long








      :rtype: `long`



                  



      :returns: 

         The position value, or -1 if x or y was invalid.   








   .. method:: flush(self)

      ``NOP``, for file-like compatibility.  





   .. method:: write(self, text)

      Append text to the textctrl, for file-like compatibility.  





   .. attribute:: CancelButtonVisible

      See :meth:`~wx.SearchCtrl.IsCancelButtonVisible` and :meth:`~wx.SearchCtrl.ShowCancelButton`


   .. attribute:: DefaultStyle

      See :meth:`~wx.SearchCtrl.GetDefaultStyle` and :meth:`~wx.SearchCtrl.SetDefaultStyle`


   .. attribute:: DescriptiveText

      See :meth:`~wx.SearchCtrl.GetDescriptiveText` and :meth:`~wx.SearchCtrl.SetDescriptiveText`


   .. attribute:: Hint

      See :meth:`~wx.SearchCtrl.GetHint` and :meth:`~wx.SearchCtrl.SetHint`


   .. attribute:: InsertionPoint

      See :meth:`~wx.SearchCtrl.GetInsertionPoint` and :meth:`~wx.SearchCtrl.SetInsertionPoint`


   .. attribute:: LastPosition

      See :meth:`~wx.SearchCtrl.GetLastPosition`


   .. attribute:: Margins

      See :meth:`~wx.SearchCtrl.GetMargins` and :meth:`~wx.SearchCtrl.SetMargins`


   .. attribute:: Menu

      See :meth:`~wx.SearchCtrl.GetMenu` and :meth:`~wx.SearchCtrl.SetMenu`


   .. attribute:: NumberOfLines

      See :meth:`~wx.SearchCtrl.GetNumberOfLines`


   .. attribute:: SearchButtonVisible

      See :meth:`~wx.SearchCtrl.IsSearchButtonVisible` and :meth:`~wx.SearchCtrl.ShowSearchButton`


   .. attribute:: StringSelection

      See :meth:`~wx.SearchCtrl.GetStringSelection`


   .. attribute:: Value

      See :meth:`~wx.SearchCtrl.GetValue` and :meth:`~wx.SearchCtrl.SetValue`


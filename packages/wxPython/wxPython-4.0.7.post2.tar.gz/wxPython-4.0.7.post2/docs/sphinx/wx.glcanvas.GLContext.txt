.. wxPython Phoenix documentation

   This file was generated by Phoenix's sphinx generator and associated
   tools, do not edit by hand.

   Copyright: (c) 2011-2018 by Total Control Software
   License:   wxWindows License

.. include:: headings.inc



.. _wx.glcanvas.GLContext:

==========================================================================================================================================
|phoenix_title|  **wx.glcanvas.GLContext**
==========================================================================================================================================

An instance of a :ref:`wx.glcanvas.GLContext`  represents the state of an OpenGL state machine and the connection between OpenGL and the system.          

The OpenGL state includes everything that can be set with the OpenGL API: colors, rendering variables, display lists, texture objects, etc. Although it is possible to have multiple rendering contexts share display lists in order to save resources, this method is hardly used today any more, because display lists are only a tiny fraction of the overall state. 

Therefore, one rendering context is usually used with or bound to multiple output windows in turn, so that the application has access to the complete and identical state while rendering into each window. 

Binding (making current) a rendering context with another instance of a :ref:`wx.glcanvas.GLCanvas`  however works only if the other :ref:`wx.glcanvas.GLCanvas`  was created with the same attributes as the :ref:`wx.glcanvas.GLCanvas`  from which the :ref:`wx.glcanvas.GLContext`  was initialized. (This applies to sharing display lists among contexts analogously.) 

Note that some :ref:`wx.glcanvas.GLContext`  features are extremely platform-specific - its best to check your native platform's glcanvas header (on windows include/wx/msw/glcanvas.h) to see what features your native platform provides. 

``HAS_OPENGL_ES`` is defined on platforms that only have this implementation available (eg the iPhone) und don't support the full specification. 







         



.. seealso:: :ref:`wx.glcanvas.GLCanvas`    







|

|class_hierarchy| Class Hierarchy
=================================

.. raw:: html

   <div id="toggleBlock" onclick="return toggleVisibility(this)" class="closed" style="cursor:pointer;">
   <img id="toggleBlock-trigger" src="_static/images/closed.png"/>
   Inheritance diagram for class <strong>GLContext</strong>:
   </div>
   <div id="toggleBlock-summary" style="display:block;"></div>
   <div id="toggleBlock-content" style="display:none;">
   <p class="graphviz">
   <center><img src="_static/images/inheritance/wx.glcanvas.GLContext_inheritance.png" alt="Inheritance diagram of GLContext" usemap="#dummy" class="inheritance"/></center>
   <script type="text/javascript">toggleVisibilityOnLoad(document.getElementById('toggleBlock'))</script>
   <map id="dummy" name="dummy"> <area shape="rect" id="node1" href="wx.glcanvas.GLContext.html" title="wx.glcanvas.GLContext" alt="" coords="5,83,180,112"/> <area shape="rect" id="node2" href="wx.Object.html" title="wx.Object" alt="" coords="49,5,136,35"/> </map> 
   </p>
   </div>

|


|method_summary| Methods Summary
================================

================================================================================ ================================================================================
:meth:`~wx.glcanvas.GLContext.__init__`                                          Constructor.
:meth:`~wx.glcanvas.GLContext.SetCurrent`                                        Makes the OpenGL state that is represented by this rendering context current with the :ref:`wx.glcanvas.GLCanvas`  `win`.
================================================================================ ================================================================================


|


|api| Class API
===============


.. class:: wx.glcanvas.GLContext(Object)

   **Possible constructors**::

       GLContext(win, other=None)
       
   
   An instance of a GLContext represents the state of an OpenGL state
   machine and the connection between OpenGL and the system.



   .. method:: __init__(self, win, other=None)

      Constructor.                  




      :param `win`: The canvas that is used to initialize this context. This parameter is needed only temporarily, and the caller may do anything with it (e.g. destroy the window) after the constructor returned. 

        It will be possible to bind (make current) this context to any other :ref:`wx.glcanvas.GLCanvas`  that has been created with equivalent attributes as win.   
      :type `win`: wx.glcanvas.GLCanvas
      :param `other`: Context to share display lists with or ``None`` (the default) for no sharing.   
      :type `other`: wx.glcanvas.GLContext






                  





   .. method:: SetCurrent(self, win)

      Makes the OpenGL state that is represented by this rendering context current with the :ref:`wx.glcanvas.GLCanvas`  `win`.                  

                


      :param `win`: 
      :type `win`: wx.glcanvas.GLCanvas




      :rtype: `bool`







      .. note:: 

         `win`  can be a different :ref:`wx.glcanvas.GLCanvas`  window than the one that was passed to the constructor of this rendering context. If ``RC``  is an object of type :ref:`wx.glcanvas.GLContext`, the statements `"RC.SetCurrent(win);"`  and `"win.SetCurrent(RC);"`  are equivalent, see :meth:`wx.glcanvas.GLCanvas.SetCurrent` .   








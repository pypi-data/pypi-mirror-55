# coding: utf-8

"""
    Pulp 3 API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pulpcore.client.pulp_rpm.api_client import ApiClient
from pulpcore.client.pulp_rpm.exceptions import (
    ApiTypeError,
    ApiValueError
)


class RpmCopyApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def copy_content(self, dest_repo, **kwargs):  # noqa: E501
        """Copy content  # noqa: E501

        Trigger an asynchronous task to copy RPM contentfrom one repository into another, creating a newrepository version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_content(dest_repo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str dest_repo: A URI of the repository. (required)
        :param str source_repo: A URI of the repository.
        :param str source_repo_version: A URI of the repository version
        :param list[str] types: A list of types to copy [\"package\", \"advisory\"]
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AsyncOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.copy_content_with_http_info(dest_repo, **kwargs)  # noqa: E501

    def copy_content_with_http_info(self, dest_repo, **kwargs):  # noqa: E501
        """Copy content  # noqa: E501

        Trigger an asynchronous task to copy RPM contentfrom one repository into another, creating a newrepository version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.copy_content_with_http_info(dest_repo, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str dest_repo: A URI of the repository. (required)
        :param str source_repo: A URI of the repository.
        :param str source_repo_version: A URI of the repository version
        :param list[str] types: A list of types to copy [\"package\", \"advisory\"]
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AsyncOperationResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['dest_repo', 'source_repo', 'source_repo_version', 'types']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_content" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'dest_repo' is set
        if self.api_client.client_side_validation and ('dest_repo' not in local_var_params or  # noqa: E501
                                                        local_var_params['dest_repo'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `dest_repo` when calling `copy_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'source_repo' in local_var_params:
            form_params.append(('source_repo', local_var_params['source_repo']))  # noqa: E501
        if 'source_repo_version' in local_var_params:
            form_params.append(('source_repo_version', local_var_params['source_repo_version']))  # noqa: E501
        if 'dest_repo' in local_var_params:
            form_params.append(('dest_repo', local_var_params['dest_repo']))  # noqa: E501
        if 'types' in local_var_params:
            form_params.append(('types', local_var_params['types']))  # noqa: E501
            collection_formats['types'] = 'csv'  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Basic']  # noqa: E501

        return self.api_client.call_api(
            '/pulp/api/v3/rpm/copy/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AsyncOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

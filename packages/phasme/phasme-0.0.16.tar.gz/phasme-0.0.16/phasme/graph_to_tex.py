"""Converter from networkx graph to latex/tikz representation.

"""
import networkx
import itertools
from collections import defaultdict


TEX_HEAD = r"""
\begin{figure}
\begin {tikzpicture}[
    auto,node distance=4cm and 5cm,on grid,semithick,
    state/.style={thick,draw=black,ellipse,minimum width=18pt,align=center}
]
""".strip('\n')

TEX_NODE = r"""
    \node[state] ({uid}) at ({x}, {y}) {{{name}}};
""".strip('\n')

TEX_EDGE = r"""
    \path ({source}) edge{attributes} ({target});
""".strip('\n')

TEX_FOOT = """
\end{tikzpicture}
\caption{Graph generated by phasme.} \label{graph:phasme-generation}
\end{figure}
""".strip('\n')


def graph_to_file(graph, fname:str, engine:str='neato',
                  width:float=12, height:float=8, bend:bool=True):
    """Write in file of given name the tex representation of given graph."""
    with open(fname, 'w') as fd:
        lines = tex_from_graph(graph, engine=engine, width=width,
                               height=height, bend_edges=bend)
        for line in lines:
            fd.write(line + '\n')


def tex_from_graph(graph, engine:str, width:float, height:float,
                   bend_edges:bool) -> [str]:
    """Yield lines of tex/tikz that are equivalent to given graph"""
    _uids = iter(itertools.count(1))
    uids = defaultdict(lambda: next(_uids))
    yield from TEX_HEAD.splitlines(False)
    # delete offset induced by some engine, get maximal values
    node_layout = get_node_layout(graph, engine=engine)
    min_x, min_y = map(min, zip(*node_layout.values()))
    node_layout = {node: (x - min_x, y - min_y) for node, (x, y) in node_layout.items()}
    max_x, max_y = map(max, zip(*node_layout.values()))
    # yield node and edge representations
    for node, pos in node_layout.items():
        x, y = layout_position_to_feet(*pos, max_x, max_y, width=width, height=height)
        yield TEX_NODE.format(uid=uids[node], name=node, x=x, y=y)
    attribute = ' [bend right=5]' if bend_edges else ''
    for source, target in graph.edges:
        yield TEX_EDGE.format(source=uids[source], target=uids[target], attributes=attribute)
    yield from TEX_FOOT.splitlines(False)


def get_node_layout(graph, engine='neato') -> dict:
    """Map from node to node position computed by dot for input graph"""
    return networkx.nx_pydot.graphviz_layout(graph, prog=engine)


def layout_position_to_feet(x:float, y:float, maxx:float, maxy:float, width:float=12, height:float=8) -> (float, float):
    """Correct given position based on maximal position in whole graph
    and expected final size"""
    apply = lambda v, m, s: round(s * v / m, 2)
    return apply(x, maxx, width), apply(y, maxy, height)

# coding: utf-8

"""
    Bleumi Pay API

    A simple and powerful REST API to integrate ERC20 payments into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.wallet_balance import WalletBalance  # noqa: F401,E501
from bleumi_pay.models.wallet_inputs import WalletInputs  # noqa: F401,E501


class Wallet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'chain': 'str',
        'addr': 'str',
        'balances': 'dict(str, WalletBalance)',
        'inputs': 'WalletInputs',
        'created_at': 'int',
        'updated_at': 'int'
    }

    attribute_map = {
        'id': 'id',
        'chain': 'chain',
        'addr': 'addr',
        'balances': 'balances',
        'inputs': 'inputs',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, id=None, chain=None, addr=None, balances=None, inputs=None, created_at=None, updated_at=None):  # noqa: E501
        """Wallet - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._chain = None
        self._addr = None
        self._balances = None
        self._inputs = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if chain is not None:
            self.chain = chain
        if addr is not None:
            self.addr = addr
        if balances is not None:    
            self.balances = balances
        if inputs is not None:    
            self.inputs = inputs
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Wallet.  # noqa: E501

        Unique ID identifying the wallet; specified when it was created by your system  # noqa: E501

        :return: The id of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Wallet.

        Unique ID identifying the wallet; specified when it was created by your system  # noqa: E501

        :param id: The id of this Wallet.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def chain(self):
        """Gets the chain of this Wallet.  # noqa: E501

        Ethereum network in which wallet is to be created. Please refer to the [network list](https://pay.bleumi.com/docs/#supported-ethereum-networks)  # noqa: E501

        :return: The chain of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this Wallet.

        Ethereum network in which wallet is to be created. Please refer to the [network list](https://pay.bleumi.com/docs/#supported-ethereum-networks)  # noqa: E501

        :param chain: The chain of this Wallet.  # noqa: E501
        :type: str
        """
        if chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501

        self._chain = chain

    @property
    def addr(self):
        """Gets the addr of this Wallet.  # noqa: E501

        Wallet address  # noqa: E501

        :return: The addr of this Wallet.  # noqa: E501
        :rtype: str
        """
        return self._addr

    @addr.setter
    def addr(self, addr):
        """Sets the addr of this Wallet.

        Wallet address  # noqa: E501

        :param addr: The addr of this Wallet.  # noqa: E501
        :type: str
        """
        if addr is None:
            raise ValueError("Invalid value for `addr`, must not be `None`")  # noqa: E501

        self._addr = addr

    @property
    def balances(self):
        """Gets the balances of this Wallet.  # noqa: E501

        The current token balance  # noqa: E501

        :return: The balances of this Wallet.  # noqa: E501
        :rtype: dict(str, WalletBalance)
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this Wallet.

        The current token balance  # noqa: E501

        :param balances: The balances of this Wallet.  # noqa: E501
        :type: dict(str, WalletBalance)
        """
        if balances is None:
            raise ValueError("Invalid value for `balances`, must not be `None`")  # noqa: E501

        self._balances = balances

    @property
    def inputs(self):
        """Gets the inputs of this Wallet.  # noqa: E501


        :return: The inputs of this Wallet.  # noqa: E501
        :rtype: WalletInputs
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this Wallet.


        :param inputs: The inputs of this Wallet.  # noqa: E501
        :type: WalletInputs
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def created_at(self):
        """Gets the created_at of this Wallet.  # noqa: E501

        UNIX timestamp when the wallet was created  # noqa: E501

        :return: The created_at of this Wallet.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Wallet.

        UNIX timestamp when the wallet was created  # noqa: E501

        :param created_at: The created_at of this Wallet.  # noqa: E501
        :type: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Wallet.  # noqa: E501

        UNIX timestamp when the lastest operation was performed  # noqa: E501

        :return: The updated_at of this Wallet.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Wallet.

        UNIX timestamp when the lastest operation was performed  # noqa: E501

        :param updated_at: The updated_at of this Wallet.  # noqa: E501
        :type: int
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Wallet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Wallet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

# coding: utf-8

"""
    Bleumi Pay API

    A simple and powerful REST API to integrate ERC20 payments into your business or application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: info@bleumi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from bleumi_pay.models.wallet_operation_inputs import WalletOperationInputs  # noqa: F401,E501


class WalletOperation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'func_name': 'str',
        'status': 'bool',
        'inputs': 'WalletOperationInputs',
        'hash': 'str'
    }

    attribute_map = {
        'id': 'id',
        'func_name': 'funcName',
        'status': 'status',
        'inputs': 'inputs',
        'hash': 'hash'
    }

    def __init__(self, id=None, func_name=None, status=None, inputs=None, hash=None):  # noqa: E501
        """WalletOperation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._func_name = None
        self._status = None
        self._inputs = None
        self._hash = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if func_name is not None:
            self.func_name = func_name
        if status is not None:
            self.status = status
        if inputs is not None:
            self.inputs = inputs
        if hash is not None:
            self.hash = hash

    @property
    def id(self):
        """Gets the id of this WalletOperation.  # noqa: E501

        Unique ID of the wallet; specified when it was created by your system  # noqa: E501

        :return: The id of this WalletOperation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WalletOperation.

        Unique ID of the wallet; specified when it was created by your system  # noqa: E501

        :param id: The id of this WalletOperation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def func_name(self):
        """Gets the func_name of this WalletOperation.  # noqa: E501

        The name of the function invoked on the payment processor   # noqa: E501

        :return: The func_name of this WalletOperation.  # noqa: E501
        :rtype: str
        """
        return self._func_name

    @func_name.setter
    def func_name(self, func_name):
        """Sets the func_name of this WalletOperation.

        The name of the function invoked on the payment processor   # noqa: E501

        :param func_name: The func_name of this WalletOperation.  # noqa: E501
        :type: str
        """
        if func_name is None:
            raise ValueError("Invalid value for `func_name`, must not be `None`")  # noqa: E501

        self._func_name = func_name

    @property
    def status(self):
        """Gets the status of this WalletOperation.  # noqa: E501

        <b>null</b> - operation in progress <br/> <b>true</b> - operation completed successfuly <br/> <b>false</b> - operation failed to process  # noqa: E501

        :return: The status of this WalletOperation.  # noqa: E501
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WalletOperation.

        <b>null</b> - operation in progress <br/> <b>true</b> - operation completed successfuly <br/> <b>false</b> - operation failed to process  # noqa: E501

        :param status: The status of this WalletOperation.  # noqa: E501
        :type: bool
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def inputs(self):
        """Gets the inputs of this WalletOperation.  # noqa: E501


        :return: The inputs of this WalletOperation.  # noqa: E501
        :rtype: WalletOperationInputs
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this WalletOperation.


        :param inputs: The inputs of this WalletOperation.  # noqa: E501
        :type: WalletOperationInputs
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def hash(self):
        """Gets the hash of this WalletOperation.  # noqa: E501

        Transaction hash of operation submitted to the network. This field is blank when operation is in progress.  # noqa: E501

        :return: The hash of this WalletOperation.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this WalletOperation.

        Transaction hash of operation submitted to the network. This field is blank when operation is in progress.  # noqa: E501

        :param hash: The hash of this WalletOperation.  # noqa: E501
        :type: str
        """
        if hash is None:
            raise ValueError("Invalid value for `hash`, must not be `None`")  # noqa: E501

        self._hash = hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WalletOperation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WalletOperation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

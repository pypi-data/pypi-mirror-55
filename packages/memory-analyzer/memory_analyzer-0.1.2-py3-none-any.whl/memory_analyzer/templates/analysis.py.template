# Copyright (c) Facebook, Inc. and its affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

try:
  import objgraph
  import os
  import sys
  import re
  from pympler import muppy, summary
  import pickle
  try:
      from types import InstanceType
  except ImportError:
      # Python 3.x
      InstanceType = None


  class SwallowPrints:
      def __enter__(self):
          self._old_stdout = sys.stdout
          sys.stdout = open(os.devnull, 'w')

      def __exit__(self, exc_type, exc_val, exc_tb):
          sys.stdout.close()
          sys.stdout = self._old_stdout

  def _get_obj_type(obj):
      objtype = type(obj)
      if type(obj) == InstanceType:
          objtype = obj.__class__
      return objtype

  def _repr(obj):
      objtype = _get_obj_type(obj)
      name = objtype.__name__
      module = getattr(objtype, '__module__', None)
      if module:
          return f"{module}.{name}"
      else:
          return name

  summary._repr = _repr

  def forward_references(dirname, obj, shortname):
    filename_forw = f'{dirname}/ref_{{ pid }}_{shortname}.png'
    objgraph.show_refs(obj, filename=filename_forw)
    return filename_forw

  def backwards_references(dirname, obj, shortname):
    filename_back = f'{dirname}/backref_{{ pid }}_{shortname}.png'
    objgraph.show_backrefs(obj, filename=filename_back)
    return filename_back


  def create_references(sublist):
      obj = sublist[0]
      obj_shortname = obj.split('.')[-1]
      obj_shortname = re.sub("[^A-Za-z0-9._]+", "", obj_shortname)
      dirname = os.path.dirname(os.path.abspath("{{ output_file }}"))
      with SwallowPrints():
          forw = forward_references(dirname, obj, obj_shortname)
          back = backwards_references(dirname, obj, obj_shortname)
      return forw, back

  all_objects = muppy.get_objects(remove_dups=True)
  summ = summary.summarize(all_objects)
  if {{ num_refs }} > 0:
      summ.sort(key=lambda x: x[2], reverse=True)
      for sublist in summ[:{{ num_refs }}]:
          forw, back = create_references(sublist)
          sublist.extend([forw, back])
  for obj in {{ specific_refs }}:
      for sublist in summ:
          if obj in sublist[0]:
              forw, back = create_references(sublist)
              sublist.extend([forw, back])
              break

  with open('/tmp/memanz_pipe_{{ pid }}', 'wb') as fifo:
      pickle.dump(summ, fifo)

except Exception as e:
    print("Got exception", e)
    import pickle
    # We don't want exceptions here to affect the profiled process but want to
    # see the exceptions in the UI
    with open('/tmp/memanz_pipe_{{ pid }}', 'wb') as fifo:
        pickle.dump(e, fifo)
